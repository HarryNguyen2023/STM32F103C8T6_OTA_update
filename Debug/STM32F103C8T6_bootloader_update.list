
STM32F103C8T6_bootloader_update.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d4c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000094c  08003e58  08003e58  00013e58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047a4  080047a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080047a4  080047a4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080047a4  080047a4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047a4  080047a4  000147a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047a8  080047a8  000147a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080047ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000508  20000078  08004820  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  08004820  00020580  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009456  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cac  00000000  00000000  000294f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000858  00000000  00000000  0002b1a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000800  00000000  00000000  0002b9f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017e2a  00000000  00000000  0002c1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a20a  00000000  00000000  00044022  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000842f2  00000000  00000000  0004e22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d251e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002860  00000000  00000000  000d2570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e40 	.word	0x08003e40

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	08003e40 	.word	0x08003e40

0800014c <EXT_OTA_Receive_Chunk>:
 * @param buffer: buffer to store the received data
 * @param max_len: maximum length of data to be received
 * @retval uint16_t
 */
static uint16_t EXT_OTA_Receive_Chunk(uint8_t* buffer, uint16_t max_len)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	807b      	strh	r3, [r7, #2]
	HAL_StatusTypeDef ret;
	uint16_t idx = 0u;
 8000158:	2300      	movs	r3, #0
 800015a:	83bb      	strh	r3, [r7, #28]
	uint16_t data_len;
	uint32_t cal_data_crc = 0u;
 800015c:	2300      	movs	r3, #0
 800015e:	617b      	str	r3, [r7, #20]
	uint32_t rec_data_crc = 0u;
 8000160:	2300      	movs	r3, #0
 8000162:	613b      	str	r3, [r7, #16]

	do
	{
		// Receive the SOF byte
		ret = HAL_UART_Receive(&huart1, &buffer[idx], 1, HAL_MAX_DELAY);
 8000164:	8bbb      	ldrh	r3, [r7, #28]
 8000166:	687a      	ldr	r2, [r7, #4]
 8000168:	18d1      	adds	r1, r2, r3
 800016a:	f04f 33ff 	mov.w	r3, #4294967295
 800016e:	2201      	movs	r2, #1
 8000170:	485f      	ldr	r0, [pc, #380]	; (80002f0 <EXT_OTA_Receive_Chunk+0x1a4>)
 8000172:	f002 fc9a 	bl	8002aaa <HAL_UART_Receive>
 8000176:	4603      	mov	r3, r0
 8000178:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 800017a:	7ffb      	ldrb	r3, [r7, #31]
 800017c:	2b00      	cmp	r3, #0
 800017e:	f040 8094 	bne.w	80002aa <EXT_OTA_Receive_Chunk+0x15e>
		{
			break;
		}
		// Check if the received byte is the SOF
		if(buffer[idx++] != EXT_OTA_SOF)
 8000182:	8bbb      	ldrh	r3, [r7, #28]
 8000184:	1c5a      	adds	r2, r3, #1
 8000186:	83ba      	strh	r2, [r7, #28]
 8000188:	461a      	mov	r2, r3
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	4413      	add	r3, r2
 800018e:	781b      	ldrb	r3, [r3, #0]
 8000190:	2baa      	cmp	r3, #170	; 0xaa
 8000192:	d002      	beq.n	800019a <EXT_OTA_Receive_Chunk+0x4e>
		{
			ret = EXT_OTA_EX_ERR;
 8000194:	2301      	movs	r3, #1
 8000196:	77fb      	strb	r3, [r7, #31]
			break;
 8000198:	e090      	b.n	80002bc <EXT_OTA_Receive_Chunk+0x170>
		}
		// Receive the packet type
		ret = HAL_UART_Receive(&huart1, &buffer[idx++], 1, HAL_MAX_DELAY);
 800019a:	8bbb      	ldrh	r3, [r7, #28]
 800019c:	1c5a      	adds	r2, r3, #1
 800019e:	83ba      	strh	r2, [r7, #28]
 80001a0:	461a      	mov	r2, r3
 80001a2:	687b      	ldr	r3, [r7, #4]
 80001a4:	1899      	adds	r1, r3, r2
 80001a6:	f04f 33ff 	mov.w	r3, #4294967295
 80001aa:	2201      	movs	r2, #1
 80001ac:	4850      	ldr	r0, [pc, #320]	; (80002f0 <EXT_OTA_Receive_Chunk+0x1a4>)
 80001ae:	f002 fc7c 	bl	8002aaa <HAL_UART_Receive>
 80001b2:	4603      	mov	r3, r0
 80001b4:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 80001b6:	7ffb      	ldrb	r3, [r7, #31]
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d178      	bne.n	80002ae <EXT_OTA_Receive_Chunk+0x162>
		{
			break;
		}
		// Get the data length of the packet
		ret = HAL_UART_Receive(&huart1, &buffer[idx], 2, HAL_MAX_DELAY);
 80001bc:	8bbb      	ldrh	r3, [r7, #28]
 80001be:	687a      	ldr	r2, [r7, #4]
 80001c0:	18d1      	adds	r1, r2, r3
 80001c2:	f04f 33ff 	mov.w	r3, #4294967295
 80001c6:	2202      	movs	r2, #2
 80001c8:	4849      	ldr	r0, [pc, #292]	; (80002f0 <EXT_OTA_Receive_Chunk+0x1a4>)
 80001ca:	f002 fc6e 	bl	8002aaa <HAL_UART_Receive>
 80001ce:	4603      	mov	r3, r0
 80001d0:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 80001d2:	7ffb      	ldrb	r3, [r7, #31]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d16c      	bne.n	80002b2 <EXT_OTA_Receive_Chunk+0x166>
		{
			break;
		}
		data_len = *(uint16_t *)&buffer[idx];
 80001d8:	8bbb      	ldrh	r3, [r7, #28]
 80001da:	687a      	ldr	r2, [r7, #4]
 80001dc:	4413      	add	r3, r2
 80001de:	881b      	ldrh	r3, [r3, #0]
 80001e0:	81fb      	strh	r3, [r7, #14]
		idx += 2;
 80001e2:	8bbb      	ldrh	r3, [r7, #28]
 80001e4:	3302      	adds	r3, #2
 80001e6:	83bb      	strh	r3, [r7, #28]

		// Receive the data
		for(uint16_t i = 0; i < data_len; ++i)
 80001e8:	2300      	movs	r3, #0
 80001ea:	837b      	strh	r3, [r7, #26]
 80001ec:	e013      	b.n	8000216 <EXT_OTA_Receive_Chunk+0xca>
		{
			ret = HAL_UART_Receive(&huart1, &buffer[idx++], 1, HAL_MAX_DELAY);
 80001ee:	8bbb      	ldrh	r3, [r7, #28]
 80001f0:	1c5a      	adds	r2, r3, #1
 80001f2:	83ba      	strh	r2, [r7, #28]
 80001f4:	461a      	mov	r2, r3
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	1899      	adds	r1, r3, r2
 80001fa:	f04f 33ff 	mov.w	r3, #4294967295
 80001fe:	2201      	movs	r2, #1
 8000200:	483b      	ldr	r0, [pc, #236]	; (80002f0 <EXT_OTA_Receive_Chunk+0x1a4>)
 8000202:	f002 fc52 	bl	8002aaa <HAL_UART_Receive>
 8000206:	4603      	mov	r3, r0
 8000208:	77fb      	strb	r3, [r7, #31]
			if(ret != HAL_OK)
 800020a:	7ffb      	ldrb	r3, [r7, #31]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d107      	bne.n	8000220 <EXT_OTA_Receive_Chunk+0xd4>
		for(uint16_t i = 0; i < data_len; ++i)
 8000210:	8b7b      	ldrh	r3, [r7, #26]
 8000212:	3301      	adds	r3, #1
 8000214:	837b      	strh	r3, [r7, #26]
 8000216:	8b7a      	ldrh	r2, [r7, #26]
 8000218:	89fb      	ldrh	r3, [r7, #14]
 800021a:	429a      	cmp	r2, r3
 800021c:	d3e7      	bcc.n	80001ee <EXT_OTA_Receive_Chunk+0xa2>
 800021e:	e000      	b.n	8000222 <EXT_OTA_Receive_Chunk+0xd6>
			{
				break;
 8000220:	bf00      	nop
			}
		}

		// Get the CRC of the data packet
		ret = HAL_UART_Receive( &huart1, &buffer[idx], 4, HAL_MAX_DELAY);
 8000222:	8bbb      	ldrh	r3, [r7, #28]
 8000224:	687a      	ldr	r2, [r7, #4]
 8000226:	18d1      	adds	r1, r2, r3
 8000228:	f04f 33ff 	mov.w	r3, #4294967295
 800022c:	2204      	movs	r2, #4
 800022e:	4830      	ldr	r0, [pc, #192]	; (80002f0 <EXT_OTA_Receive_Chunk+0x1a4>)
 8000230:	f002 fc3b 	bl	8002aaa <HAL_UART_Receive>
 8000234:	4603      	mov	r3, r0
 8000236:	77fb      	strb	r3, [r7, #31]
		if( ret != HAL_OK )
 8000238:	7ffb      	ldrb	r3, [r7, #31]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d13b      	bne.n	80002b6 <EXT_OTA_Receive_Chunk+0x16a>
		{
		  break;
		}
		rec_data_crc = *(uint32_t*)&buffer[idx];
 800023e:	8bbb      	ldrh	r3, [r7, #28]
 8000240:	687a      	ldr	r2, [r7, #4]
 8000242:	4413      	add	r3, r2
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	613b      	str	r3, [r7, #16]
		idx += 4;
 8000248:	8bbb      	ldrh	r3, [r7, #28]
 800024a:	3304      	adds	r3, #4
 800024c:	83bb      	strh	r3, [r7, #28]
		// Receive EOF byte
		ret = HAL_UART_Receive(&huart1, &buffer[idx], 1, HAL_MAX_DELAY);
 800024e:	8bbb      	ldrh	r3, [r7, #28]
 8000250:	687a      	ldr	r2, [r7, #4]
 8000252:	18d1      	adds	r1, r2, r3
 8000254:	f04f 33ff 	mov.w	r3, #4294967295
 8000258:	2201      	movs	r2, #1
 800025a:	4825      	ldr	r0, [pc, #148]	; (80002f0 <EXT_OTA_Receive_Chunk+0x1a4>)
 800025c:	f002 fc25 	bl	8002aaa <HAL_UART_Receive>
 8000260:	4603      	mov	r3, r0
 8000262:	77fb      	strb	r3, [r7, #31]
		if(ret != HAL_OK)
 8000264:	7ffb      	ldrb	r3, [r7, #31]
 8000266:	2b00      	cmp	r3, #0
 8000268:	d127      	bne.n	80002ba <EXT_OTA_Receive_Chunk+0x16e>
		{
			break;
		}
		// Check if the received byte is the SOF
		if(buffer[idx++] != EXT_OTA_EOF)
 800026a:	8bbb      	ldrh	r3, [r7, #28]
 800026c:	1c5a      	adds	r2, r3, #1
 800026e:	83ba      	strh	r2, [r7, #28]
 8000270:	461a      	mov	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	4413      	add	r3, r2
 8000276:	781b      	ldrb	r3, [r3, #0]
 8000278:	2bbb      	cmp	r3, #187	; 0xbb
 800027a:	d002      	beq.n	8000282 <EXT_OTA_Receive_Chunk+0x136>
		{
			ret = EXT_OTA_EX_ERR;
 800027c:	2301      	movs	r3, #1
 800027e:	77fb      	strb	r3, [r7, #31]
			break;
 8000280:	e01c      	b.n	80002bc <EXT_OTA_Receive_Chunk+0x170>
		}
		// Validate the CRC
		cal_data_crc = CalcCRC((uint8_t*)&buffer[4], data_len);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	3304      	adds	r3, #4
 8000286:	89fa      	ldrh	r2, [r7, #14]
 8000288:	4611      	mov	r1, r2
 800028a:	4618      	mov	r0, r3
 800028c:	f000 fdb6 	bl	8000dfc <CalcCRC>
 8000290:	6178      	str	r0, [r7, #20]
		if(rec_data_crc != cal_data_crc)
 8000292:	693a      	ldr	r2, [r7, #16]
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	429a      	cmp	r2, r3
 8000298:	d010      	beq.n	80002bc <EXT_OTA_Receive_Chunk+0x170>
		{
			printf("CRC mismatch [Cal CRC = 0x%08lX] [Rec CRC = 0x%08lX]\r\n", cal_data_crc, rec_data_crc);
 800029a:	693a      	ldr	r2, [r7, #16]
 800029c:	6979      	ldr	r1, [r7, #20]
 800029e:	4815      	ldr	r0, [pc, #84]	; (80002f4 <EXT_OTA_Receive_Chunk+0x1a8>)
 80002a0:	f002 fdc4 	bl	8002e2c <iprintf>
			ret = EXT_OTA_EX_ERR;
 80002a4:	2301      	movs	r3, #1
 80002a6:	77fb      	strb	r3, [r7, #31]
			break;
 80002a8:	e008      	b.n	80002bc <EXT_OTA_Receive_Chunk+0x170>
			break;
 80002aa:	bf00      	nop
 80002ac:	e006      	b.n	80002bc <EXT_OTA_Receive_Chunk+0x170>
			break;
 80002ae:	bf00      	nop
 80002b0:	e004      	b.n	80002bc <EXT_OTA_Receive_Chunk+0x170>
			break;
 80002b2:	bf00      	nop
 80002b4:	e002      	b.n	80002bc <EXT_OTA_Receive_Chunk+0x170>
		  break;
 80002b6:	bf00      	nop
 80002b8:	e000      	b.n	80002bc <EXT_OTA_Receive_Chunk+0x170>
			break;
 80002ba:	bf00      	nop
		}
	}
	while(0);

	// Check for error
	if(ret != HAL_OK)
 80002bc:	7ffb      	ldrb	r3, [r7, #31]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d004      	beq.n	80002cc <EXT_OTA_Receive_Chunk+0x180>
	{
		printf("Received error!\r\n");
 80002c2:	480d      	ldr	r0, [pc, #52]	; (80002f8 <EXT_OTA_Receive_Chunk+0x1ac>)
 80002c4:	f002 fe38 	bl	8002f38 <puts>
		idx = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	83bb      	strh	r3, [r7, #28]
	}

	if(max_len < idx)
 80002cc:	887a      	ldrh	r2, [r7, #2]
 80002ce:	8bbb      	ldrh	r3, [r7, #28]
 80002d0:	429a      	cmp	r2, r3
 80002d2:	d207      	bcs.n	80002e4 <EXT_OTA_Receive_Chunk+0x198>
	{
		printf("Received more data than expected. Expected = %d, Received = %d\r\n", max_len, idx);
 80002d4:	887b      	ldrh	r3, [r7, #2]
 80002d6:	8bba      	ldrh	r2, [r7, #28]
 80002d8:	4619      	mov	r1, r3
 80002da:	4808      	ldr	r0, [pc, #32]	; (80002fc <EXT_OTA_Receive_Chunk+0x1b0>)
 80002dc:	f002 fda6 	bl	8002e2c <iprintf>
		idx = 0;
 80002e0:	2300      	movs	r3, #0
 80002e2:	83bb      	strh	r3, [r7, #28]
	}
	return idx;
 80002e4:	8bbb      	ldrh	r3, [r7, #28]
}
 80002e6:	4618      	mov	r0, r3
 80002e8:	3720      	adds	r7, #32
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	200004b0 	.word	0x200004b0
 80002f4:	08003e58 	.word	0x08003e58
 80002f8:	08003e90 	.word	0x08003e90
 80002fc:	08003ea4 	.word	0x08003ea4

08000300 <EXT_OTA_Process_Data>:
 * param buffer: the received buffer
 * param len: the data len to be received
 * retval ETX_OTA_EX
 */
static EXT_OTA_EX EXT_OTA_Process_Data(uint8_t* buffer, uint16_t len)
{
 8000300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000302:	b099      	sub	sp, #100	; 0x64
 8000304:	af00      	add	r7, sp, #0
 8000306:	6078      	str	r0, [r7, #4]
 8000308:	460b      	mov	r3, r1
 800030a:	807b      	strh	r3, [r7, #2]
	EXT_OTA_EX ret = EXT_OTA_EX_ERR;
 800030c:	2301      	movs	r3, #1
 800030e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	do
	{
		// Check the receive buffer
		if(buffer == NULL || len == 0)
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	2b00      	cmp	r3, #0
 8000316:	f000 81a5 	beq.w	8000664 <EXT_OTA_Process_Data+0x364>
 800031a:	887b      	ldrh	r3, [r7, #2]
 800031c:	2b00      	cmp	r3, #0
 800031e:	f000 81a1 	beq.w	8000664 <EXT_OTA_Process_Data+0x364>
			break;
		// Check if we receive OTA Abort command
		EXT_OTA_COMMAND* cmd = (EXT_OTA_COMMAND*)&buffer;
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	65bb      	str	r3, [r7, #88]	; 0x58
		if(cmd->packet_type == EXT_OTA_PACKET_TYPE_CMD)
 8000326:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000328:	785b      	ldrb	r3, [r3, #1]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d104      	bne.n	8000338 <EXT_OTA_Process_Data+0x38>
		{
			if(cmd->cmd == EXT_OTA_CMD_ABORT)
 800032e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	2b02      	cmp	r3, #2
 8000334:	f000 8198 	beq.w	8000668 <EXT_OTA_Process_Data+0x368>
			{
				break;
			}
		}

		switch(ota_state)
 8000338:	4bbb      	ldr	r3, [pc, #748]	; (8000628 <EXT_OTA_Process_Data+0x328>)
 800033a:	781b      	ldrb	r3, [r3, #0]
 800033c:	2b04      	cmp	r3, #4
 800033e:	f200 816e 	bhi.w	800061e <EXT_OTA_Process_Data+0x31e>
 8000342:	a201      	add	r2, pc, #4	; (adr r2, 8000348 <EXT_OTA_Process_Data+0x48>)
 8000344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000348:	0800035d 	.word	0x0800035d
 800034c:	0800036b 	.word	0x0800036b
 8000350:	08000397 	.word	0x08000397
 8000354:	080003e5 	.word	0x080003e5
 8000358:	080004c7 	.word	0x080004c7
		{
		case EXT_OTA_STATE_IDLE:
		{
			printf("EXT_OTA_STATE_IDLE...\r\n");
 800035c:	48b3      	ldr	r0, [pc, #716]	; (800062c <EXT_OTA_Process_Data+0x32c>)
 800035e:	f002 fdeb 	bl	8002f38 <puts>
			ret = EXT_OTA_EX_OK;
 8000362:	2300      	movs	r3, #0
 8000364:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
			break;
 8000368:	e189      	b.n	800067e <EXT_OTA_Process_Data+0x37e>

		case EXT_OTA_STATE_START:
		{
			EXT_OTA_COMMAND* cmd = (EXT_OTA_COMMAND*)buffer;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	63fb      	str	r3, [r7, #60]	; 0x3c
			if(cmd->packet_type == EXT_OTA_PACKET_TYPE_CMD)
 800036e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000370:	785b      	ldrb	r3, [r3, #1]
 8000372:	2b00      	cmp	r3, #0
 8000374:	f040 817a 	bne.w	800066c <EXT_OTA_Process_Data+0x36c>
			{
				if(cmd->cmd == EXT_OTA_CMD_START)
 8000378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	2b00      	cmp	r3, #0
 800037e:	f040 8175 	bne.w	800066c <EXT_OTA_Process_Data+0x36c>
				{
					printf("Received OTA START command\r\n");
 8000382:	48ab      	ldr	r0, [pc, #684]	; (8000630 <EXT_OTA_Process_Data+0x330>)
 8000384:	f002 fdd8 	bl	8002f38 <puts>
					ota_state = EXT_OTA_STATE_HEADER;
 8000388:	4ba7      	ldr	r3, [pc, #668]	; (8000628 <EXT_OTA_Process_Data+0x328>)
 800038a:	2202      	movs	r2, #2
 800038c:	701a      	strb	r2, [r3, #0]
					ret = EXT_OTA_EX_OK;
 800038e:	2300      	movs	r3, #0
 8000390:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
			break;
 8000394:	e16a      	b.n	800066c <EXT_OTA_Process_Data+0x36c>

		case EXT_OTA_STATE_HEADER:
		{
			EXT_OTA_HEADER* header = (EXT_OTA_HEADER*)buffer;
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	643b      	str	r3, [r7, #64]	; 0x40
			if(header->packet_type == EXT_OTA_PACKET_TYPE_HEADER)
 800039a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800039c:	785b      	ldrb	r3, [r3, #1]
 800039e:	2b02      	cmp	r3, #2
 80003a0:	f040 8166 	bne.w	8000670 <EXT_OTA_Process_Data+0x370>
			{
				ota_fw_total_size = header->meta_data.packet_size;
 80003a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003a6:	685b      	ldr	r3, [r3, #4]
 80003a8:	4aa2      	ldr	r2, [pc, #648]	; (8000634 <EXT_OTA_Process_Data+0x334>)
 80003aa:	6013      	str	r3, [r2, #0]
				ota_fw_crc = header->meta_data.packet_crc;
 80003ac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80003ae:	689b      	ldr	r3, [r3, #8]
 80003b0:	4aa1      	ldr	r2, [pc, #644]	; (8000638 <EXT_OTA_Process_Data+0x338>)
 80003b2:	6013      	str	r3, [r2, #0]
				printf("Received OTA Header. FW Size = %lu\r\n", ota_fw_total_size);
 80003b4:	4b9f      	ldr	r3, [pc, #636]	; (8000634 <EXT_OTA_Process_Data+0x334>)
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	4619      	mov	r1, r3
 80003ba:	48a0      	ldr	r0, [pc, #640]	; (800063c <EXT_OTA_Process_Data+0x33c>)
 80003bc:	f002 fd36 	bl	8002e2c <iprintf>
				// Get the slot number to write
				slot_num_to_write_fw = EXT_OTA_Get_Available_Slot_Number();
 80003c0:	f000 fa44 	bl	800084c <EXT_OTA_Get_Available_Slot_Number>
 80003c4:	4603      	mov	r3, r0
 80003c6:	461a      	mov	r2, r3
 80003c8:	4b9d      	ldr	r3, [pc, #628]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 80003ca:	701a      	strb	r2, [r3, #0]
				if(slot_num_to_write_fw != 0xFF)
 80003cc:	4b9c      	ldr	r3, [pc, #624]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 80003ce:	781b      	ldrb	r3, [r3, #0]
 80003d0:	2bff      	cmp	r3, #255	; 0xff
 80003d2:	f000 814d 	beq.w	8000670 <EXT_OTA_Process_Data+0x370>
				{
					ota_state = EXT_OTA_STATE_DATA;
 80003d6:	4b94      	ldr	r3, [pc, #592]	; (8000628 <EXT_OTA_Process_Data+0x328>)
 80003d8:	2203      	movs	r2, #3
 80003da:	701a      	strb	r2, [r3, #0]
					ret = EXT_OTA_EX_OK;
 80003dc:	2300      	movs	r3, #0
 80003de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
			break;
 80003e2:	e145      	b.n	8000670 <EXT_OTA_Process_Data+0x370>

		case EXT_OTA_STATE_DATA:
		{
			EXT_OTA_DATA* data = (EXT_OTA_DATA*)buffer;
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	64bb      	str	r3, [r7, #72]	; 0x48
			uint16_t data_len = data->data_len;
 80003e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003ea:	789a      	ldrb	r2, [r3, #2]
 80003ec:	78db      	ldrb	r3, [r3, #3]
 80003ee:	021b      	lsls	r3, r3, #8
 80003f0:	4313      	orrs	r3, r2
 80003f2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
			HAL_StatusTypeDef ex;

			if(data->packet_type == EXT_OTA_PACKET_TYPE_DATA)
 80003f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80003f8:	785b      	ldrb	r3, [r3, #1]
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	f040 813a 	bne.w	8000674 <EXT_OTA_Process_Data+0x374>
			{
				uint8_t is_first_block = 0;
 8000400:	2300      	movs	r3, #0
 8000402:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
				// Check for the first data block
				if(ota_fw_received_size == 0)
 8000406:	4b8f      	ldr	r3, [pc, #572]	; (8000644 <EXT_OTA_Process_Data+0x344>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b00      	cmp	r3, #0
 800040c:	d132      	bne.n	8000474 <EXT_OTA_Process_Data+0x174>
				{
					is_first_block = 1;
 800040e:	2301      	movs	r3, #1
 8000410:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e

					// Read the configuration
					EXT_GNRL_CONFIG cfg;
					memcpy(&cfg, cfg_flash, sizeof(EXT_GNRL_CONFIG));
 8000414:	4b8c      	ldr	r3, [pc, #560]	; (8000648 <EXT_OTA_Process_Data+0x348>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	461c      	mov	r4, r3
 800041a:	f107 0608 	add.w	r6, r7, #8
 800041e:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000422:	4635      	mov	r5, r6
 8000424:	4623      	mov	r3, r4
 8000426:	6818      	ldr	r0, [r3, #0]
 8000428:	6859      	ldr	r1, [r3, #4]
 800042a:	689a      	ldr	r2, [r3, #8]
 800042c:	68db      	ldr	r3, [r3, #12]
 800042e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000430:	3410      	adds	r4, #16
 8000432:	3610      	adds	r6, #16
 8000434:	4564      	cmp	r4, ip
 8000436:	d1f4      	bne.n	8000422 <EXT_OTA_Process_Data+0x122>
 8000438:	4632      	mov	r2, r6
 800043a:	4623      	mov	r3, r4
 800043c:	881b      	ldrh	r3, [r3, #0]
 800043e:	8013      	strh	r3, [r2, #0]

					// Reset the available slot
					cfg.slot_table[slot_num_to_write_fw].is_this_slot_valid = 1;
 8000440:	4b7f      	ldr	r3, [pc, #508]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	461a      	mov	r2, r3
 8000446:	4613      	mov	r3, r2
 8000448:	005b      	lsls	r3, r3, #1
 800044a:	4413      	add	r3, r2
 800044c:	00db      	lsls	r3, r3, #3
 800044e:	1a9b      	subs	r3, r3, r2
 8000450:	3360      	adds	r3, #96	; 0x60
 8000452:	443b      	add	r3, r7
 8000454:	3b54      	subs	r3, #84	; 0x54
 8000456:	2201      	movs	r2, #1
 8000458:	701a      	strb	r2, [r3, #0]

					// Write the updated configuration to the flash memory
					ret = EXT_OTA_Write_Config(&cfg);
 800045a:	f107 0308 	add.w	r3, r7, #8
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fad0 	bl	8000a04 <EXT_OTA_Write_Config>
 8000464:	4603      	mov	r3, r0
 8000466:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if(ret != EXT_OTA_EX_OK)
 800046a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800046e:	2b00      	cmp	r3, #0
 8000470:	f040 8102 	bne.w	8000678 <EXT_OTA_Process_Data+0x378>
					{
						break;
					}
				}
				// Write received data to the block space
				ex = EXT_OTA_Slot_Data_Write(buffer + 4, slot_num_to_write_fw, data_len, is_first_block);
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	1d18      	adds	r0, r3, #4
 8000478:	4b71      	ldr	r3, [pc, #452]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 800047a:	7819      	ldrb	r1, [r3, #0]
 800047c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8000480:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8000484:	f000 f92e 	bl	80006e4 <EXT_OTA_Slot_Data_Write>
 8000488:	4603      	mov	r3, r0
 800048a:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
				if(ex == HAL_OK)
 800048e:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000492:	2b00      	cmp	r3, #0
 8000494:	f040 80ee 	bne.w	8000674 <EXT_OTA_Process_Data+0x374>
				{
					printf("[%ld/%ld]\r\n", ota_fw_received_size/EXT_OTA_DATA_MAX_SIZE, ota_fw_total_size/EXT_OTA_DATA_MAX_SIZE);
 8000498:	4b6a      	ldr	r3, [pc, #424]	; (8000644 <EXT_OTA_Process_Data+0x344>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	0a99      	lsrs	r1, r3, #10
 800049e:	4b65      	ldr	r3, [pc, #404]	; (8000634 <EXT_OTA_Process_Data+0x334>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	0a9b      	lsrs	r3, r3, #10
 80004a4:	461a      	mov	r2, r3
 80004a6:	4869      	ldr	r0, [pc, #420]	; (800064c <EXT_OTA_Process_Data+0x34c>)
 80004a8:	f002 fcc0 	bl	8002e2c <iprintf>
					if(ota_fw_received_size >= ota_fw_total_size)
 80004ac:	4b65      	ldr	r3, [pc, #404]	; (8000644 <EXT_OTA_Process_Data+0x344>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b60      	ldr	r3, [pc, #384]	; (8000634 <EXT_OTA_Process_Data+0x334>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	429a      	cmp	r2, r3
 80004b6:	d302      	bcc.n	80004be <EXT_OTA_Process_Data+0x1be>
					{
						ota_state = EXT_OTA_STATE_END;
 80004b8:	4b5b      	ldr	r3, [pc, #364]	; (8000628 <EXT_OTA_Process_Data+0x328>)
 80004ba:	2204      	movs	r2, #4
 80004bc:	701a      	strb	r2, [r3, #0]
					}
					ret = EXT_OTA_EX_OK;
 80004be:	2300      	movs	r3, #0
 80004c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
			break;
 80004c4:	e0d6      	b.n	8000674 <EXT_OTA_Process_Data+0x374>

		case EXT_OTA_STATE_END:
		{
			EXT_OTA_COMMAND* cmd = (EXT_OTA_COMMAND*)buffer;
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	657b      	str	r3, [r7, #84]	; 0x54
			if(cmd->packet_type == EXT_OTA_PACKET_TYPE_CMD)
 80004ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004cc:	785b      	ldrb	r3, [r3, #1]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f040 80d4 	bne.w	800067c <EXT_OTA_Process_Data+0x37c>
			{
				if(cmd->cmd == EXT_OTA_CMD_END)
 80004d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	2b01      	cmp	r3, #1
 80004da:	f040 80cf 	bne.w	800067c <EXT_OTA_Process_Data+0x37c>
				{
					printf("Received OTA END command\r\n");
 80004de:	485c      	ldr	r0, [pc, #368]	; (8000650 <EXT_OTA_Process_Data+0x350>)
 80004e0:	f002 fd2a 	bl	8002f38 <puts>

					// Check if the received binary has been modified
					uint32_t slot_address = (slot_num_to_write_fw == 0) ? EXT_APP_SLOT0_FLASH_ADD : EXT_APP_SLOT1_FLASH_ADD;
 80004e4:	4b56      	ldr	r3, [pc, #344]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d101      	bne.n	80004f0 <EXT_OTA_Process_Data+0x1f0>
 80004ec:	4b59      	ldr	r3, [pc, #356]	; (8000654 <EXT_OTA_Process_Data+0x354>)
 80004ee:	e000      	b.n	80004f2 <EXT_OTA_Process_Data+0x1f2>
 80004f0:	4b59      	ldr	r3, [pc, #356]	; (8000658 <EXT_OTA_Process_Data+0x358>)
 80004f2:	653b      	str	r3, [r7, #80]	; 0x50
					// Verify the CRC of the firmware's image
					uint32_t cal_crc = CalcCRC((uint8_t*)slot_address, ota_fw_total_size);
 80004f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80004f6:	4a4f      	ldr	r2, [pc, #316]	; (8000634 <EXT_OTA_Process_Data+0x334>)
 80004f8:	6812      	ldr	r2, [r2, #0]
 80004fa:	4611      	mov	r1, r2
 80004fc:	4618      	mov	r0, r3
 80004fe:	f000 fc7d 	bl	8000dfc <CalcCRC>
 8000502:	64f8      	str	r0, [r7, #76]	; 0x4c
					if(cal_crc != ota_fw_crc)
 8000504:	4b4c      	ldr	r3, [pc, #304]	; (8000638 <EXT_OTA_Process_Data+0x338>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800050a:	429a      	cmp	r2, r3
 800050c:	d003      	beq.n	8000516 <EXT_OTA_Process_Data+0x216>
					{
						printf("Error: CRC mismatch of fw image!\r\n");
 800050e:	4853      	ldr	r0, [pc, #332]	; (800065c <EXT_OTA_Process_Data+0x35c>)
 8000510:	f002 fd12 	bl	8002f38 <puts>
 8000514:	e0b3      	b.n	800067e <EXT_OTA_Process_Data+0x37e>
						break;
					}

					// Read the configuration
					EXT_GNRL_CONFIG cfg;
					memcpy(&cfg, cfg_flash, sizeof(EXT_GNRL_CONFIG));
 8000516:	4b4c      	ldr	r3, [pc, #304]	; (8000648 <EXT_OTA_Process_Data+0x348>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	461c      	mov	r4, r3
 800051c:	f107 0608 	add.w	r6, r7, #8
 8000520:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000524:	4635      	mov	r5, r6
 8000526:	4623      	mov	r3, r4
 8000528:	6818      	ldr	r0, [r3, #0]
 800052a:	6859      	ldr	r1, [r3, #4]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000532:	3410      	adds	r4, #16
 8000534:	3610      	adds	r6, #16
 8000536:	4564      	cmp	r4, ip
 8000538:	d1f4      	bne.n	8000524 <EXT_OTA_Process_Data+0x224>
 800053a:	4632      	mov	r2, r6
 800053c:	4623      	mov	r3, r4
 800053e:	881b      	ldrh	r3, [r3, #0]
 8000540:	8013      	strh	r3, [r2, #0]

					// Update the slot information
					cfg.slot_table[slot_num_to_write_fw].fw_crc 					= cal_crc;
 8000542:	4b3f      	ldr	r3, [pc, #252]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	461a      	mov	r2, r3
 8000548:	4613      	mov	r3, r2
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	4413      	add	r3, r2
 800054e:	00db      	lsls	r3, r3, #3
 8000550:	1a9b      	subs	r3, r3, r2
 8000552:	3360      	adds	r3, #96	; 0x60
 8000554:	443b      	add	r3, r7
 8000556:	3b58      	subs	r3, #88	; 0x58
 8000558:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800055a:	f8c3 200b 	str.w	r2, [r3, #11]
					cfg.slot_table[slot_num_to_write_fw].fw_size 					= ota_fw_total_size;
 800055e:	4b38      	ldr	r3, [pc, #224]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	461a      	mov	r2, r3
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <EXT_OTA_Process_Data+0x334>)
 8000566:	6819      	ldr	r1, [r3, #0]
 8000568:	4613      	mov	r3, r2
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	4413      	add	r3, r2
 800056e:	00db      	lsls	r3, r3, #3
 8000570:	1a9b      	subs	r3, r3, r2
 8000572:	3360      	adds	r3, #96	; 0x60
 8000574:	443b      	add	r3, r7
 8000576:	3b58      	subs	r3, #88	; 0x58
 8000578:	f8c3 1007 	str.w	r1, [r3, #7]
					cfg.slot_table[slot_num_to_write_fw].is_this_slot_valid 		= 0;
 800057c:	4b30      	ldr	r3, [pc, #192]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4613      	mov	r3, r2
 8000584:	005b      	lsls	r3, r3, #1
 8000586:	4413      	add	r3, r2
 8000588:	00db      	lsls	r3, r3, #3
 800058a:	1a9b      	subs	r3, r3, r2
 800058c:	3360      	adds	r3, #96	; 0x60
 800058e:	443b      	add	r3, r7
 8000590:	3b54      	subs	r3, #84	; 0x54
 8000592:	2200      	movs	r2, #0
 8000594:	701a      	strb	r2, [r3, #0]
					cfg.slot_table[slot_num_to_write_fw].should_we_run_this_slot_fw = 1;
 8000596:	4b2a      	ldr	r3, [pc, #168]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	461a      	mov	r2, r3
 800059c:	4613      	mov	r3, r2
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	4413      	add	r3, r2
 80005a2:	00db      	lsls	r3, r3, #3
 80005a4:	1a9b      	subs	r3, r3, r2
 80005a6:	3360      	adds	r3, #96	; 0x60
 80005a8:	443b      	add	r3, r7
 80005aa:	3b52      	subs	r3, #82	; 0x52
 80005ac:	2201      	movs	r2, #1
 80005ae:	701a      	strb	r2, [r3, #0]

					// Reset the condition of other slots
					for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 80005b0:	2300      	movs	r3, #0
 80005b2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80005b6:	e016      	b.n	80005e6 <EXT_OTA_Process_Data+0x2e6>
					{
						if(slot_num_to_write_fw != i)
 80005b8:	4b21      	ldr	r3, [pc, #132]	; (8000640 <EXT_OTA_Process_Data+0x340>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d00b      	beq.n	80005dc <EXT_OTA_Process_Data+0x2dc>
						{
							cfg.slot_table[i].should_we_run_this_slot_fw = 0;
 80005c4:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 80005c8:	4613      	mov	r3, r2
 80005ca:	005b      	lsls	r3, r3, #1
 80005cc:	4413      	add	r3, r2
 80005ce:	00db      	lsls	r3, r3, #3
 80005d0:	1a9b      	subs	r3, r3, r2
 80005d2:	3360      	adds	r3, #96	; 0x60
 80005d4:	443b      	add	r3, r7
 80005d6:	3b52      	subs	r3, #82	; 0x52
 80005d8:	2200      	movs	r2, #0
 80005da:	701a      	strb	r2, [r3, #0]
					for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 80005dc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005e0:	3301      	adds	r3, #1
 80005e2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80005e6:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80005ea:	2b01      	cmp	r3, #1
 80005ec:	d9e4      	bls.n	80005b8 <EXT_OTA_Process_Data+0x2b8>
						}
					}
					// Update the reboot reason
					cfg.reboot_cause = EXT_NORMAL_BOOT;
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <EXT_OTA_Process_Data+0x360>)
 80005f0:	60bb      	str	r3, [r7, #8]
					// Update the configuration into the Flash memory
					ret = EXT_OTA_Write_Config(&cfg);
 80005f2:	f107 0308 	add.w	r3, r7, #8
 80005f6:	4618      	mov	r0, r3
 80005f8:	f000 fa04 	bl	8000a04 <EXT_OTA_Write_Config>
 80005fc:	4603      	mov	r3, r0
 80005fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if(ret == EXT_OTA_EX_OK)
 8000602:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000606:	2b00      	cmp	r3, #0
 8000608:	d105      	bne.n	8000616 <EXT_OTA_Process_Data+0x316>
					{
						ota_state = EXT_OTA_STATE_IDLE;
 800060a:	4b07      	ldr	r3, [pc, #28]	; (8000628 <EXT_OTA_Process_Data+0x328>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
						ret = EXT_OTA_EX_OK;
 8000610:	2300      	movs	r3, #0
 8000612:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
					ret = EXT_OTA_EX_OK;
 8000616:	2300      	movs	r3, #0
 8000618:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
			break;
 800061c:	e02e      	b.n	800067c <EXT_OTA_Process_Data+0x37c>

		default:
		{
			ret = EXT_OTA_EX_ERR;
 800061e:	2301      	movs	r3, #1
 8000620:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}
			break;
 8000624:	e02b      	b.n	800067e <EXT_OTA_Process_Data+0x37e>
 8000626:	bf00      	nop
 8000628:	2000049d 	.word	0x2000049d
 800062c:	08003ee8 	.word	0x08003ee8
 8000630:	08003f00 	.word	0x08003f00
 8000634:	200004a0 	.word	0x200004a0
 8000638:	200004a4 	.word	0x200004a4
 800063c:	08003f1c 	.word	0x08003f1c
 8000640:	200004ac 	.word	0x200004ac
 8000644:	200004a8 	.word	0x200004a8
 8000648:	20000000 	.word	0x20000000
 800064c:	08003f44 	.word	0x08003f44
 8000650:	08003f50 	.word	0x08003f50
 8000654:	08009800 	.word	0x08009800
 8000658:	0800cc00 	.word	0x0800cc00
 800065c:	08003f6c 	.word	0x08003f6c
 8000660:	beeffeed 	.word	0xbeeffeed
		}
	}
 8000664:	bf00      	nop
 8000666:	e00a      	b.n	800067e <EXT_OTA_Process_Data+0x37e>
				break;
 8000668:	bf00      	nop
 800066a:	e008      	b.n	800067e <EXT_OTA_Process_Data+0x37e>
			break;
 800066c:	bf00      	nop
 800066e:	e006      	b.n	800067e <EXT_OTA_Process_Data+0x37e>
			break;
 8000670:	bf00      	nop
 8000672:	e004      	b.n	800067e <EXT_OTA_Process_Data+0x37e>
			break;
 8000674:	bf00      	nop
 8000676:	e002      	b.n	800067e <EXT_OTA_Process_Data+0x37e>
						break;
 8000678:	bf00      	nop
 800067a:	e000      	b.n	800067e <EXT_OTA_Process_Data+0x37e>
			break;
 800067c:	bf00      	nop
	while(0);

	return ret;
 800067e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8000682:	4618      	mov	r0, r3
 8000684:	3764      	adds	r7, #100	; 0x64
 8000686:	46bd      	mov	sp, r7
 8000688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800068a:	bf00      	nop

0800068c <EXT_OTA_Send_Resp>:
 * @brief Send the response from the MCU
 * @param resp_type: ACK or NACK
 * @retval none
 */
static void EXT_OTA_Send_Resp(uint8_t resp_type)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	4603      	mov	r3, r0
 8000694:	71fb      	strb	r3, [r7, #7]
	EXT_OTA_RESP rsp =
 8000696:	f107 030c 	add.w	r3, r7, #12
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
 80006a0:	811a      	strh	r2, [r3, #8]
 80006a2:	23aa      	movs	r3, #170	; 0xaa
 80006a4:	733b      	strb	r3, [r7, #12]
 80006a6:	2303      	movs	r3, #3
 80006a8:	737b      	strb	r3, [r7, #13]
 80006aa:	2301      	movs	r3, #1
 80006ac:	81fb      	strh	r3, [r7, #14]
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	743b      	strb	r3, [r7, #16]
 80006b2:	23bb      	movs	r3, #187	; 0xbb
 80006b4:	757b      	strb	r3, [r7, #21]
		.packet_type 	= EXT_OTA_PACKET_TYPE_RESPONSE,
		.data_len 		= 1,
		.status 		= resp_type,
		.eof			= EXT_OTA_EOF
	};
	rsp.crc = CalcCRC((uint8_t*)&rsp.status, 1);
 80006b6:	f107 030c 	add.w	r3, r7, #12
 80006ba:	3304      	adds	r3, #4
 80006bc:	2101      	movs	r1, #1
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 fb9c 	bl	8000dfc <CalcCRC>
 80006c4:	4603      	mov	r3, r0
 80006c6:	f8c7 3011 	str.w	r3, [r7, #17]
	HAL_UART_Transmit(&huart1, (uint8_t*)&rsp, sizeof(EXT_OTA_RESP), 100);
 80006ca:	f107 010c 	add.w	r1, r7, #12
 80006ce:	2364      	movs	r3, #100	; 0x64
 80006d0:	220a      	movs	r2, #10
 80006d2:	4803      	ldr	r0, [pc, #12]	; (80006e0 <EXT_OTA_Send_Resp+0x54>)
 80006d4:	f002 f966 	bl	80029a4 <HAL_UART_Transmit>
}
 80006d8:	bf00      	nop
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200004b0 	.word	0x200004b0

080006e4 <EXT_OTA_Slot_Data_Write>:
 * @param data: data to be written
 * @param data_len: length of the data to be written
 * @param is_first_block: true - if this is the first block
 */
static HAL_StatusTypeDef EXT_OTA_Slot_Data_Write(uint8_t* data, uint8_t slot_num, uint16_t data_len, uint8_t is_first_block)
{
 80006e4:	b5b0      	push	{r4, r5, r7, lr}
 80006e6:	b08a      	sub	sp, #40	; 0x28
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
 80006ec:	4608      	mov	r0, r1
 80006ee:	4611      	mov	r1, r2
 80006f0:	461a      	mov	r2, r3
 80006f2:	4603      	mov	r3, r0
 80006f4:	70fb      	strb	r3, [r7, #3]
 80006f6:	460b      	mov	r3, r1
 80006f8:	803b      	strh	r3, [r7, #0]
 80006fa:	4613      	mov	r3, r2
 80006fc:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef ret = HAL_OK;
 80006fe:	2300      	movs	r3, #0
 8000700:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	// Data write sequence
	do
	{
		// Validate the input condition
		if(slot_num >= EXT_SLOT_NO)
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	2b01      	cmp	r3, #1
 8000708:	d903      	bls.n	8000712 <EXT_OTA_Slot_Data_Write+0x2e>
		{
			ret = HAL_ERROR;
 800070a:	2301      	movs	r3, #1
 800070c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			break;
 8000710:	e085      	b.n	800081e <EXT_OTA_Slot_Data_Write+0x13a>
		}
		// Unlock flash memory
		ret = HAL_FLASH_Unlock();
 8000712:	f001 f907 	bl	8001924 <HAL_FLASH_Unlock>
 8000716:	4603      	mov	r3, r0
 8000718:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(ret != HAL_OK)
 800071c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <EXT_OTA_Slot_Data_Write+0x48>
		{
			printf("Unable to unlock Flash memory, update stopped!");
 8000724:	4841      	ldr	r0, [pc, #260]	; (800082c <EXT_OTA_Slot_Data_Write+0x148>)
 8000726:	f002 fb81 	bl	8002e2c <iprintf>
			break;
 800072a:	e078      	b.n	800081e <EXT_OTA_Slot_Data_Write+0x13a>
		}
		// Erase the flash in the first time
		if(is_first_block)
 800072c:	78bb      	ldrb	r3, [r7, #2]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d020      	beq.n	8000774 <EXT_OTA_Slot_Data_Write+0x90>
		{
			printf("Erasing flash memory");
 8000732:	483f      	ldr	r0, [pc, #252]	; (8000830 <EXT_OTA_Slot_Data_Write+0x14c>)
 8000734:	f002 fb7a 	bl	8002e2c <iprintf>

			FLASH_EraseInitTypeDef EraseInitStruct;
			uint32_t sector_error;

			EraseInitStruct.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
			// Select the slot to erase
			EraseInitStruct.PageAddress = (slot_num == 0) ? EXT_APP_SLOT0_FLASH_ADD : EXT_APP_SLOT1_FLASH_ADD;
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	2b00      	cmp	r3, #0
 8000740:	d101      	bne.n	8000746 <EXT_OTA_Slot_Data_Write+0x62>
 8000742:	4b3c      	ldr	r3, [pc, #240]	; (8000834 <EXT_OTA_Slot_Data_Write+0x150>)
 8000744:	e000      	b.n	8000748 <EXT_OTA_Slot_Data_Write+0x64>
 8000746:	4b3c      	ldr	r3, [pc, #240]	; (8000838 <EXT_OTA_Slot_Data_Write+0x154>)
 8000748:	617b      	str	r3, [r7, #20]
			EraseInitStruct.NbPages 	= DATA_FLASH_SIZE;	// 13 KB
 800074a:	230d      	movs	r3, #13
 800074c:	61bb      	str	r3, [r7, #24]
			ret = HAL_FLASHEx_Erase(&EraseInitStruct, &sector_error);
 800074e:	f107 0208 	add.w	r2, r7, #8
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	4611      	mov	r1, r2
 8000758:	4618      	mov	r0, r3
 800075a:	f001 f9cb 	bl	8001af4 <HAL_FLASHEx_Erase>
 800075e:	4603      	mov	r3, r0
 8000760:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(ret != HAL_OK)
 8000764:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000768:	2b00      	cmp	r3, #0
 800076a:	d003      	beq.n	8000774 <EXT_OTA_Slot_Data_Write+0x90>
			{
				printf("Unable to erase Flash memory, updating stopped");
 800076c:	4833      	ldr	r0, [pc, #204]	; (800083c <EXT_OTA_Slot_Data_Write+0x158>)
 800076e:	f002 fb5d 	bl	8002e2c <iprintf>
 8000772:	e054      	b.n	800081e <EXT_OTA_Slot_Data_Write+0x13a>
				break;
			}
		}

		uint32_t slot_address = (slot_num == 0) ? EXT_APP_SLOT0_FLASH_ADD : EXT_APP_SLOT1_FLASH_ADD;
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d101      	bne.n	800077e <EXT_OTA_Slot_Data_Write+0x9a>
 800077a:	4b2e      	ldr	r3, [pc, #184]	; (8000834 <EXT_OTA_Slot_Data_Write+0x150>)
 800077c:	e000      	b.n	8000780 <EXT_OTA_Slot_Data_Write+0x9c>
 800077e:	4b2e      	ldr	r3, [pc, #184]	; (8000838 <EXT_OTA_Slot_Data_Write+0x154>)
 8000780:	623b      	str	r3, [r7, #32]

		// Write data to the flash memory
		for(uint16_t i = 0; i < data_len / 2; ++i)
 8000782:	2300      	movs	r3, #0
 8000784:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000786:	e032      	b.n	80007ee <EXT_OTA_Slot_Data_Write+0x10a>
		{
			uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 8000788:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800078a:	005b      	lsls	r3, r3, #1
 800078c:	461a      	mov	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	b21a      	sxth	r2, r3
 8000796:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000798:	005b      	lsls	r3, r3, #1
 800079a:	3301      	adds	r3, #1
 800079c:	6879      	ldr	r1, [r7, #4]
 800079e:	440b      	add	r3, r1
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	021b      	lsls	r3, r3, #8
 80007a4:	b21b      	sxth	r3, r3
 80007a6:	4313      	orrs	r3, r2
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	83fb      	strh	r3, [r7, #30]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, (slot_address + ota_fw_received_size), halfword_data);
 80007ac:	4b24      	ldr	r3, [pc, #144]	; (8000840 <EXT_OTA_Slot_Data_Write+0x15c>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	6a3b      	ldr	r3, [r7, #32]
 80007b2:	18d1      	adds	r1, r2, r3
 80007b4:	8bfb      	ldrh	r3, [r7, #30]
 80007b6:	2200      	movs	r2, #0
 80007b8:	461c      	mov	r4, r3
 80007ba:	4615      	mov	r5, r2
 80007bc:	4622      	mov	r2, r4
 80007be:	462b      	mov	r3, r5
 80007c0:	2001      	movs	r0, #1
 80007c2:	f001 f83f 	bl	8001844 <HAL_FLASH_Program>
 80007c6:	4603      	mov	r3, r0
 80007c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(ret == HAL_OK)
 80007cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d105      	bne.n	80007e0 <EXT_OTA_Slot_Data_Write+0xfc>
			{
				ota_fw_received_size += 2;
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <EXT_OTA_Slot_Data_Write+0x15c>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3302      	adds	r3, #2
 80007da:	4a19      	ldr	r2, [pc, #100]	; (8000840 <EXT_OTA_Slot_Data_Write+0x15c>)
 80007dc:	6013      	str	r3, [r2, #0]
 80007de:	e003      	b.n	80007e8 <EXT_OTA_Slot_Data_Write+0x104>
			}
			else
			{
				printf("Error: Unable to write to Flash, update stopped!");
 80007e0:	4818      	ldr	r0, [pc, #96]	; (8000844 <EXT_OTA_Slot_Data_Write+0x160>)
 80007e2:	f002 fb23 	bl	8002e2c <iprintf>
				break;
 80007e6:	e008      	b.n	80007fa <EXT_OTA_Slot_Data_Write+0x116>
		for(uint16_t i = 0; i < data_len / 2; ++i)
 80007e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80007ea:	3301      	adds	r3, #1
 80007ec:	84bb      	strh	r3, [r7, #36]	; 0x24
 80007ee:	883b      	ldrh	r3, [r7, #0]
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80007f6:	429a      	cmp	r2, r3
 80007f8:	d3c6      	bcc.n	8000788 <EXT_OTA_Slot_Data_Write+0xa4>
			}
		}
		if(ret != HAL_OK)
 80007fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d10c      	bne.n	800081c <EXT_OTA_Slot_Data_Write+0x138>
		{
			break;
		}

		// Lock the Flash memory
		ret = HAL_FLASH_Lock();
 8000802:	f001 f8b5 	bl	8001970 <HAL_FLASH_Lock>
 8000806:	4603      	mov	r3, r0
 8000808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(ret != HAL_OK)
 800080c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000810:	2b00      	cmp	r3, #0
 8000812:	d004      	beq.n	800081e <EXT_OTA_Slot_Data_Write+0x13a>
		{
			printf("Error: Unable to lock Flash, update stopped!");
 8000814:	480c      	ldr	r0, [pc, #48]	; (8000848 <EXT_OTA_Slot_Data_Write+0x164>)
 8000816:	f002 fb09 	bl	8002e2c <iprintf>
			break;
 800081a:	e000      	b.n	800081e <EXT_OTA_Slot_Data_Write+0x13a>
			break;
 800081c:	bf00      	nop
		}
	}
	while(0);

	return ret;
 800081e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8000822:	4618      	mov	r0, r3
 8000824:	3728      	adds	r7, #40	; 0x28
 8000826:	46bd      	mov	sp, r7
 8000828:	bdb0      	pop	{r4, r5, r7, pc}
 800082a:	bf00      	nop
 800082c:	08003f90 	.word	0x08003f90
 8000830:	08003fc0 	.word	0x08003fc0
 8000834:	08009800 	.word	0x08009800
 8000838:	0800cc00 	.word	0x0800cc00
 800083c:	08003fd8 	.word	0x08003fd8
 8000840:	200004a8 	.word	0x200004a8
 8000844:	08004008 	.word	0x08004008
 8000848:	0800403c 	.word	0x0800403c

0800084c <EXT_OTA_Get_Available_Slot_Number>:
 * @brief Get the Flash data slot for firmware update
 * @param none
 * @retval uint8_t
 */
static uint8_t EXT_OTA_Get_Available_Slot_Number()
{
 800084c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800084e:	b08f      	sub	sp, #60	; 0x3c
 8000850:	af00      	add	r7, sp, #0
	uint8_t data_slot = 0xFFu;
 8000852:	23ff      	movs	r3, #255	; 0xff
 8000854:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	// Read the configuration
	EXT_GNRL_CONFIG cfg;
	memcpy(&cfg, cfg_flash, sizeof(EXT_GNRL_CONFIG));
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <EXT_OTA_Get_Available_Slot_Number+0xa8>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	461c      	mov	r4, r3
 800085e:	1d3e      	adds	r6, r7, #4
 8000860:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000864:	4635      	mov	r5, r6
 8000866:	4623      	mov	r3, r4
 8000868:	6818      	ldr	r0, [r3, #0]
 800086a:	6859      	ldr	r1, [r3, #4]
 800086c:	689a      	ldr	r2, [r3, #8]
 800086e:	68db      	ldr	r3, [r3, #12]
 8000870:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000872:	3410      	adds	r4, #16
 8000874:	3610      	adds	r6, #16
 8000876:	4564      	cmp	r4, ip
 8000878:	d1f4      	bne.n	8000864 <EXT_OTA_Get_Available_Slot_Number+0x18>
 800087a:	4632      	mov	r2, r6
 800087c:	4623      	mov	r3, r4
 800087e:	881b      	ldrh	r3, [r3, #0]
 8000880:	8013      	strh	r3, [r2, #0]

	// Check if there is any valid slot
	for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 8000882:	2300      	movs	r3, #0
 8000884:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8000888:	e029      	b.n	80008de <EXT_OTA_Get_Available_Slot_Number+0x92>
	{
		if(cfg.slot_table[i].is_this_slot_valid != 0 || cfg.slot_table[i].is_this_slot_active == 0)
 800088a:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 800088e:	4613      	mov	r3, r2
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	4413      	add	r3, r2
 8000894:	00db      	lsls	r3, r3, #3
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	3338      	adds	r3, #56	; 0x38
 800089a:	443b      	add	r3, r7
 800089c:	3b30      	subs	r3, #48	; 0x30
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d10c      	bne.n	80008be <EXT_OTA_Get_Available_Slot_Number+0x72>
 80008a4:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 80008a8:	4613      	mov	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	4413      	add	r3, r2
 80008ae:	00db      	lsls	r3, r3, #3
 80008b0:	1a9b      	subs	r3, r3, r2
 80008b2:	3338      	adds	r3, #56	; 0x38
 80008b4:	443b      	add	r3, r7
 80008b6:	3b2f      	subs	r3, #47	; 0x2f
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d10a      	bne.n	80008d4 <EXT_OTA_Get_Available_Slot_Number+0x88>
		{
			data_slot = i;
 80008be:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008c2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			printf("Find slot %u available for OTA update\r\n", i);
 80008c6:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008ca:	4619      	mov	r1, r3
 80008cc:	480a      	ldr	r0, [pc, #40]	; (80008f8 <EXT_OTA_Get_Available_Slot_Number+0xac>)
 80008ce:	f002 faad 	bl	8002e2c <iprintf>
			break;
 80008d2:	e008      	b.n	80008e6 <EXT_OTA_Get_Available_Slot_Number+0x9a>
	for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 80008d4:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008d8:	3301      	adds	r3, #1
 80008da:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80008de:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d9d1      	bls.n	800088a <EXT_OTA_Get_Available_Slot_Number+0x3e>
		}
	}
	return data_slot;
 80008e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	373c      	adds	r7, #60	; 0x3c
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000000 	.word	0x20000000
 80008f8:	0800406c 	.word	0x0800406c

080008fc <EXT_OTA_App_Data_Write>:
 * @param data: Data to be written to the application memory
 * @param data_len: length of the data to be written
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef EXT_OTA_App_Data_Write(uint8_t* data, uint32_t data_len)
{
 80008fc:	b5b0      	push	{r4, r5, r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
 8000904:	6039      	str	r1, [r7, #0]
	HAL_StatusTypeDef ret;

	do
	{
		// Erase the Flash memory of the application
		ret = HAL_FLASH_Unlock();
 8000906:	f001 f80d 	bl	8001924 <HAL_FLASH_Unlock>
 800090a:	4603      	mov	r3, r0
 800090c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(ret != HAL_OK)
 8000910:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000914:	2b00      	cmp	r3, #0
 8000916:	d162      	bne.n	80009de <EXT_OTA_App_Data_Write+0xe2>
			break;

		printf("Erasing application flash memory");
 8000918:	4835      	ldr	r0, [pc, #212]	; (80009f0 <EXT_OTA_App_Data_Write+0xf4>)
 800091a:	f002 fa87 	bl	8002e2c <iprintf>

		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t sector_error;

		EraseInitStruct.TypeErase 	= FLASH_TYPEERASE_PAGES;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
		EraseInitStruct.PageAddress = EXT_APP_START_ADD;
 8000922:	4b34      	ldr	r3, [pc, #208]	; (80009f4 <EXT_OTA_App_Data_Write+0xf8>)
 8000924:	617b      	str	r3, [r7, #20]
		EraseInitStruct.NbPages 	= DATA_FLASH_SIZE;	// 13 KB
 8000926:	230d      	movs	r3, #13
 8000928:	61bb      	str	r3, [r7, #24]
		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &sector_error);
 800092a:	f107 0208 	add.w	r2, r7, #8
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4611      	mov	r1, r2
 8000934:	4618      	mov	r0, r3
 8000936:	f001 f8dd 	bl	8001af4 <HAL_FLASHEx_Erase>
 800093a:	4603      	mov	r3, r0
 800093c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(ret != HAL_OK)
 8000940:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000944:	2b00      	cmp	r3, #0
 8000946:	d003      	beq.n	8000950 <EXT_OTA_App_Data_Write+0x54>
		{
			printf("Unable to erase Flash memory, updating stopped");
 8000948:	482b      	ldr	r0, [pc, #172]	; (80009f8 <EXT_OTA_App_Data_Write+0xfc>)
 800094a:	f002 fa6f 	bl	8002e2c <iprintf>
			break;
 800094e:	e049      	b.n	80009e4 <EXT_OTA_App_Data_Write+0xe8>
		}
		// Program the new application into the Flash memory
		for(uint32_t i = 0; i < data_len / 2; ++i)
 8000950:	2300      	movs	r3, #0
 8000952:	623b      	str	r3, [r7, #32]
 8000954:	e02d      	b.n	80009b2 <EXT_OTA_App_Data_Write+0xb6>
		{
			uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	687a      	ldr	r2, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	b21a      	sxth	r2, r3
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	005b      	lsls	r3, r3, #1
 8000966:	3301      	adds	r3, #1
 8000968:	6879      	ldr	r1, [r7, #4]
 800096a:	440b      	add	r3, r1
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b21b      	sxth	r3, r3
 8000972:	4313      	orrs	r3, r2
 8000974:	b21b      	sxth	r3, r3
 8000976:	83fb      	strh	r3, [r7, #30]
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, (EXT_APP_START_ADD + (i * 2)), halfword_data);
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 800097e:	f503 5348 	add.w	r3, r3, #12800	; 0x3200
 8000982:	0059      	lsls	r1, r3, #1
 8000984:	8bfb      	ldrh	r3, [r7, #30]
 8000986:	2200      	movs	r2, #0
 8000988:	461c      	mov	r4, r3
 800098a:	4615      	mov	r5, r2
 800098c:	4622      	mov	r2, r4
 800098e:	462b      	mov	r3, r5
 8000990:	2001      	movs	r0, #1
 8000992:	f000 ff57 	bl	8001844 <HAL_FLASH_Program>
 8000996:	4603      	mov	r3, r0
 8000998:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(ret != HAL_OK)
 800099c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d003      	beq.n	80009ac <EXT_OTA_App_Data_Write+0xb0>
			{
				printf("Error: Unable to write to Flash, update stopped!");
 80009a4:	4815      	ldr	r0, [pc, #84]	; (80009fc <EXT_OTA_App_Data_Write+0x100>)
 80009a6:	f002 fa41 	bl	8002e2c <iprintf>
				break;
 80009aa:	e007      	b.n	80009bc <EXT_OTA_App_Data_Write+0xc0>
		for(uint32_t i = 0; i < data_len / 2; ++i)
 80009ac:	6a3b      	ldr	r3, [r7, #32]
 80009ae:	3301      	adds	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	6a3a      	ldr	r2, [r7, #32]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3cc      	bcc.n	8000956 <EXT_OTA_App_Data_Write+0x5a>
			}
		}
		if(ret != HAL_OK)
 80009bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d10e      	bne.n	80009e2 <EXT_OTA_App_Data_Write+0xe6>
		{
			break;
		}

		// Lock the Flash memory
		ret = HAL_FLASH_Lock();
 80009c4:	f000 ffd4 	bl	8001970 <HAL_FLASH_Lock>
 80009c8:	4603      	mov	r3, r0
 80009ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if(ret != HAL_OK)
 80009ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d006      	beq.n	80009e4 <EXT_OTA_App_Data_Write+0xe8>
		{
			printf("Error: Unable to lock Flash, update stopped!");
 80009d6:	480a      	ldr	r0, [pc, #40]	; (8000a00 <EXT_OTA_App_Data_Write+0x104>)
 80009d8:	f002 fa28 	bl	8002e2c <iprintf>
			break;
 80009dc:	e002      	b.n	80009e4 <EXT_OTA_App_Data_Write+0xe8>
			break;
 80009de:	bf00      	nop
 80009e0:	e000      	b.n	80009e4 <EXT_OTA_App_Data_Write+0xe8>
			break;
 80009e2:	bf00      	nop
		}
	}
	while(0);

	return ret;
 80009e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80009e8:	4618      	mov	r0, r3
 80009ea:	3728      	adds	r7, #40	; 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bdb0      	pop	{r4, r5, r7, pc}
 80009f0:	08004094 	.word	0x08004094
 80009f4:	08006400 	.word	0x08006400
 80009f8:	08003fd8 	.word	0x08003fd8
 80009fc:	08004008 	.word	0x08004008
 8000a00:	0800403c 	.word	0x0800403c

08000a04 <EXT_OTA_Write_Config>:
 * @brief Write configuration information into Flash memory
 * @param cfg: current configuration
 * @retval HAL_StatusTypeDef
 */
static HAL_StatusTypeDef EXT_OTA_Write_Config(EXT_GNRL_CONFIG* cfg)
{
 8000a04:	b5b0      	push	{r4, r5, r7, lr}
 8000a06:	b08c      	sub	sp, #48	; 0x30
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
	HAL_StatusTypeDef ret;

	do
	{
		// Check the input condition
		if(cfg == NULL)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d103      	bne.n	8000a1a <EXT_OTA_Write_Config+0x16>
		{
			ret = HAL_ERROR;
 8000a12:	2301      	movs	r3, #1
 8000a14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			break;
 8000a18:	e06e      	b.n	8000af8 <EXT_OTA_Write_Config+0xf4>
		}
		// Erase the Flash memory of the application
		ret = HAL_FLASH_Unlock();
 8000a1a:	f000 ff83 	bl	8001924 <HAL_FLASH_Unlock>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(ret != HAL_OK)
 8000a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d162      	bne.n	8000af2 <EXT_OTA_Write_Config+0xee>
			break;

		printf("Erasing config flash memory");
 8000a2c:	4835      	ldr	r0, [pc, #212]	; (8000b04 <EXT_OTA_Write_Config+0x100>)
 8000a2e:	f002 f9fd 	bl	8002e2c <iprintf>

		FLASH_EraseInitTypeDef EraseInitStruct;
		uint32_t sector_error;

		EraseInitStruct.TypeErase 	= FLASH_TYPEERASE_PAGES;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
		EraseInitStruct.PageAddress = EXT_CONFIG_FLASH_ADD;
 8000a36:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <EXT_OTA_Write_Config+0x104>)
 8000a38:	61bb      	str	r3, [r7, #24]
		EraseInitStruct.NbPages 	= CONFIG_FLASH_SIZE;	// 6 KB
 8000a3a:	2306      	movs	r3, #6
 8000a3c:	61fb      	str	r3, [r7, #28]
		ret = HAL_FLASHEx_Erase(&EraseInitStruct, &sector_error);
 8000a3e:	f107 020c 	add.w	r2, r7, #12
 8000a42:	f107 0310 	add.w	r3, r7, #16
 8000a46:	4611      	mov	r1, r2
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 f853 	bl	8001af4 <HAL_FLASHEx_Erase>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(ret != HAL_OK)
 8000a54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d003      	beq.n	8000a64 <EXT_OTA_Write_Config+0x60>
		{
			printf("Unable to erase Flash memory, updating stopped");
 8000a5c:	482b      	ldr	r0, [pc, #172]	; (8000b0c <EXT_OTA_Write_Config+0x108>)
 8000a5e:	f002 f9e5 	bl	8002e2c <iprintf>
			break;
 8000a62:	e049      	b.n	8000af8 <EXT_OTA_Write_Config+0xf4>
		}
		// Program the new application into the Flash memory
		uint8_t* data = (uint8_t*)cfg;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
		for(uint32_t i = 0; i < sizeof(EXT_GNRL_CONFIG) / 2; ++i)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8000a6c:	e02d      	b.n	8000aca <EXT_OTA_Write_Config+0xc6>
		{
			uint16_t halfword_data = data[i * 2] | (data[i * 2 + 1] << 8);
 8000a6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a70:	005b      	lsls	r3, r3, #1
 8000a72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a74:	4413      	add	r3, r2
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	b21a      	sxth	r2, r3
 8000a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	3301      	adds	r3, #1
 8000a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a82:	440b      	add	r3, r1
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	b21b      	sxth	r3, r3
 8000a8a:	4313      	orrs	r3, r2
 8000a8c:	b21b      	sxth	r3, r3
 8000a8e:	847b      	strh	r3, [r7, #34]	; 0x22
			ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, (EXT_CONFIG_FLASH_ADD + (i * 2)), halfword_data);
 8000a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a92:	f103 6380 	add.w	r3, r3, #67108864	; 0x4000000
 8000a96:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 8000a9a:	0059      	lsls	r1, r3, #1
 8000a9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	461c      	mov	r4, r3
 8000aa2:	4615      	mov	r5, r2
 8000aa4:	4622      	mov	r2, r4
 8000aa6:	462b      	mov	r3, r5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	f000 fecb 	bl	8001844 <HAL_FLASH_Program>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if(ret != HAL_OK)
 8000ab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <EXT_OTA_Write_Config+0xc0>
			{
				printf("Error: Unable to write to Flash, update stopped!");
 8000abc:	4814      	ldr	r0, [pc, #80]	; (8000b10 <EXT_OTA_Write_Config+0x10c>)
 8000abe:	f002 f9b5 	bl	8002e2c <iprintf>
				break;
 8000ac2:	e005      	b.n	8000ad0 <EXT_OTA_Write_Config+0xcc>
		for(uint32_t i = 0; i < sizeof(EXT_GNRL_CONFIG) / 2; ++i)
 8000ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000acc:	2b18      	cmp	r3, #24
 8000ace:	d9ce      	bls.n	8000a6e <EXT_OTA_Write_Config+0x6a>
			}
		}
		if(ret != HAL_OK)
 8000ad0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d10e      	bne.n	8000af6 <EXT_OTA_Write_Config+0xf2>
		{
			break;
		}

		// Lock the Flash memory
		ret = HAL_FLASH_Lock();
 8000ad8:	f000 ff4a 	bl	8001970 <HAL_FLASH_Lock>
 8000adc:	4603      	mov	r3, r0
 8000ade:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if(ret != HAL_OK)
 8000ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d006      	beq.n	8000af8 <EXT_OTA_Write_Config+0xf4>
		{
			printf("Error: Unable to lock Flash, update stopped!");
 8000aea:	480a      	ldr	r0, [pc, #40]	; (8000b14 <EXT_OTA_Write_Config+0x110>)
 8000aec:	f002 f99e 	bl	8002e2c <iprintf>
			break;
 8000af0:	e002      	b.n	8000af8 <EXT_OTA_Write_Config+0xf4>
			break;
 8000af2:	bf00      	nop
 8000af4:	e000      	b.n	8000af8 <EXT_OTA_Write_Config+0xf4>
			break;
 8000af6:	bf00      	nop
		}
	}
	while(0);

	return ret;
 8000af8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3730      	adds	r7, #48	; 0x30
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bdb0      	pop	{r4, r5, r7, pc}
 8000b04:	080040b8 	.word	0x080040b8
 8000b08:	08004c00 	.word	0x08004c00
 8000b0c:	08003fd8 	.word	0x08003fd8
 8000b10:	08004008 	.word	0x08004008
 8000b14:	0800403c 	.word	0x0800403c

08000b18 <EXT_OTA_Update>:
 * @brief Function to perform the OTA update sequence
 * @param none
 * @retval EXT_OTA_EX
 */
EXT_OTA_EX EXT_OTA_Update(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
	EXT_OTA_EX ret = EXT_OTA_EX_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	71fb      	strb	r3, [r7, #7]
	uint16_t len = 0;
 8000b22:	2300      	movs	r3, #0
 8000b24:	80bb      	strh	r3, [r7, #4]

	printf("Waiting for the OTA firmware\r\n");
 8000b26:	4823      	ldr	r0, [pc, #140]	; (8000bb4 <EXT_OTA_Update+0x9c>)
 8000b28:	f002 fa06 	bl	8002f38 <puts>

	// Reset the variables
	ota_fw_total_size 		= 0u;
 8000b2c:	4b22      	ldr	r3, [pc, #136]	; (8000bb8 <EXT_OTA_Update+0xa0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
	ota_fw_received_size 	= 0u;
 8000b32:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <EXT_OTA_Update+0xa4>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	601a      	str	r2, [r3, #0]
	ota_fw_crc				= 0u;
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <EXT_OTA_Update+0xa8>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
	ota_state				= EXT_OTA_STATE_START;
 8000b3e:	4b21      	ldr	r3, [pc, #132]	; (8000bc4 <EXT_OTA_Update+0xac>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]
	slot_num_to_write_fw	= 0xFFu;
 8000b44:	4b20      	ldr	r3, [pc, #128]	; (8000bc8 <EXT_OTA_Update+0xb0>)
 8000b46:	22ff      	movs	r2, #255	; 0xff
 8000b48:	701a      	strb	r2, [r3, #0]

	do
	{
		memset(rcv_buffer, 0, EXT_OTA_PACKET_MAX_SIZE);
 8000b4a:	f240 4209 	movw	r2, #1033	; 0x409
 8000b4e:	2100      	movs	r1, #0
 8000b50:	481e      	ldr	r0, [pc, #120]	; (8000bcc <EXT_OTA_Update+0xb4>)
 8000b52:	f002 f963 	bl	8002e1c <memset>

		len = EXT_OTA_Receive_Chunk(rcv_buffer, EXT_OTA_PACKET_MAX_SIZE);
 8000b56:	f240 4109 	movw	r1, #1033	; 0x409
 8000b5a:	481c      	ldr	r0, [pc, #112]	; (8000bcc <EXT_OTA_Update+0xb4>)
 8000b5c:	f7ff faf6 	bl	800014c <EXT_OTA_Receive_Chunk>
 8000b60:	4603      	mov	r3, r0
 8000b62:	80bb      	strh	r3, [r7, #4]

		if(len != 0)
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d007      	beq.n	8000b7a <EXT_OTA_Update+0x62>
		{
			ret = EXT_OTA_Process_Data(rcv_buffer, len);
 8000b6a:	88bb      	ldrh	r3, [r7, #4]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4817      	ldr	r0, [pc, #92]	; (8000bcc <EXT_OTA_Update+0xb4>)
 8000b70:	f7ff fbc6 	bl	8000300 <EXT_OTA_Process_Data>
 8000b74:	4603      	mov	r3, r0
 8000b76:	71fb      	strb	r3, [r7, #7]
 8000b78:	e001      	b.n	8000b7e <EXT_OTA_Update+0x66>
		}
		else
		{
			ret = EXT_OTA_EX_ERR;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	71fb      	strb	r3, [r7, #7]
		}

		if(ret == EXT_OTA_EX_OK)
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d106      	bne.n	8000b92 <EXT_OTA_Update+0x7a>
		{
			printf("Sending ACK\r\n");
 8000b84:	4812      	ldr	r0, [pc, #72]	; (8000bd0 <EXT_OTA_Update+0xb8>)
 8000b86:	f002 f9d7 	bl	8002f38 <puts>
			EXT_OTA_Send_Resp(EXT_OTA_ACK);
 8000b8a:	2000      	movs	r0, #0
 8000b8c:	f7ff fd7e 	bl	800068c <EXT_OTA_Send_Resp>
 8000b90:	e006      	b.n	8000ba0 <EXT_OTA_Update+0x88>
		}
		else
		{
			printf("Sending NACK\r\n");
 8000b92:	4810      	ldr	r0, [pc, #64]	; (8000bd4 <EXT_OTA_Update+0xbc>)
 8000b94:	f002 f9d0 	bl	8002f38 <puts>
			EXT_OTA_Send_Resp(EXT_OTA_NACK);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fd77 	bl	800068c <EXT_OTA_Send_Resp>
			break;
 8000b9e:	e003      	b.n	8000ba8 <EXT_OTA_Update+0x90>
		}
	}
	while(ota_state != EXT_OTA_STATE_IDLE);
 8000ba0:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <EXT_OTA_Update+0xac>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1d0      	bne.n	8000b4a <EXT_OTA_Update+0x32>

	return ret;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	080040d4 	.word	0x080040d4
 8000bb8:	200004a0 	.word	0x200004a0
 8000bbc:	200004a8 	.word	0x200004a8
 8000bc0:	200004a4 	.word	0x200004a4
 8000bc4:	2000049d 	.word	0x2000049d
 8000bc8:	200004ac 	.word	0x200004ac
 8000bcc:	20000094 	.word	0x20000094
 8000bd0:	080040f4 	.word	0x080040f4
 8000bd4:	08004104 	.word	0x08004104

08000bd8 <EXT_OTA_Load_New_App>:
 * @brief Funciton to load the suitable firmware into the application slot
 * @param none
 * @retval none
 */
void EXT_OTA_Load_New_App()
{
 8000bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bda:	b093      	sub	sp, #76	; 0x4c
 8000bdc:	af00      	add	r7, sp, #0
	uint8_t is_update_available = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t slot_num;
	HAL_StatusTypeDef ret;

	// Read the configuration
	EXT_GNRL_CONFIG cfg;
	memcpy(&cfg, cfg_flash, sizeof(EXT_GNRL_CONFIG));
 8000be4:	4b7b      	ldr	r3, [pc, #492]	; (8000dd4 <EXT_OTA_Load_New_App+0x1fc>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	461c      	mov	r4, r3
 8000bea:	1d3e      	adds	r6, r7, #4
 8000bec:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000bf0:	4635      	mov	r5, r6
 8000bf2:	4623      	mov	r3, r4
 8000bf4:	6818      	ldr	r0, [r3, #0]
 8000bf6:	6859      	ldr	r1, [r3, #4]
 8000bf8:	689a      	ldr	r2, [r3, #8]
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000bfe:	3410      	adds	r4, #16
 8000c00:	3610      	adds	r6, #16
 8000c02:	4564      	cmp	r4, ip
 8000c04:	d1f4      	bne.n	8000bf0 <EXT_OTA_Load_New_App+0x18>
 8000c06:	4632      	mov	r2, r6
 8000c08:	4623      	mov	r3, r4
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	8013      	strh	r3, [r2, #0]

	// Check if there is a new application
	for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 8000c0e:	2300      	movs	r3, #0
 8000c10:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000c14:	e037      	b.n	8000c86 <EXT_OTA_Load_New_App+0xae>
	{
		if(cfg.slot_table[i].should_we_run_this_slot_fw == 1)
 8000c16:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000c1a:	4613      	mov	r3, r2
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	4413      	add	r3, r2
 8000c20:	00db      	lsls	r3, r3, #3
 8000c22:	1a9b      	subs	r3, r3, r2
 8000c24:	3348      	adds	r3, #72	; 0x48
 8000c26:	443b      	add	r3, r7
 8000c28:	3b3e      	subs	r3, #62	; 0x3e
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d125      	bne.n	8000c7c <EXT_OTA_Load_New_App+0xa4>
		{
			printf("New application is available at slot %u\r\n", i);
 8000c30:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000c34:	4619      	mov	r1, r3
 8000c36:	4868      	ldr	r0, [pc, #416]	; (8000dd8 <EXT_OTA_Load_New_App+0x200>)
 8000c38:	f002 f8f8 	bl	8002e2c <iprintf>
			is_update_available = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			slot_num = i;
 8000c42:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000c46:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

			// Update the slot information
			cfg.slot_table[i].is_this_slot_active = 1;
 8000c4a:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000c4e:	4613      	mov	r3, r2
 8000c50:	005b      	lsls	r3, r3, #1
 8000c52:	4413      	add	r3, r2
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	1a9b      	subs	r3, r3, r2
 8000c58:	3348      	adds	r3, #72	; 0x48
 8000c5a:	443b      	add	r3, r7
 8000c5c:	3b3f      	subs	r3, #63	; 0x3f
 8000c5e:	2201      	movs	r2, #1
 8000c60:	701a      	strb	r2, [r3, #0]
			cfg.slot_table[i].should_we_run_this_slot_fw = 0;
 8000c62:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8000c66:	4613      	mov	r3, r2
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	4413      	add	r3, r2
 8000c6c:	00db      	lsls	r3, r3, #3
 8000c6e:	1a9b      	subs	r3, r3, r2
 8000c70:	3348      	adds	r3, #72	; 0x48
 8000c72:	443b      	add	r3, r7
 8000c74:	3b3e      	subs	r3, #62	; 0x3e
 8000c76:	2200      	movs	r2, #0
 8000c78:	701a      	strb	r2, [r3, #0]

			break;
 8000c7a:	e008      	b.n	8000c8e <EXT_OTA_Load_New_App+0xb6>
	for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 8000c7c:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000c80:	3301      	adds	r3, #1
 8000c82:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
 8000c86:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8000c8a:	2b01      	cmp	r3, #1
 8000c8c:	d9c3      	bls.n	8000c16 <EXT_OTA_Load_New_App+0x3e>
		}
	}

	// Update the new slot
	if(is_update_available)
 8000c8e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d050      	beq.n	8000d38 <EXT_OTA_Load_New_App+0x160>
	{
		// Deactivate other slots
		for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8000c9c:	e016      	b.n	8000ccc <EXT_OTA_Load_New_App+0xf4>
		{
			if(slot_num != i)
 8000c9e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000ca2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d00b      	beq.n	8000cc2 <EXT_OTA_Load_New_App+0xea>
			{
				cfg.slot_table[i].is_this_slot_active = 0;
 8000caa:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8000cae:	4613      	mov	r3, r2
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	4413      	add	r3, r2
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	1a9b      	subs	r3, r3, r2
 8000cb8:	3348      	adds	r3, #72	; 0x48
 8000cba:	443b      	add	r3, r7
 8000cbc:	3b3f      	subs	r3, #63	; 0x3f
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 8000cc2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000cc6:	3301      	adds	r3, #1
 8000cc8:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
 8000ccc:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d9e4      	bls.n	8000c9e <EXT_OTA_Load_New_App+0xc6>
			}
		}

		uint32_t slot_address = (slot_num == 0) ? EXT_APP_SLOT0_FLASH_ADD : EXT_APP_SLOT1_FLASH_ADD;
 8000cd4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d101      	bne.n	8000ce0 <EXT_OTA_Load_New_App+0x108>
 8000cdc:	4b3f      	ldr	r3, [pc, #252]	; (8000ddc <EXT_OTA_Load_New_App+0x204>)
 8000cde:	e000      	b.n	8000ce2 <EXT_OTA_Load_New_App+0x10a>
 8000ce0:	4b3f      	ldr	r3, [pc, #252]	; (8000de0 <EXT_OTA_Load_New_App+0x208>)
 8000ce2:	63bb      	str	r3, [r7, #56]	; 0x38

		ret = EXT_OTA_App_Data_Write((uint8_t*)slot_address, cfg.slot_table[slot_num].fw_size);
 8000ce4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ce6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	00db      	lsls	r3, r3, #3
 8000cf2:	1a9b      	subs	r3, r3, r2
 8000cf4:	3348      	adds	r3, #72	; 0x48
 8000cf6:	443b      	add	r3, r7
 8000cf8:	3b44      	subs	r3, #68	; 0x44
 8000cfa:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8000cfe:	4619      	mov	r1, r3
 8000d00:	f7ff fdfc 	bl	80008fc <EXT_OTA_App_Data_Write>
 8000d04:	4603      	mov	r3, r0
 8000d06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if(ret != HAL_OK)
 8000d0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d003      	beq.n	8000d1a <EXT_OTA_Load_New_App+0x142>
		{
			printf("Error: Unable to update the new app!\r\n");
 8000d12:	4834      	ldr	r0, [pc, #208]	; (8000de4 <EXT_OTA_Load_New_App+0x20c>)
 8000d14:	f002 f910 	bl	8002f38 <puts>
		else
		{
			printf("Done uploading new application\r\n");
		}
	}
}
 8000d18:	e057      	b.n	8000dca <EXT_OTA_Load_New_App+0x1f2>
			ret = EXT_OTA_Write_Config(&cfg);
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fe71 	bl	8000a04 <EXT_OTA_Write_Config>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			if(ret != HAL_OK)
 8000d28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d04c      	beq.n	8000dca <EXT_OTA_Load_New_App+0x1f2>
				printf("Error: Unable to write config Flash\r\n");
 8000d30:	482d      	ldr	r0, [pc, #180]	; (8000de8 <EXT_OTA_Load_New_App+0x210>)
 8000d32:	f002 f901 	bl	8002f38 <puts>
}
 8000d36:	e048      	b.n	8000dca <EXT_OTA_Load_New_App+0x1f2>
		for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000d3e:	e016      	b.n	8000d6e <EXT_OTA_Load_New_App+0x196>
			if(cfg.slot_table[i].is_this_slot_active == 1)
 8000d40:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8000d44:	4613      	mov	r3, r2
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	4413      	add	r3, r2
 8000d4a:	00db      	lsls	r3, r3, #3
 8000d4c:	1a9b      	subs	r3, r3, r2
 8000d4e:	3348      	adds	r3, #72	; 0x48
 8000d50:	443b      	add	r3, r7
 8000d52:	3b3f      	subs	r3, #63	; 0x3f
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d104      	bne.n	8000d64 <EXT_OTA_Load_New_App+0x18c>
				slot_num = i;
 8000d5a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000d5e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				break;
 8000d62:	e008      	b.n	8000d76 <EXT_OTA_Load_New_App+0x19e>
		for(uint8_t i = 0; i < EXT_SLOT_NO; ++i)
 8000d64:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000d68:	3301      	adds	r3, #1
 8000d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8000d6e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d9e4      	bls.n	8000d40 <EXT_OTA_Load_New_App+0x168>
		printf("Verifying the new application...\r\n");
 8000d76:	481d      	ldr	r0, [pc, #116]	; (8000dec <EXT_OTA_Load_New_App+0x214>)
 8000d78:	f002 f8de 	bl	8002f38 <puts>
		uint32_t cal_crc = CalcCRC((uint8_t*)EXT_APP_START_ADD, cfg.slot_table[slot_num].fw_size);
 8000d7c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000d80:	4613      	mov	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	4413      	add	r3, r2
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	1a9b      	subs	r3, r3, r2
 8000d8a:	3348      	adds	r3, #72	; 0x48
 8000d8c:	443b      	add	r3, r7
 8000d8e:	3b44      	subs	r3, #68	; 0x44
 8000d90:	f8d3 3007 	ldr.w	r3, [r3, #7]
 8000d94:	4619      	mov	r1, r3
 8000d96:	4816      	ldr	r0, [pc, #88]	; (8000df0 <EXT_OTA_Load_New_App+0x218>)
 8000d98:	f000 f830 	bl	8000dfc <CalcCRC>
 8000d9c:	63f8      	str	r0, [r7, #60]	; 0x3c
		if(cal_crc != cfg.slot_table[slot_num].fw_crc)
 8000d9e:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8000da2:	4613      	mov	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	4413      	add	r3, r2
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	1a9b      	subs	r3, r3, r2
 8000dac:	3348      	adds	r3, #72	; 0x48
 8000dae:	443b      	add	r3, r7
 8000db0:	3b44      	subs	r3, #68	; 0x44
 8000db2:	f8d3 300b 	ldr.w	r3, [r3, #11]
 8000db6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000db8:	429a      	cmp	r2, r3
 8000dba:	d003      	beq.n	8000dc4 <EXT_OTA_Load_New_App+0x1ec>
			printf("Error: invalid application!\r\n");
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <EXT_OTA_Load_New_App+0x21c>)
 8000dbe:	f002 f8bb 	bl	8002f38 <puts>
			while(1);
 8000dc2:	e7fe      	b.n	8000dc2 <EXT_OTA_Load_New_App+0x1ea>
			printf("Done uploading new application\r\n");
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <EXT_OTA_Load_New_App+0x220>)
 8000dc6:	f002 f8b7 	bl	8002f38 <puts>
}
 8000dca:	bf00      	nop
 8000dcc:	374c      	adds	r7, #76	; 0x4c
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000000 	.word	0x20000000
 8000dd8:	08004114 	.word	0x08004114
 8000ddc:	08009800 	.word	0x08009800
 8000de0:	0800cc00 	.word	0x0800cc00
 8000de4:	08004140 	.word	0x08004140
 8000de8:	08004168 	.word	0x08004168
 8000dec:	08004190 	.word	0x08004190
 8000df0:	08006400 	.word	0x08006400
 8000df4:	080041b4 	.word	0x080041b4
 8000df8:	080041d4 	.word	0x080041d4

08000dfc <CalcCRC>:

uint32_t CalcCRC(uint8_t * pData, uint32_t DataLength)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b087      	sub	sp, #28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	6039      	str	r1, [r7, #0]
    uint32_t Checksum = 0xFFFFFFFF;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	e014      	b.n	8000e3c <CalcCRC+0x40>
    {
        uint8_t top = (uint8_t)(Checksum >> 24);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	0e1b      	lsrs	r3, r3, #24
 8000e16:	73fb      	strb	r3, [r7, #15]
        top ^= pData[i];
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	693b      	ldr	r3, [r7, #16]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	781a      	ldrb	r2, [r3, #0]
 8000e20:	7bfb      	ldrb	r3, [r7, #15]
 8000e22:	4053      	eors	r3, r2
 8000e24:	73fb      	strb	r3, [r7, #15]
        Checksum = (Checksum << 8) ^ crc_table[top];
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	021a      	lsls	r2, r3, #8
 8000e2a:	7bfb      	ldrb	r3, [r7, #15]
 8000e2c:	4908      	ldr	r1, [pc, #32]	; (8000e50 <CalcCRC+0x54>)
 8000e2e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000e32:	4053      	eors	r3, r2
 8000e34:	617b      	str	r3, [r7, #20]
    for(unsigned int i=0; i < DataLength; i++)
 8000e36:	693b      	ldr	r3, [r7, #16]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d3e6      	bcc.n	8000e12 <CalcCRC+0x16>
    }
    return Checksum;
 8000e44:	697b      	ldr	r3, [r7, #20]
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	371c      	adds	r7, #28
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bc80      	pop	{r7}
 8000e4e:	4770      	bx	lr
 8000e50:	080042e0 	.word	0x080042e0

08000e54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e5a:	f000 fb6b 	bl	8001534 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e5e:	f000 f86d 	bl	8000f3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e62:	f000 f905 	bl	8001070 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000e66:	f000 f8af 	bl	8000fc8 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000e6a:	f000 f8d7 	bl	800101c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting bootloader version 0.3");
 8000e6e:	4827      	ldr	r0, [pc, #156]	; (8000f0c <main+0xb8>)
 8000e70:	f001 ffdc 	bl	8002e2c <iprintf>
  for(uint8_t i = 0; i < 30; ++i)
 8000e74:	2300      	movs	r3, #0
 8000e76:	71fb      	strb	r3, [r7, #7]
 8000e78:	e00a      	b.n	8000e90 <main+0x3c>
  {
	  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000e7a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e7e:	4824      	ldr	r0, [pc, #144]	; (8000f10 <main+0xbc>)
 8000e80:	f001 f87c 	bl	8001f7c <HAL_GPIO_TogglePin>
	  HAL_Delay(50);
 8000e84:	2032      	movs	r0, #50	; 0x32
 8000e86:	f000 fbd5 	bl	8001634 <HAL_Delay>
  for(uint8_t i = 0; i < 30; ++i)
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	71fb      	strb	r3, [r7, #7]
 8000e90:	79fb      	ldrb	r3, [r7, #7]
 8000e92:	2b1d      	cmp	r3, #29
 8000e94:	d9f1      	bls.n	8000e7a <main+0x26>
  }

  EXT_GNRL_CONFIG *cfg = (EXT_GNRL_CONFIG*)(EXT_CONFIG_FLASH_ADD);
 8000e96:	4b1f      	ldr	r3, [pc, #124]	; (8000f14 <main+0xc0>)
 8000e98:	603b      	str	r3, [r7, #0]
  static uint8_t ota_mode = 0;

  switch(cfg->reboot_cause)
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ea2:	d010      	beq.n	8000ec6 <main+0x72>
 8000ea4:	4a1c      	ldr	r2, [pc, #112]	; (8000f18 <main+0xc4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d017      	beq.n	8000eda <main+0x86>
 8000eaa:	4a1b      	ldr	r2, [pc, #108]	; (8000f18 <main+0xc4>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d816      	bhi.n	8000ede <main+0x8a>
 8000eb0:	4a1a      	ldr	r2, [pc, #104]	; (8000f1c <main+0xc8>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d003      	beq.n	8000ebe <main+0x6a>
 8000eb6:	4a1a      	ldr	r2, [pc, #104]	; (8000f20 <main+0xcc>)
 8000eb8:	4293      	cmp	r3, r2
 8000eba:	d004      	beq.n	8000ec6 <main+0x72>
		  break;
	  }
	  case EXT_LOAD_PREV_APP:
		  break;
	  default:
		  break;
 8000ebc:	e00f      	b.n	8000ede <main+0x8a>
		  printf("Normal boot\r\n");
 8000ebe:	4819      	ldr	r0, [pc, #100]	; (8000f24 <main+0xd0>)
 8000ec0:	f002 f83a 	bl	8002f38 <puts>
		  break;
 8000ec4:	e00c      	b.n	8000ee0 <main+0x8c>
		  printf("First time boot/ OTA request ... \r\n");
 8000ec6:	4818      	ldr	r0, [pc, #96]	; (8000f28 <main+0xd4>)
 8000ec8:	f002 f836 	bl	8002f38 <puts>
		  printf("Going to the OTA mode\r\n");
 8000ecc:	4817      	ldr	r0, [pc, #92]	; (8000f2c <main+0xd8>)
 8000ece:	f002 f833 	bl	8002f38 <puts>
		  ota_mode = 1;
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <main+0xdc>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	701a      	strb	r2, [r3, #0]
		  break;
 8000ed8:	e002      	b.n	8000ee0 <main+0x8c>
		  break;
 8000eda:	bf00      	nop
 8000edc:	e000      	b.n	8000ee0 <main+0x8c>
		  break;
 8000ede:	bf00      	nop
  }

  if(ota_mode)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <main+0xdc>)
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d00b      	beq.n	8000f00 <main+0xac>
  {
	if(EXT_OTA_Update() != EXT_OTA_EX_OK)
 8000ee8:	f7ff fe16 	bl	8000b18 <EXT_OTA_Update>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d003      	beq.n	8000efa <main+0xa6>
	{
	  printf("Error: OTA update halted!\r\n");
 8000ef2:	4810      	ldr	r0, [pc, #64]	; (8000f34 <main+0xe0>)
 8000ef4:	f002 f820 	bl	8002f38 <puts>
	  while(1);
 8000ef8:	e7fe      	b.n	8000ef8 <main+0xa4>
	}
	else
	{
	  printf("Firmware update is done||| Rebooting...\r\n");
 8000efa:	480f      	ldr	r0, [pc, #60]	; (8000f38 <main+0xe4>)
 8000efc:	f002 f81c 	bl	8002f38 <puts>
	}
  }
  // Load new application if available
  EXT_OTA_Load_New_App();
 8000f00:	f7ff fe6a 	bl	8000bd8 <EXT_OTA_Load_New_App>
  // Go to the new application in Flash memory
  Goto_Application();
 8000f04:	f000 f91e 	bl	8001144 <Goto_Application>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <main+0xb4>
 8000f0a:	bf00      	nop
 8000f0c:	080041f4 	.word	0x080041f4
 8000f10:	40011000 	.word	0x40011000
 8000f14:	08004c00 	.word	0x08004c00
 8000f18:	facefade 	.word	0xfacefade
 8000f1c:	beeffeed 	.word	0xbeeffeed
 8000f20:	deadbeef 	.word	0xdeadbeef
 8000f24:	08004214 	.word	0x08004214
 8000f28:	08004224 	.word	0x08004224
 8000f2c:	08004248 	.word	0x08004248
 8000f30:	20000540 	.word	0x20000540
 8000f34:	08004260 	.word	0x08004260
 8000f38:	0800427c 	.word	0x0800427c

08000f3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	; 0x40
 8000f40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f42:	f107 0318 	add.w	r3, r7, #24
 8000f46:	2228      	movs	r2, #40	; 0x28
 8000f48:	2100      	movs	r1, #0
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f001 ff66 	bl	8002e1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	2200      	movs	r2, #0
 8000f54:	601a      	str	r2, [r3, #0]
 8000f56:	605a      	str	r2, [r3, #4]
 8000f58:	609a      	str	r2, [r3, #8]
 8000f5a:	60da      	str	r2, [r3, #12]
 8000f5c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f62:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f66:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f70:	2302      	movs	r3, #2
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f7a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f80:	f107 0318 	add.w	r3, r7, #24
 8000f84:	4618      	mov	r0, r3
 8000f86:	f001 f8ad 	bl	80020e4 <HAL_RCC_OscConfig>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000f90:	f000 f91e 	bl	80011d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f94:	230f      	movs	r3, #15
 8000f96:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000faa:	1d3b      	adds	r3, r7, #4
 8000fac:	2102      	movs	r1, #2
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f001 fb1a 	bl	80025e8 <HAL_RCC_ClockConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000fba:	f000 f909 	bl	80011d0 <Error_Handler>
  }
}
 8000fbe:	bf00      	nop
 8000fc0:	3740      	adds	r7, #64	; 0x40
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000fcc:	4b11      	ldr	r3, [pc, #68]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fce:	4a12      	ldr	r2, [pc, #72]	; (8001018 <MX_USART1_UART_Init+0x50>)
 8000fd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000fe0:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000fe6:	4b0b      	ldr	r3, [pc, #44]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000fec:	4b09      	ldr	r3, [pc, #36]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000fee:	220c      	movs	r2, #12
 8000ff0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ff2:	4b08      	ldr	r3, [pc, #32]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ffe:	4805      	ldr	r0, [pc, #20]	; (8001014 <MX_USART1_UART_Init+0x4c>)
 8001000:	f001 fc80 	bl	8002904 <HAL_UART_Init>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800100a:	f000 f8e1 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	bd80      	pop	{r7, pc}
 8001012:	bf00      	nop
 8001014:	200004b0 	.word	0x200004b0
 8001018:	40013800 	.word	0x40013800

0800101c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001022:	4a12      	ldr	r2, [pc, #72]	; (800106c <MX_USART3_UART_Init+0x50>)
 8001024:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001028:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800102c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001030:	2200      	movs	r2, #0
 8001032:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001036:	2200      	movs	r2, #0
 8001038:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 800103c:	2200      	movs	r2, #0
 800103e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001042:	220c      	movs	r2, #12
 8001044:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001048:	2200      	movs	r2, #0
 800104a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 800104e:	2200      	movs	r2, #0
 8001050:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USART3_UART_Init+0x4c>)
 8001054:	f001 fc56 	bl	8002904 <HAL_UART_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800105e:	f000 f8b7 	bl	80011d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	200004f8 	.word	0x200004f8
 800106c:	40004800 	.word	0x40004800

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b088      	sub	sp, #32
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0310 	add.w	r3, r7, #16
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <MX_GPIO_Init+0xa8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <MX_GPIO_Init+0xa8>)
 800108a:	f043 0310 	orr.w	r3, r3, #16
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <MX_GPIO_Init+0xa8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0310 	and.w	r3, r3, #16
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800109c:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <MX_GPIO_Init+0xa8>)
 800109e:	699b      	ldr	r3, [r3, #24]
 80010a0:	4a1d      	ldr	r2, [pc, #116]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010a2:	f043 0320 	orr.w	r3, r3, #32
 80010a6:	6193      	str	r3, [r2, #24]
 80010a8:	4b1b      	ldr	r3, [pc, #108]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010aa:	699b      	ldr	r3, [r3, #24]
 80010ac:	f003 0320 	and.w	r3, r3, #32
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b4:	4b18      	ldr	r3, [pc, #96]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4a17      	ldr	r2, [pc, #92]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010ba:	f043 0308 	orr.w	r3, r3, #8
 80010be:	6193      	str	r3, [r2, #24]
 80010c0:	4b15      	ldr	r3, [pc, #84]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	f003 0308 	and.w	r3, r3, #8
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010cc:	4b12      	ldr	r3, [pc, #72]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	6193      	str	r3, [r2, #24]
 80010d8:	4b0f      	ldr	r3, [pc, #60]	; (8001118 <MX_GPIO_Init+0xa8>)
 80010da:	699b      	ldr	r3, [r3, #24]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	603b      	str	r3, [r7, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80010e4:	2200      	movs	r2, #0
 80010e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ea:	480c      	ldr	r0, [pc, #48]	; (800111c <MX_GPIO_Init+0xac>)
 80010ec:	f000 ff2e 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010f0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fe:	2302      	movs	r3, #2
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001102:	f107 0310 	add.w	r3, r7, #16
 8001106:	4619      	mov	r1, r3
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <MX_GPIO_Init+0xac>)
 800110a:	f000 fd9b 	bl	8001c44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800110e:	bf00      	nop
 8001110:	3720      	adds	r7, #32
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	40011000 	.word	0x40011000

08001120 <__io_putchar>:
#ifdef __GNUC__
int __io_putchar(int ch)
#else
int fputc(int ch, FILE* f)
#endif
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)&ch, 1, 500);
 8001128:	1d39      	adds	r1, r7, #4
 800112a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800112e:	2201      	movs	r2, #1
 8001130:	4803      	ldr	r0, [pc, #12]	; (8001140 <__io_putchar+0x20>)
 8001132:	f001 fc37 	bl	80029a4 <HAL_UART_Transmit>

	return ch;
 8001136:	687b      	ldr	r3, [r7, #4]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	200004f8 	.word	0x200004f8

08001144 <Goto_Application>:

// Function to jump to the application
static void Goto_Application(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	printf("Jumping to the application!");
 800114a:	481a      	ldr	r0, [pc, #104]	; (80011b4 <Goto_Application+0x70>)
 800114c:	f001 fe6e 	bl	8002e2c <iprintf>
	void (*AppReset_Handler)(void) = (void*)(*((volatile uint32_t*)(EXT_APP_START_ADD + 4U)));
 8001150:	4b19      	ldr	r3, [pc, #100]	; (80011b8 <Goto_Application+0x74>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	607b      	str	r3, [r7, #4]
	if(AppReset_Handler == (void*)0xFFFFFFFF)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800115c:	d103      	bne.n	8001166 <Goto_Application+0x22>

	{
		printf("Error: Invalid application!");
 800115e:	4817      	ldr	r0, [pc, #92]	; (80011bc <Goto_Application+0x78>)
 8001160:	f001 fe64 	bl	8002e2c <iprintf>
		while(1);
 8001164:	e7fe      	b.n	8001164 <Goto_Application+0x20>
	}
	// De-init all the peripherals and clock system
	HAL_RCC_DeInit();
 8001166:	f000 ff23 	bl	8001fb0 <HAL_RCC_DeInit>
	HAL_DeInit();
 800116a:	f000 f9f9 	bl	8001560 <HAL_DeInit>
	// Turn off all the fault handler
	SCB->SHCSR &= ~( SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk ) ;
 800116e:	4b14      	ldr	r3, [pc, #80]	; (80011c0 <Goto_Application+0x7c>)
 8001170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <Goto_Application+0x7c>)
 8001174:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 8001178:	6253      	str	r3, [r2, #36]	; 0x24
	// Set main stack pointer
	__set_MSP(*(volatile uint32_t*) EXT_APP_START_ADD);
 800117a:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <Goto_Application+0x80>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	f383 8808 	msr	MSP, r3
}
 8001186:	bf00      	nop
	// Clear sysTick timer
	SysTick->CTRL = 0;
 8001188:	4b0f      	ldr	r3, [pc, #60]	; (80011c8 <Goto_Application+0x84>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 800118e:	4b0e      	ldr	r3, [pc, #56]	; (80011c8 <Goto_Application+0x84>)
 8001190:	2200      	movs	r2, #0
 8001192:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <Goto_Application+0x84>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800119a:	2200      	movs	r2, #0
 800119c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80011a0:	480a      	ldr	r0, [pc, #40]	; (80011cc <Goto_Application+0x88>)
 80011a2:	f000 fed3 	bl	8001f4c <HAL_GPIO_WritePin>

	AppReset_Handler();
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4798      	blx	r3
}
 80011aa:	bf00      	nop
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	080042a8 	.word	0x080042a8
 80011b8:	08006404 	.word	0x08006404
 80011bc:	080042c4 	.word	0x080042c4
 80011c0:	e000ed00 	.word	0xe000ed00
 80011c4:	08006400 	.word	0x08006400
 80011c8:	e000e010 	.word	0xe000e010
 80011cc:	40011000 	.word	0x40011000

080011d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80011d4:	b672      	cpsid	i
}
 80011d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d8:	e7fe      	b.n	80011d8 <Error_Handler+0x8>
	...

080011dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011e2:	4b15      	ldr	r3, [pc, #84]	; (8001238 <HAL_MspInit+0x5c>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_MspInit+0x5c>)
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6193      	str	r3, [r2, #24]
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_MspInit+0x5c>)
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	f003 0301 	and.w	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
 80011f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_MspInit+0x5c>)
 80011fc:	69db      	ldr	r3, [r3, #28]
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <HAL_MspInit+0x5c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	61d3      	str	r3, [r2, #28]
 8001206:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <HAL_MspInit+0x5c>)
 8001208:	69db      	ldr	r3, [r3, #28]
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	607b      	str	r3, [r7, #4]
 8001210:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_MspInit+0x60>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	60fb      	str	r3, [r7, #12]
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	4a04      	ldr	r2, [pc, #16]	; (800123c <HAL_MspInit+0x60>)
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	40021000 	.word	0x40021000
 800123c:	40010000 	.word	0x40010000

08001240 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08a      	sub	sp, #40	; 0x28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0318 	add.w	r3, r7, #24
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a38      	ldr	r2, [pc, #224]	; (800133c <HAL_UART_MspInit+0xfc>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d132      	bne.n	80012c6 <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001260:	4b37      	ldr	r3, [pc, #220]	; (8001340 <HAL_UART_MspInit+0x100>)
 8001262:	699b      	ldr	r3, [r3, #24]
 8001264:	4a36      	ldr	r2, [pc, #216]	; (8001340 <HAL_UART_MspInit+0x100>)
 8001266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800126a:	6193      	str	r3, [r2, #24]
 800126c:	4b34      	ldr	r3, [pc, #208]	; (8001340 <HAL_UART_MspInit+0x100>)
 800126e:	699b      	ldr	r3, [r3, #24]
 8001270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001274:	617b      	str	r3, [r7, #20]
 8001276:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001278:	4b31      	ldr	r3, [pc, #196]	; (8001340 <HAL_UART_MspInit+0x100>)
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	4a30      	ldr	r2, [pc, #192]	; (8001340 <HAL_UART_MspInit+0x100>)
 800127e:	f043 0304 	orr.w	r3, r3, #4
 8001282:	6193      	str	r3, [r2, #24]
 8001284:	4b2e      	ldr	r3, [pc, #184]	; (8001340 <HAL_UART_MspInit+0x100>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	f003 0304 	and.w	r3, r3, #4
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001290:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800129a:	2303      	movs	r3, #3
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800129e:	f107 0318 	add.w	r3, r7, #24
 80012a2:	4619      	mov	r1, r3
 80012a4:	4827      	ldr	r0, [pc, #156]	; (8001344 <HAL_UART_MspInit+0x104>)
 80012a6:	f000 fccd 	bl	8001c44 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b8:	f107 0318 	add.w	r3, r7, #24
 80012bc:	4619      	mov	r1, r3
 80012be:	4821      	ldr	r0, [pc, #132]	; (8001344 <HAL_UART_MspInit+0x104>)
 80012c0:	f000 fcc0 	bl	8001c44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80012c4:	e036      	b.n	8001334 <HAL_UART_MspInit+0xf4>
  else if(huart->Instance==USART3)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a1f      	ldr	r2, [pc, #124]	; (8001348 <HAL_UART_MspInit+0x108>)
 80012cc:	4293      	cmp	r3, r2
 80012ce:	d131      	bne.n	8001334 <HAL_UART_MspInit+0xf4>
    __HAL_RCC_USART3_CLK_ENABLE();
 80012d0:	4b1b      	ldr	r3, [pc, #108]	; (8001340 <HAL_UART_MspInit+0x100>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4a1a      	ldr	r2, [pc, #104]	; (8001340 <HAL_UART_MspInit+0x100>)
 80012d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012da:	61d3      	str	r3, [r2, #28]
 80012dc:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_UART_MspInit+0x100>)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_UART_MspInit+0x100>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a14      	ldr	r2, [pc, #80]	; (8001340 <HAL_UART_MspInit+0x100>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b12      	ldr	r3, [pc, #72]	; (8001340 <HAL_UART_MspInit+0x100>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	60bb      	str	r3, [r7, #8]
 80012fe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001304:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130a:	2303      	movs	r3, #3
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0318 	add.w	r3, r7, #24
 8001312:	4619      	mov	r1, r3
 8001314:	480d      	ldr	r0, [pc, #52]	; (800134c <HAL_UART_MspInit+0x10c>)
 8001316:	f000 fc95 	bl	8001c44 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800131a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800131e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001320:	2300      	movs	r3, #0
 8001322:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	4619      	mov	r1, r3
 800132e:	4807      	ldr	r0, [pc, #28]	; (800134c <HAL_UART_MspInit+0x10c>)
 8001330:	f000 fc88 	bl	8001c44 <HAL_GPIO_Init>
}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	; 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40013800 	.word	0x40013800
 8001340:	40021000 	.word	0x40021000
 8001344:	40010800 	.word	0x40010800
 8001348:	40004800 	.word	0x40004800
 800134c:	40010c00 	.word	0x40010c00

08001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001354:	e7fe      	b.n	8001354 <NMI_Handler+0x4>

08001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001356:	b480      	push	{r7}
 8001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800135a:	e7fe      	b.n	800135a <HardFault_Handler+0x4>

0800135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <MemManage_Handler+0x4>

08001362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <BusFault_Handler+0x4>

08001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <UsageFault_Handler+0x4>

0800136e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bc80      	pop	{r7}
 8001378:	4770      	bx	lr

0800137a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	bc80      	pop	{r7}
 8001384:	4770      	bx	lr

08001386 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001386:	b480      	push	{r7}
 8001388:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800138a:	bf00      	nop
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001396:	f000 f931 	bl	80015fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}

0800139e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b086      	sub	sp, #24
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	60f8      	str	r0, [r7, #12]
 80013a6:	60b9      	str	r1, [r7, #8]
 80013a8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e00a      	b.n	80013c6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013b0:	f3af 8000 	nop.w
 80013b4:	4601      	mov	r1, r0
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	1c5a      	adds	r2, r3, #1
 80013ba:	60ba      	str	r2, [r7, #8]
 80013bc:	b2ca      	uxtb	r2, r1
 80013be:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3301      	adds	r3, #1
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	dbf0      	blt.n	80013b0 <_read+0x12>
  }

  return len;
 80013ce:	687b      	ldr	r3, [r7, #4]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3718      	adds	r7, #24
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
 80013e8:	e009      	b.n	80013fe <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	1c5a      	adds	r2, r3, #1
 80013ee:	60ba      	str	r2, [r7, #8]
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	4618      	mov	r0, r3
 80013f4:	f7ff fe94 	bl	8001120 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	3301      	adds	r3, #1
 80013fc:	617b      	str	r3, [r7, #20]
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	429a      	cmp	r2, r3
 8001404:	dbf1      	blt.n	80013ea <_write+0x12>
  }
  return len;
 8001406:	687b      	ldr	r3, [r7, #4]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <_close>:

int _close(int file)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001418:	f04f 33ff 	mov.w	r3, #4294967295
}
 800141c:	4618      	mov	r0, r3
 800141e:	370c      	adds	r7, #12
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001436:	605a      	str	r2, [r3, #4]
  return 0;
 8001438:	2300      	movs	r3, #0
}
 800143a:	4618      	mov	r0, r3
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <_isatty>:

int _isatty(int file)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800144c:	2301      	movs	r3, #1
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	bc80      	pop	{r7}
 8001456:	4770      	bx	lr

08001458 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001458:	b480      	push	{r7}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <_sbrk+0x5c>)
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <_sbrk+0x60>)
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001484:	4b13      	ldr	r3, [pc, #76]	; (80014d4 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d102      	bne.n	8001492 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800148c:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <_sbrk+0x64>)
 800148e:	4a12      	ldr	r2, [pc, #72]	; (80014d8 <_sbrk+0x68>)
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001492:	4b10      	ldr	r3, [pc, #64]	; (80014d4 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	429a      	cmp	r2, r3
 800149e:	d207      	bcs.n	80014b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014a0:	f001 fc92 	bl	8002dc8 <__errno>
 80014a4:	4603      	mov	r3, r0
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014aa:	f04f 33ff 	mov.w	r3, #4294967295
 80014ae:	e009      	b.n	80014c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014b0:	4b08      	ldr	r3, [pc, #32]	; (80014d4 <_sbrk+0x64>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b6:	4b07      	ldr	r3, [pc, #28]	; (80014d4 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	4a05      	ldr	r2, [pc, #20]	; (80014d4 <_sbrk+0x64>)
 80014c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014c2:	68fb      	ldr	r3, [r7, #12]
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	20005000 	.word	0x20005000
 80014d0:	00000400 	.word	0x00000400
 80014d4:	20000544 	.word	0x20000544
 80014d8:	20000580 	.word	0x20000580

080014dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr

080014e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014e8:	f7ff fff8 	bl	80014dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014ec:	480b      	ldr	r0, [pc, #44]	; (800151c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80014ee:	490c      	ldr	r1, [pc, #48]	; (8001520 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80014f0:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <LoopFillZerobss+0x16>)
  movs r3, #0
 80014f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f4:	e002      	b.n	80014fc <LoopCopyDataInit>

080014f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fa:	3304      	adds	r3, #4

080014fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001500:	d3f9      	bcc.n	80014f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001502:	4a09      	ldr	r2, [pc, #36]	; (8001528 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001504:	4c09      	ldr	r4, [pc, #36]	; (800152c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001508:	e001      	b.n	800150e <LoopFillZerobss>

0800150a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800150c:	3204      	adds	r2, #4

0800150e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800150e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001510:	d3fb      	bcc.n	800150a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001512:	f001 fc5f 	bl	8002dd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001516:	f7ff fc9d 	bl	8000e54 <main>
  bx lr
 800151a:	4770      	bx	lr
  ldr r0, =_sdata
 800151c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001520:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001524:	080047ac 	.word	0x080047ac
  ldr r2, =_sbss
 8001528:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800152c:	20000580 	.word	0x20000580

08001530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001530:	e7fe      	b.n	8001530 <ADC1_2_IRQHandler>
	...

08001534 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	; (800155c <HAL_Init+0x28>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	; (800155c <HAL_Init+0x28>)
 800153e:	f043 0310 	orr.w	r3, r3, #16
 8001542:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 f949 	bl	80017dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	200f      	movs	r0, #15
 800154c:	f000 f826 	bl	800159c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fe44 	bl	80011dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40022000 	.word	0x40022000

08001560 <HAL_DeInit>:
  *        of time base.
  * @note This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_DeInit+0x2c>)
 8001566:	f04f 32ff 	mov.w	r2, #4294967295
 800156a:	611a      	str	r2, [r3, #16]
  __HAL_RCC_APB1_RELEASE_RESET();
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_DeInit+0x2c>)
 800156e:	2200      	movs	r2, #0
 8001570:	611a      	str	r2, [r3, #16]

  __HAL_RCC_APB2_FORCE_RESET();
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_DeInit+0x2c>)
 8001574:	f04f 32ff 	mov.w	r2, #4294967295
 8001578:	60da      	str	r2, [r3, #12]
  __HAL_RCC_APB2_RELEASE_RESET();
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <HAL_DeInit+0x2c>)
 800157c:	2200      	movs	r2, #0
 800157e:	60da      	str	r2, [r3, #12]
  __HAL_RCC_AHB_FORCE_RESET();
  __HAL_RCC_AHB_RELEASE_RESET();
#endif

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8001580:	f000 f806 	bl	8001590 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8001584:	2300      	movs	r3, #0
}
 8001586:	4618      	mov	r0, r3
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000

08001590 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	bc80      	pop	{r7}
 800159a:	4770      	bx	lr

0800159c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015a4:	4b12      	ldr	r3, [pc, #72]	; (80015f0 <HAL_InitTick+0x54>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4b12      	ldr	r3, [pc, #72]	; (80015f4 <HAL_InitTick+0x58>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	4619      	mov	r1, r3
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ba:	4618      	mov	r0, r3
 80015bc:	f000 f935 	bl	800182a <HAL_SYSTICK_Config>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e00e      	b.n	80015e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2b0f      	cmp	r3, #15
 80015ce:	d80a      	bhi.n	80015e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015d0:	2200      	movs	r2, #0
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	f04f 30ff 	mov.w	r0, #4294967295
 80015d8:	f000 f90b 	bl	80017f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015dc:	4a06      	ldr	r2, [pc, #24]	; (80015f8 <HAL_InitTick+0x5c>)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015e2:	2300      	movs	r3, #0
 80015e4:	e000      	b.n	80015e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000004 	.word	0x20000004
 80015f4:	2000000c 	.word	0x2000000c
 80015f8:	20000008 	.word	0x20000008

080015fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <HAL_IncTick+0x1c>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	4b05      	ldr	r3, [pc, #20]	; (800161c <HAL_IncTick+0x20>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4413      	add	r3, r2
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_IncTick+0x20>)
 800160e:	6013      	str	r3, [r2, #0]
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	2000000c 	.word	0x2000000c
 800161c:	20000548 	.word	0x20000548

08001620 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  return uwTick;
 8001624:	4b02      	ldr	r3, [pc, #8]	; (8001630 <HAL_GetTick+0x10>)
 8001626:	681b      	ldr	r3, [r3, #0]
}
 8001628:	4618      	mov	r0, r3
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr
 8001630:	20000548 	.word	0x20000548

08001634 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800163c:	f7ff fff0 	bl	8001620 <HAL_GetTick>
 8001640:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800164c:	d005      	beq.n	800165a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800164e:	4b0a      	ldr	r3, [pc, #40]	; (8001678 <HAL_Delay+0x44>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	461a      	mov	r2, r3
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	4413      	add	r3, r2
 8001658:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800165a:	bf00      	nop
 800165c:	f7ff ffe0 	bl	8001620 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	429a      	cmp	r2, r3
 800166a:	d8f7      	bhi.n	800165c <HAL_Delay+0x28>
  {
  }
}
 800166c:	bf00      	nop
 800166e:	bf00      	nop
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	2000000c 	.word	0x2000000c

0800167c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	f003 0307 	and.w	r3, r3, #7
 800168a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800168c:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001698:	4013      	ands	r3, r2
 800169a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ae:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <__NVIC_SetPriorityGrouping+0x44>)
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	60d3      	str	r3, [r2, #12]
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	e000ed00 	.word	0xe000ed00

080016c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016c8:	4b04      	ldr	r3, [pc, #16]	; (80016dc <__NVIC_GetPriorityGrouping+0x18>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	0a1b      	lsrs	r3, r3, #8
 80016ce:	f003 0307 	and.w	r3, r3, #7
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bc80      	pop	{r7}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	e000ed00 	.word	0xe000ed00

080016e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	4603      	mov	r3, r0
 80016e8:	6039      	str	r1, [r7, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	db0a      	blt.n	800170a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	b2da      	uxtb	r2, r3
 80016f8:	490c      	ldr	r1, [pc, #48]	; (800172c <__NVIC_SetPriority+0x4c>)
 80016fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fe:	0112      	lsls	r2, r2, #4
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	440b      	add	r3, r1
 8001704:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001708:	e00a      	b.n	8001720 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	4908      	ldr	r1, [pc, #32]	; (8001730 <__NVIC_SetPriority+0x50>)
 8001710:	79fb      	ldrb	r3, [r7, #7]
 8001712:	f003 030f 	and.w	r3, r3, #15
 8001716:	3b04      	subs	r3, #4
 8001718:	0112      	lsls	r2, r2, #4
 800171a:	b2d2      	uxtb	r2, r2
 800171c:	440b      	add	r3, r1
 800171e:	761a      	strb	r2, [r3, #24]
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr
 800172a:	bf00      	nop
 800172c:	e000e100 	.word	0xe000e100
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001734:	b480      	push	{r7}
 8001736:	b089      	sub	sp, #36	; 0x24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f003 0307 	and.w	r3, r3, #7
 8001746:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	f1c3 0307 	rsb	r3, r3, #7
 800174e:	2b04      	cmp	r3, #4
 8001750:	bf28      	it	cs
 8001752:	2304      	movcs	r3, #4
 8001754:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001756:	69fb      	ldr	r3, [r7, #28]
 8001758:	3304      	adds	r3, #4
 800175a:	2b06      	cmp	r3, #6
 800175c:	d902      	bls.n	8001764 <NVIC_EncodePriority+0x30>
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	3b03      	subs	r3, #3
 8001762:	e000      	b.n	8001766 <NVIC_EncodePriority+0x32>
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001768:	f04f 32ff 	mov.w	r2, #4294967295
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	fa02 f303 	lsl.w	r3, r2, r3
 8001772:	43da      	mvns	r2, r3
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	401a      	ands	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800177c:	f04f 31ff 	mov.w	r1, #4294967295
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	43d9      	mvns	r1, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800178c:	4313      	orrs	r3, r2
         );
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bc80      	pop	{r7}
 8001796:	4770      	bx	lr

08001798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017a8:	d301      	bcc.n	80017ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017aa:	2301      	movs	r3, #1
 80017ac:	e00f      	b.n	80017ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ae:	4a0a      	ldr	r2, [pc, #40]	; (80017d8 <SysTick_Config+0x40>)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017b6:	210f      	movs	r1, #15
 80017b8:	f04f 30ff 	mov.w	r0, #4294967295
 80017bc:	f7ff ff90 	bl	80016e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017c0:	4b05      	ldr	r3, [pc, #20]	; (80017d8 <SysTick_Config+0x40>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017c6:	4b04      	ldr	r3, [pc, #16]	; (80017d8 <SysTick_Config+0x40>)
 80017c8:	2207      	movs	r2, #7
 80017ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017cc:	2300      	movs	r3, #0
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	e000e010 	.word	0xe000e010

080017dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f7ff ff49 	bl	800167c <__NVIC_SetPriorityGrouping>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b086      	sub	sp, #24
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	60b9      	str	r1, [r7, #8]
 80017fc:	607a      	str	r2, [r7, #4]
 80017fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001800:	2300      	movs	r3, #0
 8001802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001804:	f7ff ff5e 	bl	80016c4 <__NVIC_GetPriorityGrouping>
 8001808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	68b9      	ldr	r1, [r7, #8]
 800180e:	6978      	ldr	r0, [r7, #20]
 8001810:	f7ff ff90 	bl	8001734 <NVIC_EncodePriority>
 8001814:	4602      	mov	r2, r0
 8001816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800181a:	4611      	mov	r1, r2
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff5f 	bl	80016e0 <__NVIC_SetPriority>
}
 8001822:	bf00      	nop
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffb0 	bl	8001798 <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001846:	b087      	sub	sp, #28
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8001856:	2300      	movs	r3, #0
 8001858:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800185e:	4b2f      	ldr	r3, [pc, #188]	; (800191c <HAL_FLASH_Program+0xd8>)
 8001860:	7e1b      	ldrb	r3, [r3, #24]
 8001862:	2b01      	cmp	r3, #1
 8001864:	d101      	bne.n	800186a <HAL_FLASH_Program+0x26>
 8001866:	2302      	movs	r3, #2
 8001868:	e054      	b.n	8001914 <HAL_FLASH_Program+0xd0>
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_FLASH_Program+0xd8>)
 800186c:	2201      	movs	r2, #1
 800186e:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001870:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001874:	f000 f8a8 	bl	80019c8 <FLASH_WaitForLastOperation>
 8001878:	4603      	mov	r3, r0
 800187a:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 800187c:	7dfb      	ldrb	r3, [r7, #23]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d144      	bne.n	800190c <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d102      	bne.n	800188e <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8001888:	2301      	movs	r3, #1
 800188a:	757b      	strb	r3, [r7, #21]
 800188c:	e007      	b.n	800189e <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d102      	bne.n	800189a <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001894:	2302      	movs	r3, #2
 8001896:	757b      	strb	r3, [r7, #21]
 8001898:	e001      	b.n	800189e <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800189a:	2304      	movs	r3, #4
 800189c:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 800189e:	2300      	movs	r3, #0
 80018a0:	75bb      	strb	r3, [r7, #22]
 80018a2:	e02d      	b.n	8001900 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80018a4:	7dbb      	ldrb	r3, [r7, #22]
 80018a6:	005a      	lsls	r2, r3, #1
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	eb02 0c03 	add.w	ip, r2, r3
 80018ae:	7dbb      	ldrb	r3, [r7, #22]
 80018b0:	0119      	lsls	r1, r3, #4
 80018b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018b6:	f1c1 0620 	rsb	r6, r1, #32
 80018ba:	f1a1 0020 	sub.w	r0, r1, #32
 80018be:	fa22 f401 	lsr.w	r4, r2, r1
 80018c2:	fa03 f606 	lsl.w	r6, r3, r6
 80018c6:	4334      	orrs	r4, r6
 80018c8:	fa23 f000 	lsr.w	r0, r3, r0
 80018cc:	4304      	orrs	r4, r0
 80018ce:	fa23 f501 	lsr.w	r5, r3, r1
 80018d2:	b2a3      	uxth	r3, r4
 80018d4:	4619      	mov	r1, r3
 80018d6:	4660      	mov	r0, ip
 80018d8:	f000 f85a 	bl	8001990 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80018dc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80018e0:	f000 f872 	bl	80019c8 <FLASH_WaitForLastOperation>
 80018e4:	4603      	mov	r3, r0
 80018e6:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80018e8:	4b0d      	ldr	r3, [pc, #52]	; (8001920 <HAL_FLASH_Program+0xdc>)
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	4a0c      	ldr	r2, [pc, #48]	; (8001920 <HAL_FLASH_Program+0xdc>)
 80018ee:	f023 0301 	bic.w	r3, r3, #1
 80018f2:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 80018f4:	7dfb      	ldrb	r3, [r7, #23]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d107      	bne.n	800190a <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 80018fa:	7dbb      	ldrb	r3, [r7, #22]
 80018fc:	3301      	adds	r3, #1
 80018fe:	75bb      	strb	r3, [r7, #22]
 8001900:	7dba      	ldrb	r2, [r7, #22]
 8001902:	7d7b      	ldrb	r3, [r7, #21]
 8001904:	429a      	cmp	r2, r3
 8001906:	d3cd      	bcc.n	80018a4 <HAL_FLASH_Program+0x60>
 8001908:	e000      	b.n	800190c <HAL_FLASH_Program+0xc8>
      {
        break;
 800190a:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <HAL_FLASH_Program+0xd8>)
 800190e:	2200      	movs	r2, #0
 8001910:	761a      	strb	r2, [r3, #24]

  return status;
 8001912:	7dfb      	ldrb	r3, [r7, #23]
}
 8001914:	4618      	mov	r0, r3
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800191c:	20000550 	.word	0x20000550
 8001920:	40022000 	.word	0x40022000

08001924 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_FLASH_Unlock+0x40>)
 8001930:	691b      	ldr	r3, [r3, #16]
 8001932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001936:	2b00      	cmp	r3, #0
 8001938:	d00d      	beq.n	8001956 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <HAL_FLASH_Unlock+0x40>)
 800193c:	4a0a      	ldr	r2, [pc, #40]	; (8001968 <HAL_FLASH_Unlock+0x44>)
 800193e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001940:	4b08      	ldr	r3, [pc, #32]	; (8001964 <HAL_FLASH_Unlock+0x40>)
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_FLASH_Unlock+0x48>)
 8001944:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001946:	4b07      	ldr	r3, [pc, #28]	; (8001964 <HAL_FLASH_Unlock+0x40>)
 8001948:	691b      	ldr	r3, [r3, #16]
 800194a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800194e:	2b00      	cmp	r3, #0
 8001950:	d001      	beq.n	8001956 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8001956:	79fb      	ldrb	r3, [r7, #7]
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	bc80      	pop	{r7}
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000
 8001968:	45670123 	.word	0x45670123
 800196c:	cdef89ab 	.word	0xcdef89ab

08001970 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <HAL_FLASH_Lock+0x1c>)
 8001976:	691b      	ldr	r3, [r3, #16]
 8001978:	4a04      	ldr	r2, [pc, #16]	; (800198c <HAL_FLASH_Lock+0x1c>)
 800197a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800197e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	40022000 	.word	0x40022000

08001990 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800199c:	4b08      	ldr	r3, [pc, #32]	; (80019c0 <FLASH_Program_HalfWord+0x30>)
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80019a2:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <FLASH_Program_HalfWord+0x34>)
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <FLASH_Program_HalfWord+0x34>)
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	887a      	ldrh	r2, [r7, #2]
 80019b2:	801a      	strh	r2, [r3, #0]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000550 	.word	0x20000550
 80019c4:	40022000 	.word	0x40022000

080019c8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff fe26 	bl	8001620 <HAL_GetTick>
 80019d4:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80019d6:	e010      	b.n	80019fa <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019de:	d00c      	beq.n	80019fa <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d007      	beq.n	80019f6 <FLASH_WaitForLastOperation+0x2e>
 80019e6:	f7ff fe1b 	bl	8001620 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d201      	bcs.n	80019fa <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e025      	b.n	8001a46 <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <FLASH_WaitForLastOperation+0x88>)
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1e8      	bne.n	80019d8 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001a06:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <FLASH_WaitForLastOperation+0x88>)
 8001a08:	68db      	ldr	r3, [r3, #12]
 8001a0a:	f003 0320 	and.w	r3, r3, #32
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d002      	beq.n	8001a18 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001a12:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <FLASH_WaitForLastOperation+0x88>)
 8001a14:	2220      	movs	r2, #32
 8001a16:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a18:	4b0d      	ldr	r3, [pc, #52]	; (8001a50 <FLASH_WaitForLastOperation+0x88>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	f003 0310 	and.w	r3, r3, #16
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d10b      	bne.n	8001a3c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <FLASH_WaitForLastOperation+0x88>)
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d105      	bne.n	8001a3c <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a30:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <FLASH_WaitForLastOperation+0x88>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d003      	beq.n	8001a44 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001a3c:	f000 f80a 	bl	8001a54 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e000      	b.n	8001a46 <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8001a44:	2300      	movs	r3, #0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40022000 	.word	0x40022000

08001a54 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001a5e:	4b23      	ldr	r3, [pc, #140]	; (8001aec <FLASH_SetErrorCode+0x98>)
 8001a60:	68db      	ldr	r3, [r3, #12]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d009      	beq.n	8001a7e <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <FLASH_SetErrorCode+0x9c>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f043 0302 	orr.w	r3, r3, #2
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <FLASH_SetErrorCode+0x9c>)
 8001a74:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f043 0310 	orr.w	r3, r3, #16
 8001a7c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <FLASH_SetErrorCode+0x98>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	f003 0304 	and.w	r3, r3, #4
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d009      	beq.n	8001a9e <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001a8a:	4b19      	ldr	r3, [pc, #100]	; (8001af0 <FLASH_SetErrorCode+0x9c>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <FLASH_SetErrorCode+0x9c>)
 8001a94:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f043 0304 	orr.w	r3, r3, #4
 8001a9c:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001a9e:	4b13      	ldr	r3, [pc, #76]	; (8001aec <FLASH_SetErrorCode+0x98>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	f003 0301 	and.w	r3, r3, #1
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d00b      	beq.n	8001ac2 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <FLASH_SetErrorCode+0x9c>)
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f043 0304 	orr.w	r3, r3, #4
 8001ab2:	4a0f      	ldr	r2, [pc, #60]	; (8001af0 <FLASH_SetErrorCode+0x9c>)
 8001ab4:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <FLASH_SetErrorCode+0x98>)
 8001ab8:	69db      	ldr	r3, [r3, #28]
 8001aba:	4a0c      	ldr	r2, [pc, #48]	; (8001aec <FLASH_SetErrorCode+0x98>)
 8001abc:	f023 0301 	bic.w	r3, r3, #1
 8001ac0:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f240 1201 	movw	r2, #257	; 0x101
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d106      	bne.n	8001ada <FLASH_SetErrorCode+0x86>
 8001acc:	4b07      	ldr	r3, [pc, #28]	; (8001aec <FLASH_SetErrorCode+0x98>)
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	4a06      	ldr	r2, [pc, #24]	; (8001aec <FLASH_SetErrorCode+0x98>)
 8001ad2:	f023 0301 	bic.w	r3, r3, #1
 8001ad6:	61d3      	str	r3, [r2, #28]
}  
 8001ad8:	e002      	b.n	8001ae0 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001ada:	4a04      	ldr	r2, [pc, #16]	; (8001aec <FLASH_SetErrorCode+0x98>)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	60d3      	str	r3, [r2, #12]
}  
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40022000 	.word	0x40022000
 8001af0:	20000550 	.word	0x20000550

08001af4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
 8001afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001b06:	4b2f      	ldr	r3, [pc, #188]	; (8001bc4 <HAL_FLASHEx_Erase+0xd0>)
 8001b08:	7e1b      	ldrb	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d101      	bne.n	8001b12 <HAL_FLASHEx_Erase+0x1e>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e053      	b.n	8001bba <HAL_FLASHEx_Erase+0xc6>
 8001b12:	4b2c      	ldr	r3, [pc, #176]	; (8001bc4 <HAL_FLASHEx_Erase+0xd0>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d116      	bne.n	8001b4e <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001b20:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b24:	f7ff ff50 	bl	80019c8 <FLASH_WaitForLastOperation>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d141      	bne.n	8001bb2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f000 f84c 	bl	8001bcc <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b38:	f7ff ff46 	bl	80019c8 <FLASH_WaitForLastOperation>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001b40:	4b21      	ldr	r3, [pc, #132]	; (8001bc8 <HAL_FLASHEx_Erase+0xd4>)
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	4a20      	ldr	r2, [pc, #128]	; (8001bc8 <HAL_FLASHEx_Erase+0xd4>)
 8001b46:	f023 0304 	bic.w	r3, r3, #4
 8001b4a:	6113      	str	r3, [r2, #16]
 8001b4c:	e031      	b.n	8001bb2 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001b4e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b52:	f7ff ff39 	bl	80019c8 <FLASH_WaitForLastOperation>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d12a      	bne.n	8001bb2 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8001b62:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	e019      	b.n	8001ba0 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001b6c:	68b8      	ldr	r0, [r7, #8]
 8001b6e:	f000 f849 	bl	8001c04 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b72:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b76:	f7ff ff27 	bl	80019c8 <FLASH_WaitForLastOperation>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <HAL_FLASHEx_Erase+0xd4>)
 8001b80:	691b      	ldr	r3, [r3, #16]
 8001b82:	4a11      	ldr	r2, [pc, #68]	; (8001bc8 <HAL_FLASHEx_Erase+0xd4>)
 8001b84:	f023 0302 	bic.w	r3, r3, #2
 8001b88:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d003      	beq.n	8001b98 <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	601a      	str	r2, [r3, #0]
            break;
 8001b96:	e00c      	b.n	8001bb2 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b9e:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	029a      	lsls	r2, r3, #10
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 8001bac:	68ba      	ldr	r2, [r7, #8]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d3dc      	bcc.n	8001b6c <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001bb2:	4b04      	ldr	r3, [pc, #16]	; (8001bc4 <HAL_FLASHEx_Erase+0xd0>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	761a      	strb	r2, [r3, #24]

  return status;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3710      	adds	r7, #16
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20000550 	.word	0x20000550
 8001bc8:	40022000 	.word	0x40022000

08001bcc <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001bd4:	4b09      	ldr	r3, [pc, #36]	; (8001bfc <FLASH_MassErase+0x30>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <FLASH_MassErase+0x34>)
 8001bdc:	691b      	ldr	r3, [r3, #16]
 8001bde:	4a08      	ldr	r2, [pc, #32]	; (8001c00 <FLASH_MassErase+0x34>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001be6:	4b06      	ldr	r3, [pc, #24]	; (8001c00 <FLASH_MassErase+0x34>)
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	4a05      	ldr	r2, [pc, #20]	; (8001c00 <FLASH_MassErase+0x34>)
 8001bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001bf0:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001bf2:	bf00      	nop
 8001bf4:	370c      	adds	r7, #12
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr
 8001bfc:	20000550 	.word	0x20000550
 8001c00:	40022000 	.word	0x40022000

08001c04 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <FLASH_PageErase+0x38>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001c12:	4b0b      	ldr	r3, [pc, #44]	; (8001c40 <FLASH_PageErase+0x3c>)
 8001c14:	691b      	ldr	r3, [r3, #16]
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <FLASH_PageErase+0x3c>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001c1e:	4a08      	ldr	r2, [pc, #32]	; (8001c40 <FLASH_PageErase+0x3c>)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001c24:	4b06      	ldr	r3, [pc, #24]	; (8001c40 <FLASH_PageErase+0x3c>)
 8001c26:	691b      	ldr	r3, [r3, #16]
 8001c28:	4a05      	ldr	r2, [pc, #20]	; (8001c40 <FLASH_PageErase+0x3c>)
 8001c2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c2e:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bc80      	pop	{r7}
 8001c38:	4770      	bx	lr
 8001c3a:	bf00      	nop
 8001c3c:	20000550 	.word	0x20000550
 8001c40:	40022000 	.word	0x40022000

08001c44 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b08b      	sub	sp, #44	; 0x2c
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c56:	e169      	b.n	8001f2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c58:	2201      	movs	r2, #1
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	69fa      	ldr	r2, [r7, #28]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	f040 8158 	bne.w	8001f26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	4a9a      	ldr	r2, [pc, #616]	; (8001ee4 <HAL_GPIO_Init+0x2a0>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d05e      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001c80:	4a98      	ldr	r2, [pc, #608]	; (8001ee4 <HAL_GPIO_Init+0x2a0>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d875      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001c86:	4a98      	ldr	r2, [pc, #608]	; (8001ee8 <HAL_GPIO_Init+0x2a4>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d058      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001c8c:	4a96      	ldr	r2, [pc, #600]	; (8001ee8 <HAL_GPIO_Init+0x2a4>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d86f      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001c92:	4a96      	ldr	r2, [pc, #600]	; (8001eec <HAL_GPIO_Init+0x2a8>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d052      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001c98:	4a94      	ldr	r2, [pc, #592]	; (8001eec <HAL_GPIO_Init+0x2a8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d869      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001c9e:	4a94      	ldr	r2, [pc, #592]	; (8001ef0 <HAL_GPIO_Init+0x2ac>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d04c      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001ca4:	4a92      	ldr	r2, [pc, #584]	; (8001ef0 <HAL_GPIO_Init+0x2ac>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d863      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001caa:	4a92      	ldr	r2, [pc, #584]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d046      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
 8001cb0:	4a90      	ldr	r2, [pc, #576]	; (8001ef4 <HAL_GPIO_Init+0x2b0>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d85d      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001cb6:	2b12      	cmp	r3, #18
 8001cb8:	d82a      	bhi.n	8001d10 <HAL_GPIO_Init+0xcc>
 8001cba:	2b12      	cmp	r3, #18
 8001cbc:	d859      	bhi.n	8001d72 <HAL_GPIO_Init+0x12e>
 8001cbe:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <HAL_GPIO_Init+0x80>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001d3f 	.word	0x08001d3f
 8001cc8:	08001d19 	.word	0x08001d19
 8001ccc:	08001d2b 	.word	0x08001d2b
 8001cd0:	08001d6d 	.word	0x08001d6d
 8001cd4:	08001d73 	.word	0x08001d73
 8001cd8:	08001d73 	.word	0x08001d73
 8001cdc:	08001d73 	.word	0x08001d73
 8001ce0:	08001d73 	.word	0x08001d73
 8001ce4:	08001d73 	.word	0x08001d73
 8001ce8:	08001d73 	.word	0x08001d73
 8001cec:	08001d73 	.word	0x08001d73
 8001cf0:	08001d73 	.word	0x08001d73
 8001cf4:	08001d73 	.word	0x08001d73
 8001cf8:	08001d73 	.word	0x08001d73
 8001cfc:	08001d73 	.word	0x08001d73
 8001d00:	08001d73 	.word	0x08001d73
 8001d04:	08001d73 	.word	0x08001d73
 8001d08:	08001d21 	.word	0x08001d21
 8001d0c:	08001d35 	.word	0x08001d35
 8001d10:	4a79      	ldr	r2, [pc, #484]	; (8001ef8 <HAL_GPIO_Init+0x2b4>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d16:	e02c      	b.n	8001d72 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	623b      	str	r3, [r7, #32]
          break;
 8001d1e:	e029      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	3304      	adds	r3, #4
 8001d26:	623b      	str	r3, [r7, #32]
          break;
 8001d28:	e024      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	3308      	adds	r3, #8
 8001d30:	623b      	str	r3, [r7, #32]
          break;
 8001d32:	e01f      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	330c      	adds	r3, #12
 8001d3a:	623b      	str	r3, [r7, #32]
          break;
 8001d3c:	e01a      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d102      	bne.n	8001d4c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d46:	2304      	movs	r3, #4
 8001d48:	623b      	str	r3, [r7, #32]
          break;
 8001d4a:	e013      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d54:	2308      	movs	r3, #8
 8001d56:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	69fa      	ldr	r2, [r7, #28]
 8001d5c:	611a      	str	r2, [r3, #16]
          break;
 8001d5e:	e009      	b.n	8001d74 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d60:	2308      	movs	r3, #8
 8001d62:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	615a      	str	r2, [r3, #20]
          break;
 8001d6a:	e003      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	623b      	str	r3, [r7, #32]
          break;
 8001d70:	e000      	b.n	8001d74 <HAL_GPIO_Init+0x130>
          break;
 8001d72:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	2bff      	cmp	r3, #255	; 0xff
 8001d78:	d801      	bhi.n	8001d7e <HAL_GPIO_Init+0x13a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	e001      	b.n	8001d82 <HAL_GPIO_Init+0x13e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	3304      	adds	r3, #4
 8001d82:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	2bff      	cmp	r3, #255	; 0xff
 8001d88:	d802      	bhi.n	8001d90 <HAL_GPIO_Init+0x14c>
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	e002      	b.n	8001d96 <HAL_GPIO_Init+0x152>
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	3b08      	subs	r3, #8
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	210f      	movs	r1, #15
 8001d9e:	693b      	ldr	r3, [r7, #16]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	43db      	mvns	r3, r3
 8001da6:	401a      	ands	r2, r3
 8001da8:	6a39      	ldr	r1, [r7, #32]
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	fa01 f303 	lsl.w	r3, r1, r3
 8001db0:	431a      	orrs	r2, r3
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80b1 	beq.w	8001f26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dc4:	4b4d      	ldr	r3, [pc, #308]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a4c      	ldr	r2, [pc, #304]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b4a      	ldr	r3, [pc, #296]	; (8001efc <HAL_GPIO_Init+0x2b8>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ddc:	4a48      	ldr	r2, [pc, #288]	; (8001f00 <HAL_GPIO_Init+0x2bc>)
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	089b      	lsrs	r3, r3, #2
 8001de2:	3302      	adds	r3, #2
 8001de4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001de8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dec:	f003 0303 	and.w	r3, r3, #3
 8001df0:	009b      	lsls	r3, r3, #2
 8001df2:	220f      	movs	r2, #15
 8001df4:	fa02 f303 	lsl.w	r3, r2, r3
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	68fa      	ldr	r2, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a40      	ldr	r2, [pc, #256]	; (8001f04 <HAL_GPIO_Init+0x2c0>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <HAL_GPIO_Init+0x1ec>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a3f      	ldr	r2, [pc, #252]	; (8001f08 <HAL_GPIO_Init+0x2c4>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00d      	beq.n	8001e2c <HAL_GPIO_Init+0x1e8>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a3e      	ldr	r2, [pc, #248]	; (8001f0c <HAL_GPIO_Init+0x2c8>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d007      	beq.n	8001e28 <HAL_GPIO_Init+0x1e4>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a3d      	ldr	r2, [pc, #244]	; (8001f10 <HAL_GPIO_Init+0x2cc>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d101      	bne.n	8001e24 <HAL_GPIO_Init+0x1e0>
 8001e20:	2303      	movs	r3, #3
 8001e22:	e006      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e24:	2304      	movs	r3, #4
 8001e26:	e004      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e28:	2302      	movs	r3, #2
 8001e2a:	e002      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e000      	b.n	8001e32 <HAL_GPIO_Init+0x1ee>
 8001e30:	2300      	movs	r3, #0
 8001e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e34:	f002 0203 	and.w	r2, r2, #3
 8001e38:	0092      	lsls	r2, r2, #2
 8001e3a:	4093      	lsls	r3, r2
 8001e3c:	68fa      	ldr	r2, [r7, #12]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e42:	492f      	ldr	r1, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x2bc>)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	089b      	lsrs	r3, r3, #2
 8001e48:	3302      	adds	r3, #2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d006      	beq.n	8001e6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e5c:	4b2d      	ldr	r3, [pc, #180]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	492c      	ldr	r1, [pc, #176]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	608b      	str	r3, [r1, #8]
 8001e68:	e006      	b.n	8001e78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e6a:	4b2a      	ldr	r3, [pc, #168]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	43db      	mvns	r3, r3
 8001e72:	4928      	ldr	r1, [pc, #160]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e74:	4013      	ands	r3, r2
 8001e76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d006      	beq.n	8001e92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e84:	4b23      	ldr	r3, [pc, #140]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e86:	68da      	ldr	r2, [r3, #12]
 8001e88:	4922      	ldr	r1, [pc, #136]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	60cb      	str	r3, [r1, #12]
 8001e90:	e006      	b.n	8001ea0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e92:	4b20      	ldr	r3, [pc, #128]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	491e      	ldr	r1, [pc, #120]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d006      	beq.n	8001eba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001eac:	4b19      	ldr	r3, [pc, #100]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001eae:	685a      	ldr	r2, [r3, #4]
 8001eb0:	4918      	ldr	r1, [pc, #96]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001eb2:	69bb      	ldr	r3, [r7, #24]
 8001eb4:	4313      	orrs	r3, r2
 8001eb6:	604b      	str	r3, [r1, #4]
 8001eb8:	e006      	b.n	8001ec8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001eba:	4b16      	ldr	r3, [pc, #88]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001ebc:	685a      	ldr	r2, [r3, #4]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	4914      	ldr	r1, [pc, #80]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d021      	beq.n	8001f18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001ed4:	4b0f      	ldr	r3, [pc, #60]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	490e      	ldr	r1, [pc, #56]	; (8001f14 <HAL_GPIO_Init+0x2d0>)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	600b      	str	r3, [r1, #0]
 8001ee0:	e021      	b.n	8001f26 <HAL_GPIO_Init+0x2e2>
 8001ee2:	bf00      	nop
 8001ee4:	10320000 	.word	0x10320000
 8001ee8:	10310000 	.word	0x10310000
 8001eec:	10220000 	.word	0x10220000
 8001ef0:	10210000 	.word	0x10210000
 8001ef4:	10120000 	.word	0x10120000
 8001ef8:	10110000 	.word	0x10110000
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40010000 	.word	0x40010000
 8001f04:	40010800 	.word	0x40010800
 8001f08:	40010c00 	.word	0x40010c00
 8001f0c:	40011000 	.word	0x40011000
 8001f10:	40011400 	.word	0x40011400
 8001f14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	4909      	ldr	r1, [pc, #36]	; (8001f48 <HAL_GPIO_Init+0x304>)
 8001f22:	4013      	ands	r3, r2
 8001f24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	3301      	adds	r3, #1
 8001f2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	fa22 f303 	lsr.w	r3, r2, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f47f ae8e 	bne.w	8001c58 <HAL_GPIO_Init+0x14>
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	372c      	adds	r7, #44	; 0x2c
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001f68:	e003      	b.n	8001f72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f6a:	887b      	ldrh	r3, [r7, #2]
 8001f6c:	041a      	lsls	r2, r3, #16
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	611a      	str	r2, [r3, #16]
}
 8001f72:	bf00      	nop
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bc80      	pop	{r7}
 8001f7a:	4770      	bx	lr

08001f7c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f8e:	887a      	ldrh	r2, [r7, #2]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	041a      	lsls	r2, r3, #16
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	43d9      	mvns	r1, r3
 8001f9a:	887b      	ldrh	r3, [r7, #2]
 8001f9c:	400b      	ands	r3, r1
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	611a      	str	r2, [r3, #16]
}
 8001fa4:	bf00      	nop
 8001fa6:	3714      	adds	r7, #20
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b082      	sub	sp, #8
 8001fb4:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001fb6:	f7ff fb33 	bl	8001620 <HAL_GetTick>
 8001fba:	6078      	str	r0, [r7, #4]

  /* Set HSION bit */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001fbc:	4b45      	ldr	r3, [pc, #276]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a44      	ldr	r2, [pc, #272]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	6013      	str	r3, [r2, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001fc8:	e008      	b.n	8001fdc <HAL_RCC_DeInit+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fca:	f7ff fb29 	bl	8001620 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_DeInit+0x2c>
    {
      return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e077      	b.n	80020cc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0f0      	beq.n	8001fca <HAL_RCC_DeInit+0x1a>
    }
  }

  /* Set HSITRIM bits to the reset value */
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, (0x10U << RCC_CR_HSITRIM_Pos));
 8001fe8:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001ff0:	4a38      	ldr	r2, [pc, #224]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8001ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ff6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8001ff8:	f7ff fb12 	bl	8001620 <HAL_GetTick>
 8001ffc:	6078      	str	r0, [r7, #4]

  /* Reset CFGR register */
  CLEAR_REG(RCC->CFGR);
 8001ffe:	4b35      	ldr	r3, [pc, #212]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8002000:	2200      	movs	r2, #0
 8002002:	605a      	str	r2, [r3, #4]

  /* Wait till clock switch is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 8002004:	e00a      	b.n	800201c <HAL_RCC_DeInit+0x6c>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002006:	f7ff fb0b 	bl	8001620 <HAL_GetTick>
 800200a:	4602      	mov	r2, r0
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	f241 3288 	movw	r2, #5000	; 0x1388
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_DeInit+0x6c>
    {
      return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e057      	b.n	80020cc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
 800201c:	4b2d      	ldr	r3, [pc, #180]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 030c 	and.w	r3, r3, #12
 8002024:	2b00      	cmp	r3, #0
 8002026:	d1ee      	bne.n	8002006 <HAL_RCC_DeInit+0x56>
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8002028:	4b2b      	ldr	r3, [pc, #172]	; (80020d8 <HAL_RCC_DeInit+0x128>)
 800202a:	4a2c      	ldr	r2, [pc, #176]	; (80020dc <HAL_RCC_DeInit+0x12c>)
 800202c:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800202e:	4b2c      	ldr	r3, [pc, #176]	; (80020e0 <HAL_RCC_DeInit+0x130>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fab2 	bl	800159c <HAL_InitTick>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <HAL_RCC_DeInit+0x92>
  {
    return HAL_ERROR;
 800203e:	2301      	movs	r3, #1
 8002040:	e044      	b.n	80020cc <HAL_RCC_DeInit+0x11c>
  }

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 8002042:	f7ff faed 	bl	8001620 <HAL_GetTick>
 8002046:	6078      	str	r0, [r7, #4]

  /* Second step is to clear PLLON bit */
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8002048:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a21      	ldr	r2, [pc, #132]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 800204e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002052:	6013      	str	r3, [r2, #0]

  /* Wait till PLL is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002054:	e008      	b.n	8002068 <HAL_RCC_DeInit+0xb8>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002056:	f7ff fae3 	bl	8001620 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_DeInit+0xb8>
    {
      return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e031      	b.n	80020cc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1f0      	bne.n	8002056 <HAL_RCC_DeInit+0xa6>
    }
  }

  /* Ensure to reset PLLSRC and PLLMUL bits */
  CLEAR_REG(RCC->CFGR);
 8002074:	4b17      	ldr	r3, [pc, #92]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8002076:	2200      	movs	r2, #0
 8002078:	605a      	str	r2, [r3, #4]

  /* Get Start Tick */
  tickstart = HAL_GetTick();
 800207a:	f7ff fad1 	bl	8001620 <HAL_GetTick>
 800207e:	6078      	str	r0, [r7, #4]

  /* Reset HSEON & CSSON bits */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_CSSON);
 8002080:	4b14      	ldr	r3, [pc, #80]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 8002086:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800208a:	6013      	str	r3, [r2, #0]

  /* Wait till HSE is disabled */
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 800208c:	e008      	b.n	80020a0 <HAL_RCC_DeInit+0xf0>
  {
    if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800208e:	f7ff fac7 	bl	8001620 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b64      	cmp	r3, #100	; 0x64
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_DeInit+0xf0>
    {
      return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e015      	b.n	80020cc <HAL_RCC_DeInit+0x11c>
  while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 80020a0:	4b0c      	ldr	r3, [pc, #48]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1f0      	bne.n	800208e <HAL_RCC_DeInit+0xde>
    }
  }

  /* Reset HSEBYP bit */
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);
 80020ac:	4b09      	ldr	r3, [pc, #36]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a08      	ldr	r2, [pc, #32]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 80020b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b6:	6013      	str	r3, [r2, #0]
  /* Reset CFGR2 register */
  CLEAR_REG(RCC->CFGR2);
#endif /* RCC_CFGR2_PREDIV1 */

  /* Reset all CSR flags */
  SET_BIT(RCC->CSR, RCC_CSR_RMVF);
 80020b8:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020bc:	4a05      	ldr	r2, [pc, #20]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 80020be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020c2:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable all interrupts */
  CLEAR_REG(RCC->CIR);
 80020c4:	4b03      	ldr	r3, [pc, #12]	; (80020d4 <HAL_RCC_DeInit+0x124>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]

  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	3708      	adds	r7, #8
 80020d0:	46bd      	mov	sp, r7
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	40021000 	.word	0x40021000
 80020d8:	20000004 	.word	0x20000004
 80020dc:	007a1200 	.word	0x007a1200
 80020e0:	20000008 	.word	0x20000008

080020e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e272      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 8087 	beq.w	8002212 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002104:	4b92      	ldr	r3, [pc, #584]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b04      	cmp	r3, #4
 800210e:	d00c      	beq.n	800212a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002110:	4b8f      	ldr	r3, [pc, #572]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 030c 	and.w	r3, r3, #12
 8002118:	2b08      	cmp	r3, #8
 800211a:	d112      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e>
 800211c:	4b8c      	ldr	r3, [pc, #560]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002128:	d10b      	bne.n	8002142 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800212a:	4b89      	ldr	r3, [pc, #548]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d06c      	beq.n	8002210 <HAL_RCC_OscConfig+0x12c>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d168      	bne.n	8002210 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e24c      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800214a:	d106      	bne.n	800215a <HAL_RCC_OscConfig+0x76>
 800214c:	4b80      	ldr	r3, [pc, #512]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a7f      	ldr	r2, [pc, #508]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002156:	6013      	str	r3, [r2, #0]
 8002158:	e02e      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d10c      	bne.n	800217c <HAL_RCC_OscConfig+0x98>
 8002162:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a7a      	ldr	r2, [pc, #488]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216c:	6013      	str	r3, [r2, #0]
 800216e:	4b78      	ldr	r3, [pc, #480]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a77      	ldr	r2, [pc, #476]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002174:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002178:	6013      	str	r3, [r2, #0]
 800217a:	e01d      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002184:	d10c      	bne.n	80021a0 <HAL_RCC_OscConfig+0xbc>
 8002186:	4b72      	ldr	r3, [pc, #456]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a71      	ldr	r2, [pc, #452]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800218c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002190:	6013      	str	r3, [r2, #0]
 8002192:	4b6f      	ldr	r3, [pc, #444]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a6e      	ldr	r2, [pc, #440]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002198:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219c:	6013      	str	r3, [r2, #0]
 800219e:	e00b      	b.n	80021b8 <HAL_RCC_OscConfig+0xd4>
 80021a0:	4b6b      	ldr	r3, [pc, #428]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a6a      	ldr	r2, [pc, #424]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021aa:	6013      	str	r3, [r2, #0]
 80021ac:	4b68      	ldr	r3, [pc, #416]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a67      	ldr	r2, [pc, #412]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80021b6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d013      	beq.n	80021e8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff fa2e 	bl	8001620 <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021c8:	f7ff fa2a 	bl	8001620 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b64      	cmp	r3, #100	; 0x64
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e200      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b5d      	ldr	r3, [pc, #372]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0f0      	beq.n	80021c8 <HAL_RCC_OscConfig+0xe4>
 80021e6:	e014      	b.n	8002212 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e8:	f7ff fa1a 	bl	8001620 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f0:	f7ff fa16 	bl	8001620 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b64      	cmp	r3, #100	; 0x64
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e1ec      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002202:	4b53      	ldr	r3, [pc, #332]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d1f0      	bne.n	80021f0 <HAL_RCC_OscConfig+0x10c>
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002210:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d063      	beq.n	80022e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800221e:	4b4c      	ldr	r3, [pc, #304]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 030c 	and.w	r3, r3, #12
 8002226:	2b00      	cmp	r3, #0
 8002228:	d00b      	beq.n	8002242 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800222a:	4b49      	ldr	r3, [pc, #292]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b08      	cmp	r3, #8
 8002234:	d11c      	bne.n	8002270 <HAL_RCC_OscConfig+0x18c>
 8002236:	4b46      	ldr	r3, [pc, #280]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d116      	bne.n	8002270 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002242:	4b43      	ldr	r3, [pc, #268]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0302 	and.w	r3, r3, #2
 800224a:	2b00      	cmp	r3, #0
 800224c:	d005      	beq.n	800225a <HAL_RCC_OscConfig+0x176>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	691b      	ldr	r3, [r3, #16]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d001      	beq.n	800225a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e1c0      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800225a:	4b3d      	ldr	r3, [pc, #244]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4939      	ldr	r1, [pc, #228]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800226e:	e03a      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d020      	beq.n	80022ba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002278:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_RCC_OscConfig+0x270>)
 800227a:	2201      	movs	r2, #1
 800227c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227e:	f7ff f9cf 	bl	8001620 <HAL_GetTick>
 8002282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002284:	e008      	b.n	8002298 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002286:	f7ff f9cb 	bl	8001620 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d901      	bls.n	8002298 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e1a1      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002298:	4b2d      	ldr	r3, [pc, #180]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0f0      	beq.n	8002286 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a4:	4b2a      	ldr	r3, [pc, #168]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	695b      	ldr	r3, [r3, #20]
 80022b0:	00db      	lsls	r3, r3, #3
 80022b2:	4927      	ldr	r1, [pc, #156]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	600b      	str	r3, [r1, #0]
 80022b8:	e015      	b.n	80022e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <HAL_RCC_OscConfig+0x270>)
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff f9ae 	bl	8001620 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c8:	f7ff f9aa 	bl	8001620 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e180      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0308 	and.w	r3, r3, #8
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d03a      	beq.n	8002368 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	699b      	ldr	r3, [r3, #24]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d019      	beq.n	800232e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022fa:	4b17      	ldr	r3, [pc, #92]	; (8002358 <HAL_RCC_OscConfig+0x274>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002300:	f7ff f98e 	bl	8001620 <HAL_GetTick>
 8002304:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002306:	e008      	b.n	800231a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002308:	f7ff f98a 	bl	8001620 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	693b      	ldr	r3, [r7, #16]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d901      	bls.n	800231a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	e160      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800231a:	4b0d      	ldr	r3, [pc, #52]	; (8002350 <HAL_RCC_OscConfig+0x26c>)
 800231c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0f0      	beq.n	8002308 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002326:	2001      	movs	r0, #1
 8002328:	f000 face 	bl	80028c8 <RCC_Delay>
 800232c:	e01c      	b.n	8002368 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_RCC_OscConfig+0x274>)
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002334:	f7ff f974 	bl	8001620 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233a:	e00f      	b.n	800235c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7ff f970 	bl	8001620 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d908      	bls.n	800235c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e146      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	42420000 	.word	0x42420000
 8002358:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800235c:	4b92      	ldr	r3, [pc, #584]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d1e9      	bne.n	800233c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 80a6 	beq.w	80024c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002376:	2300      	movs	r3, #0
 8002378:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800237a:	4b8b      	ldr	r3, [pc, #556]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10d      	bne.n	80023a2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002386:	4b88      	ldr	r3, [pc, #544]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	4a87      	ldr	r2, [pc, #540]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	61d3      	str	r3, [r2, #28]
 8002392:	4b85      	ldr	r3, [pc, #532]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	60bb      	str	r3, [r7, #8]
 800239c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800239e:	2301      	movs	r3, #1
 80023a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023a2:	4b82      	ldr	r3, [pc, #520]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d118      	bne.n	80023e0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023ae:	4b7f      	ldr	r3, [pc, #508]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7e      	ldr	r2, [pc, #504]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023ba:	f7ff f931 	bl	8001620 <HAL_GetTick>
 80023be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c0:	e008      	b.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c2:	f7ff f92d 	bl	8001620 <HAL_GetTick>
 80023c6:	4602      	mov	r2, r0
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	2b64      	cmp	r3, #100	; 0x64
 80023ce:	d901      	bls.n	80023d4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e103      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023d4:	4b75      	ldr	r3, [pc, #468]	; (80025ac <HAL_RCC_OscConfig+0x4c8>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d0f0      	beq.n	80023c2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	2b01      	cmp	r3, #1
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x312>
 80023e8:	4b6f      	ldr	r3, [pc, #444]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	6a1b      	ldr	r3, [r3, #32]
 80023ec:	4a6e      	ldr	r2, [pc, #440]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80023ee:	f043 0301 	orr.w	r3, r3, #1
 80023f2:	6213      	str	r3, [r2, #32]
 80023f4:	e02d      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x334>
 80023fe:	4b6a      	ldr	r3, [pc, #424]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a69      	ldr	r2, [pc, #420]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b67      	ldr	r3, [pc, #412]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a66      	ldr	r2, [pc, #408]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	e01c      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	2b05      	cmp	r3, #5
 800241e:	d10c      	bne.n	800243a <HAL_RCC_OscConfig+0x356>
 8002420:	4b61      	ldr	r3, [pc, #388]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	4a60      	ldr	r2, [pc, #384]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002426:	f043 0304 	orr.w	r3, r3, #4
 800242a:	6213      	str	r3, [r2, #32]
 800242c:	4b5e      	ldr	r3, [pc, #376]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	4a5d      	ldr	r2, [pc, #372]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	f043 0301 	orr.w	r3, r3, #1
 8002436:	6213      	str	r3, [r2, #32]
 8002438:	e00b      	b.n	8002452 <HAL_RCC_OscConfig+0x36e>
 800243a:	4b5b      	ldr	r3, [pc, #364]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800243c:	6a1b      	ldr	r3, [r3, #32]
 800243e:	4a5a      	ldr	r2, [pc, #360]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002440:	f023 0301 	bic.w	r3, r3, #1
 8002444:	6213      	str	r3, [r2, #32]
 8002446:	4b58      	ldr	r3, [pc, #352]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a57      	ldr	r2, [pc, #348]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0304 	bic.w	r3, r3, #4
 8002450:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d015      	beq.n	8002486 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800245a:	f7ff f8e1 	bl	8001620 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	e00a      	b.n	8002478 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002462:	f7ff f8dd 	bl	8001620 <HAL_GetTick>
 8002466:	4602      	mov	r2, r0
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	1ad3      	subs	r3, r2, r3
 800246c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002470:	4293      	cmp	r3, r2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e0b1      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002478:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0ee      	beq.n	8002462 <HAL_RCC_OscConfig+0x37e>
 8002484:	e014      	b.n	80024b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002486:	f7ff f8cb 	bl	8001620 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800248c:	e00a      	b.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248e:	f7ff f8c7 	bl	8001620 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	f241 3288 	movw	r2, #5000	; 0x1388
 800249c:	4293      	cmp	r3, r2
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e09b      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024a4:	4b40      	ldr	r3, [pc, #256]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f003 0302 	and.w	r3, r3, #2
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1ee      	bne.n	800248e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b0:	7dfb      	ldrb	r3, [r7, #23]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d105      	bne.n	80024c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b6:	4b3c      	ldr	r3, [pc, #240]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4a3b      	ldr	r2, [pc, #236]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69db      	ldr	r3, [r3, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	f000 8087 	beq.w	80025da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024cc:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f003 030c 	and.w	r3, r3, #12
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d061      	beq.n	800259c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d146      	bne.n	800256e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e0:	4b33      	ldr	r3, [pc, #204]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024e6:	f7ff f89b 	bl	8001620 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024ee:	f7ff f897 	bl	8001620 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e06d      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d1f0      	bne.n	80024ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002514:	d108      	bne.n	8002528 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002516:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	4921      	ldr	r1, [pc, #132]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002524:	4313      	orrs	r3, r2
 8002526:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a19      	ldr	r1, [r3, #32]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002538:	430b      	orrs	r3, r1
 800253a:	491b      	ldr	r1, [pc, #108]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 800253c:	4313      	orrs	r3, r2
 800253e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002540:	4b1b      	ldr	r3, [pc, #108]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 8002542:	2201      	movs	r2, #1
 8002544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002546:	f7ff f86b 	bl	8001620 <HAL_GetTick>
 800254a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800254c:	e008      	b.n	8002560 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800254e:	f7ff f867 	bl	8001620 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	693b      	ldr	r3, [r7, #16]
 8002556:	1ad3      	subs	r3, r2, r3
 8002558:	2b02      	cmp	r3, #2
 800255a:	d901      	bls.n	8002560 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e03d      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002560:	4b11      	ldr	r3, [pc, #68]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d0f0      	beq.n	800254e <HAL_RCC_OscConfig+0x46a>
 800256c:	e035      	b.n	80025da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800256e:	4b10      	ldr	r3, [pc, #64]	; (80025b0 <HAL_RCC_OscConfig+0x4cc>)
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002574:	f7ff f854 	bl	8001620 <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257c:	f7ff f850 	bl	8001620 <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e026      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_OscConfig+0x4c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x498>
 800259a:	e01e      	b.n	80025da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d107      	bne.n	80025b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025a4:	2301      	movs	r3, #1
 80025a6:	e019      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	40007000 	.word	0x40007000
 80025b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x500>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a1b      	ldr	r3, [r3, #32]
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d001      	beq.n	80025da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e000      	b.n	80025dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	40021000 	.word	0x40021000

080025e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e0d0      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025fc:	4b6a      	ldr	r3, [pc, #424]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	683a      	ldr	r2, [r7, #0]
 8002606:	429a      	cmp	r2, r3
 8002608:	d910      	bls.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800260a:	4b67      	ldr	r3, [pc, #412]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f023 0207 	bic.w	r2, r3, #7
 8002612:	4965      	ldr	r1, [pc, #404]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800261a:	4b63      	ldr	r3, [pc, #396]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0307 	and.w	r3, r3, #7
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	429a      	cmp	r2, r3
 8002626:	d001      	beq.n	800262c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e0b8      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d020      	beq.n	800267a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0304 	and.w	r3, r3, #4
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002644:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	4a58      	ldr	r2, [pc, #352]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800264a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800264e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d005      	beq.n	8002668 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800265c:	4b53      	ldr	r3, [pc, #332]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002662:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002666:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002668:	4b50      	ldr	r3, [pc, #320]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	494d      	ldr	r1, [pc, #308]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002676:	4313      	orrs	r3, r2
 8002678:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0301 	and.w	r3, r3, #1
 8002682:	2b00      	cmp	r3, #0
 8002684:	d040      	beq.n	8002708 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d107      	bne.n	800269e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800268e:	4b47      	ldr	r3, [pc, #284]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d115      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e07f      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026a6:	4b41      	ldr	r3, [pc, #260]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d109      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e073      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026b6:	4b3d      	ldr	r3, [pc, #244]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e06b      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026c6:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f023 0203 	bic.w	r2, r3, #3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	4936      	ldr	r1, [pc, #216]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	4313      	orrs	r3, r2
 80026d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026d8:	f7fe ffa2 	bl	8001620 <HAL_GetTick>
 80026dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026de:	e00a      	b.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e0:	f7fe ff9e 	bl	8001620 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e053      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026f6:	4b2d      	ldr	r3, [pc, #180]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f003 020c 	and.w	r2, r3, #12
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	429a      	cmp	r2, r3
 8002706:	d1eb      	bne.n	80026e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002708:	4b27      	ldr	r3, [pc, #156]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d210      	bcs.n	8002738 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002716:	4b24      	ldr	r3, [pc, #144]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f023 0207 	bic.w	r2, r3, #7
 800271e:	4922      	ldr	r1, [pc, #136]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	4313      	orrs	r3, r2
 8002724:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002726:	4b20      	ldr	r3, [pc, #128]	; (80027a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0307 	and.w	r3, r3, #7
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	429a      	cmp	r2, r3
 8002732:	d001      	beq.n	8002738 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e032      	b.n	800279e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002744:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	68db      	ldr	r3, [r3, #12]
 8002750:	4916      	ldr	r1, [pc, #88]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0308 	and.w	r3, r3, #8
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002762:	4b12      	ldr	r3, [pc, #72]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	691b      	ldr	r3, [r3, #16]
 800276e:	00db      	lsls	r3, r3, #3
 8002770:	490e      	ldr	r1, [pc, #56]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 8002772:	4313      	orrs	r3, r2
 8002774:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002776:	f000 f821 	bl	80027bc <HAL_RCC_GetSysClockFreq>
 800277a:	4602      	mov	r2, r0
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_ClockConfig+0x1c4>)
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	091b      	lsrs	r3, r3, #4
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	490a      	ldr	r1, [pc, #40]	; (80027b0 <HAL_RCC_ClockConfig+0x1c8>)
 8002788:	5ccb      	ldrb	r3, [r1, r3]
 800278a:	fa22 f303 	lsr.w	r3, r2, r3
 800278e:	4a09      	ldr	r2, [pc, #36]	; (80027b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <HAL_RCC_ClockConfig+0x1d0>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7fe ff00 	bl	800159c <HAL_InitTick>

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40022000 	.word	0x40022000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	080046e0 	.word	0x080046e0
 80027b4:	20000004 	.word	0x20000004
 80027b8:	20000008 	.word	0x20000008

080027bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	2300      	movs	r3, #0
 80027c8:	60bb      	str	r3, [r7, #8]
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCC_GetSysClockFreq+0x94>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f003 030c 	and.w	r3, r3, #12
 80027e2:	2b04      	cmp	r3, #4
 80027e4:	d002      	beq.n	80027ec <HAL_RCC_GetSysClockFreq+0x30>
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	d003      	beq.n	80027f2 <HAL_RCC_GetSysClockFreq+0x36>
 80027ea:	e027      	b.n	800283c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ee:	613b      	str	r3, [r7, #16]
      break;
 80027f0:	e027      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	0c9b      	lsrs	r3, r3, #18
 80027f6:	f003 030f 	and.w	r3, r3, #15
 80027fa:	4a17      	ldr	r2, [pc, #92]	; (8002858 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027fc:	5cd3      	ldrb	r3, [r2, r3]
 80027fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d010      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800280a:	4b11      	ldr	r3, [pc, #68]	; (8002850 <HAL_RCC_GetSysClockFreq+0x94>)
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	0c5b      	lsrs	r3, r3, #17
 8002810:	f003 0301 	and.w	r3, r3, #1
 8002814:	4a11      	ldr	r2, [pc, #68]	; (800285c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002816:	5cd3      	ldrb	r3, [r2, r3]
 8002818:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <HAL_RCC_GetSysClockFreq+0x98>)
 800281e:	fb03 f202 	mul.w	r2, r3, r2
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	617b      	str	r3, [r7, #20]
 800282a:	e004      	b.n	8002836 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a0c      	ldr	r2, [pc, #48]	; (8002860 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002830:	fb02 f303 	mul.w	r3, r2, r3
 8002834:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	613b      	str	r3, [r7, #16]
      break;
 800283a:	e002      	b.n	8002842 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800283c:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetSysClockFreq+0x98>)
 800283e:	613b      	str	r3, [r7, #16]
      break;
 8002840:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002842:	693b      	ldr	r3, [r7, #16]
}
 8002844:	4618      	mov	r0, r3
 8002846:	371c      	adds	r7, #28
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr
 800284e:	bf00      	nop
 8002850:	40021000 	.word	0x40021000
 8002854:	007a1200 	.word	0x007a1200
 8002858:	080046f8 	.word	0x080046f8
 800285c:	08004708 	.word	0x08004708
 8002860:	003d0900 	.word	0x003d0900

08002864 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002868:	4b02      	ldr	r3, [pc, #8]	; (8002874 <HAL_RCC_GetHCLKFreq+0x10>)
 800286a:	681b      	ldr	r3, [r3, #0]
}
 800286c:	4618      	mov	r0, r3
 800286e:	46bd      	mov	sp, r7
 8002870:	bc80      	pop	{r7}
 8002872:	4770      	bx	lr
 8002874:	20000004 	.word	0x20000004

08002878 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800287c:	f7ff fff2 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b05      	ldr	r3, [pc, #20]	; (8002898 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	4903      	ldr	r1, [pc, #12]	; (800289c <HAL_RCC_GetPCLK1Freq+0x24>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002894:	4618      	mov	r0, r3
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40021000 	.word	0x40021000
 800289c:	080046f0 	.word	0x080046f0

080028a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028a4:	f7ff ffde 	bl	8002864 <HAL_RCC_GetHCLKFreq>
 80028a8:	4602      	mov	r2, r0
 80028aa:	4b05      	ldr	r3, [pc, #20]	; (80028c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	0adb      	lsrs	r3, r3, #11
 80028b0:	f003 0307 	and.w	r3, r3, #7
 80028b4:	4903      	ldr	r1, [pc, #12]	; (80028c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b6:	5ccb      	ldrb	r3, [r1, r3]
 80028b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028bc:	4618      	mov	r0, r3
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40021000 	.word	0x40021000
 80028c4:	080046f0 	.word	0x080046f0

080028c8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <RCC_Delay+0x34>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a0a      	ldr	r2, [pc, #40]	; (8002900 <RCC_Delay+0x38>)
 80028d6:	fba2 2303 	umull	r2, r3, r2, r3
 80028da:	0a5b      	lsrs	r3, r3, #9
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	fb02 f303 	mul.w	r3, r2, r3
 80028e2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80028e4:	bf00      	nop
  }
  while (Delay --);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	1e5a      	subs	r2, r3, #1
 80028ea:	60fa      	str	r2, [r7, #12]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f9      	bne.n	80028e4 <RCC_Delay+0x1c>
}
 80028f0:	bf00      	nop
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	20000004 	.word	0x20000004
 8002900:	10624dd3 	.word	0x10624dd3

08002904 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b082      	sub	sp, #8
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e042      	b.n	800299c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800291c:	b2db      	uxtb	r3, r3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d106      	bne.n	8002930 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f7fe fc88 	bl	8001240 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2224      	movs	r2, #36	; 0x24
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68da      	ldr	r2, [r3, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002946:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f000 f9af 	bl	8002cac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	691a      	ldr	r2, [r3, #16]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800295c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	695a      	ldr	r2, [r3, #20]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800296c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68da      	ldr	r2, [r3, #12]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800297c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2220      	movs	r2, #32
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3708      	adds	r7, #8
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08a      	sub	sp, #40	; 0x28
 80029a8:	af02      	add	r7, sp, #8
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	4613      	mov	r3, r2
 80029b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b20      	cmp	r3, #32
 80029c2:	d16d      	bne.n	8002aa0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <HAL_UART_Transmit+0x2c>
 80029ca:	88fb      	ldrh	r3, [r7, #6]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d101      	bne.n	80029d4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e066      	b.n	8002aa2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2221      	movs	r2, #33	; 0x21
 80029de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029e2:	f7fe fe1d 	bl	8001620 <HAL_GetTick>
 80029e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	88fa      	ldrh	r2, [r7, #6]
 80029ec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	88fa      	ldrh	r2, [r7, #6]
 80029f2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029fc:	d108      	bne.n	8002a10 <HAL_UART_Transmit+0x6c>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d104      	bne.n	8002a10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a06:	2300      	movs	r3, #0
 8002a08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	61bb      	str	r3, [r7, #24]
 8002a0e:	e003      	b.n	8002a18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a18:	e02a      	b.n	8002a70 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2200      	movs	r2, #0
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	68f8      	ldr	r0, [r7, #12]
 8002a26:	f000 f8d2 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e036      	b.n	8002aa2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10b      	bne.n	8002a52 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	881b      	ldrh	r3, [r3, #0]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	61bb      	str	r3, [r7, #24]
 8002a50:	e007      	b.n	8002a62 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	b29a      	uxth	r2, r3
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1cf      	bne.n	8002a1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	2200      	movs	r2, #0
 8002a82:	2140      	movs	r1, #64	; 0x40
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 f8a2 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e006      	b.n	8002aa2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2220      	movs	r2, #32
 8002a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	e000      	b.n	8002aa2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002aa0:	2302      	movs	r3, #2
  }
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3720      	adds	r7, #32
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b08a      	sub	sp, #40	; 0x28
 8002aae:	af02      	add	r7, sp, #8
 8002ab0:	60f8      	str	r0, [r7, #12]
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	603b      	str	r3, [r7, #0]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	2b20      	cmp	r3, #32
 8002ac8:	d17c      	bne.n	8002bc4 <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d002      	beq.n	8002ad6 <HAL_UART_Receive+0x2c>
 8002ad0:	88fb      	ldrh	r3, [r7, #6]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e075      	b.n	8002bc6 <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2222      	movs	r2, #34	; 0x22
 8002ae4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2200      	movs	r2, #0
 8002aec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002aee:	f7fe fd97 	bl	8001620 <HAL_GetTick>
 8002af2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	88fa      	ldrh	r2, [r7, #6]
 8002afe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b08:	d108      	bne.n	8002b1c <HAL_UART_Receive+0x72>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d104      	bne.n	8002b1c <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002b12:	2300      	movs	r3, #0
 8002b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	61bb      	str	r3, [r7, #24]
 8002b1a:	e003      	b.n	8002b24 <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002b24:	e043      	b.n	8002bae <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2120      	movs	r1, #32
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f84c 	bl	8002bce <UART_WaitOnFlagUntilTimeout>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002b3c:	2303      	movs	r3, #3
 8002b3e:	e042      	b.n	8002bc6 <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10c      	bne.n	8002b60 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	b29b      	uxth	r3, r3
 8002b4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	3302      	adds	r3, #2
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	e01f      	b.n	8002ba0 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d007      	beq.n	8002b7a <HAL_UART_Receive+0xd0>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10a      	bne.n	8002b88 <HAL_UART_Receive+0xde>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d106      	bne.n	8002b88 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	b2da      	uxtb	r2, r3
 8002b82:	69fb      	ldr	r3, [r7, #28]
 8002b84:	701a      	strb	r2, [r3, #0]
 8002b86:	e008      	b.n	8002b9a <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002bb2:	b29b      	uxth	r3, r3
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d1b6      	bne.n	8002b26 <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b090      	sub	sp, #64	; 0x40
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bde:	e050      	b.n	8002c82 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d04c      	beq.n	8002c82 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d007      	beq.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x30>
 8002bee:	f7fe fd17 	bl	8001620 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d241      	bcs.n	8002c82 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	330c      	adds	r3, #12
 8002c04:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c08:	e853 3f00 	ldrex	r3, [r3]
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002c14:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	330c      	adds	r3, #12
 8002c1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002c1e:	637a      	str	r2, [r7, #52]	; 0x34
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002c24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c26:	e841 2300 	strex	r3, r2, [r1]
 8002c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e5      	bne.n	8002bfe <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	3314      	adds	r3, #20
 8002c38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	613b      	str	r3, [r7, #16]
   return(result);
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	3314      	adds	r3, #20
 8002c50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c52:	623a      	str	r2, [r7, #32]
 8002c54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	69f9      	ldr	r1, [r7, #28]
 8002c58:	6a3a      	ldr	r2, [r7, #32]
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e5      	bne.n	8002c32 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2220      	movs	r2, #32
 8002c6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2220      	movs	r2, #32
 8002c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e00f      	b.n	8002ca2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	68ba      	ldr	r2, [r7, #8]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	bf0c      	ite	eq
 8002c92:	2301      	moveq	r3, #1
 8002c94:	2300      	movne	r3, #0
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	461a      	mov	r2, r3
 8002c9a:	79fb      	ldrb	r3, [r7, #7]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d09f      	beq.n	8002be0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3740      	adds	r7, #64	; 0x40
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	430a      	orrs	r2, r1
 8002cc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689a      	ldr	r2, [r3, #8]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	431a      	orrs	r2, r3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002ce6:	f023 030c 	bic.w	r3, r3, #12
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	6812      	ldr	r2, [r2, #0]
 8002cee:	68b9      	ldr	r1, [r7, #8]
 8002cf0:	430b      	orrs	r3, r1
 8002cf2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	699a      	ldr	r2, [r3, #24]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	430a      	orrs	r2, r1
 8002d08:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a2c      	ldr	r2, [pc, #176]	; (8002dc0 <UART_SetConfig+0x114>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d103      	bne.n	8002d1c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d14:	f7ff fdc4 	bl	80028a0 <HAL_RCC_GetPCLK2Freq>
 8002d18:	60f8      	str	r0, [r7, #12]
 8002d1a:	e002      	b.n	8002d22 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002d1c:	f7ff fdac 	bl	8002878 <HAL_RCC_GetPCLK1Freq>
 8002d20:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009a      	lsls	r2, r3, #2
 8002d2c:	441a      	add	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d38:	4a22      	ldr	r2, [pc, #136]	; (8002dc4 <UART_SetConfig+0x118>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	0119      	lsls	r1, r3, #4
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	009a      	lsls	r2, r3, #2
 8002d4c:	441a      	add	r2, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d58:	4b1a      	ldr	r3, [pc, #104]	; (8002dc4 <UART_SetConfig+0x118>)
 8002d5a:	fba3 0302 	umull	r0, r3, r3, r2
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2064      	movs	r0, #100	; 0x64
 8002d62:	fb00 f303 	mul.w	r3, r0, r3
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	011b      	lsls	r3, r3, #4
 8002d6a:	3332      	adds	r3, #50	; 0x32
 8002d6c:	4a15      	ldr	r2, [pc, #84]	; (8002dc4 <UART_SetConfig+0x118>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	095b      	lsrs	r3, r3, #5
 8002d74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d78:	4419      	add	r1, r3
 8002d7a:	68fa      	ldr	r2, [r7, #12]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009a      	lsls	r2, r3, #2
 8002d84:	441a      	add	r2, r3
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	009b      	lsls	r3, r3, #2
 8002d8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <UART_SetConfig+0x118>)
 8002d92:	fba3 0302 	umull	r0, r3, r3, r2
 8002d96:	095b      	lsrs	r3, r3, #5
 8002d98:	2064      	movs	r0, #100	; 0x64
 8002d9a:	fb00 f303 	mul.w	r3, r0, r3
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	3332      	adds	r3, #50	; 0x32
 8002da4:	4a07      	ldr	r2, [pc, #28]	; (8002dc4 <UART_SetConfig+0x118>)
 8002da6:	fba2 2303 	umull	r2, r3, r2, r3
 8002daa:	095b      	lsrs	r3, r3, #5
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	440a      	add	r2, r1
 8002db6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002db8:	bf00      	nop
 8002dba:	3710      	adds	r7, #16
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	40013800 	.word	0x40013800
 8002dc4:	51eb851f 	.word	0x51eb851f

08002dc8 <__errno>:
 8002dc8:	4b01      	ldr	r3, [pc, #4]	; (8002dd0 <__errno+0x8>)
 8002dca:	6818      	ldr	r0, [r3, #0]
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	20000010 	.word	0x20000010

08002dd4 <__libc_init_array>:
 8002dd4:	b570      	push	{r4, r5, r6, lr}
 8002dd6:	2600      	movs	r6, #0
 8002dd8:	4d0c      	ldr	r5, [pc, #48]	; (8002e0c <__libc_init_array+0x38>)
 8002dda:	4c0d      	ldr	r4, [pc, #52]	; (8002e10 <__libc_init_array+0x3c>)
 8002ddc:	1b64      	subs	r4, r4, r5
 8002dde:	10a4      	asrs	r4, r4, #2
 8002de0:	42a6      	cmp	r6, r4
 8002de2:	d109      	bne.n	8002df8 <__libc_init_array+0x24>
 8002de4:	f001 f82c 	bl	8003e40 <_init>
 8002de8:	2600      	movs	r6, #0
 8002dea:	4d0a      	ldr	r5, [pc, #40]	; (8002e14 <__libc_init_array+0x40>)
 8002dec:	4c0a      	ldr	r4, [pc, #40]	; (8002e18 <__libc_init_array+0x44>)
 8002dee:	1b64      	subs	r4, r4, r5
 8002df0:	10a4      	asrs	r4, r4, #2
 8002df2:	42a6      	cmp	r6, r4
 8002df4:	d105      	bne.n	8002e02 <__libc_init_array+0x2e>
 8002df6:	bd70      	pop	{r4, r5, r6, pc}
 8002df8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002dfc:	4798      	blx	r3
 8002dfe:	3601      	adds	r6, #1
 8002e00:	e7ee      	b.n	8002de0 <__libc_init_array+0xc>
 8002e02:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e06:	4798      	blx	r3
 8002e08:	3601      	adds	r6, #1
 8002e0a:	e7f2      	b.n	8002df2 <__libc_init_array+0x1e>
 8002e0c:	080047a4 	.word	0x080047a4
 8002e10:	080047a4 	.word	0x080047a4
 8002e14:	080047a4 	.word	0x080047a4
 8002e18:	080047a8 	.word	0x080047a8

08002e1c <memset>:
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	4402      	add	r2, r0
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d100      	bne.n	8002e26 <memset+0xa>
 8002e24:	4770      	bx	lr
 8002e26:	f803 1b01 	strb.w	r1, [r3], #1
 8002e2a:	e7f9      	b.n	8002e20 <memset+0x4>

08002e2c <iprintf>:
 8002e2c:	b40f      	push	{r0, r1, r2, r3}
 8002e2e:	4b0a      	ldr	r3, [pc, #40]	; (8002e58 <iprintf+0x2c>)
 8002e30:	b513      	push	{r0, r1, r4, lr}
 8002e32:	681c      	ldr	r4, [r3, #0]
 8002e34:	b124      	cbz	r4, 8002e40 <iprintf+0x14>
 8002e36:	69a3      	ldr	r3, [r4, #24]
 8002e38:	b913      	cbnz	r3, 8002e40 <iprintf+0x14>
 8002e3a:	4620      	mov	r0, r4
 8002e3c:	f000 fa5a 	bl	80032f4 <__sinit>
 8002e40:	ab05      	add	r3, sp, #20
 8002e42:	4620      	mov	r0, r4
 8002e44:	9a04      	ldr	r2, [sp, #16]
 8002e46:	68a1      	ldr	r1, [r4, #8]
 8002e48:	9301      	str	r3, [sp, #4]
 8002e4a:	f000 fc5d 	bl	8003708 <_vfiprintf_r>
 8002e4e:	b002      	add	sp, #8
 8002e50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e54:	b004      	add	sp, #16
 8002e56:	4770      	bx	lr
 8002e58:	20000010 	.word	0x20000010

08002e5c <_puts_r>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	460e      	mov	r6, r1
 8002e60:	4605      	mov	r5, r0
 8002e62:	b118      	cbz	r0, 8002e6c <_puts_r+0x10>
 8002e64:	6983      	ldr	r3, [r0, #24]
 8002e66:	b90b      	cbnz	r3, 8002e6c <_puts_r+0x10>
 8002e68:	f000 fa44 	bl	80032f4 <__sinit>
 8002e6c:	69ab      	ldr	r3, [r5, #24]
 8002e6e:	68ac      	ldr	r4, [r5, #8]
 8002e70:	b913      	cbnz	r3, 8002e78 <_puts_r+0x1c>
 8002e72:	4628      	mov	r0, r5
 8002e74:	f000 fa3e 	bl	80032f4 <__sinit>
 8002e78:	4b2c      	ldr	r3, [pc, #176]	; (8002f2c <_puts_r+0xd0>)
 8002e7a:	429c      	cmp	r4, r3
 8002e7c:	d120      	bne.n	8002ec0 <_puts_r+0x64>
 8002e7e:	686c      	ldr	r4, [r5, #4]
 8002e80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002e82:	07db      	lsls	r3, r3, #31
 8002e84:	d405      	bmi.n	8002e92 <_puts_r+0x36>
 8002e86:	89a3      	ldrh	r3, [r4, #12]
 8002e88:	0598      	lsls	r0, r3, #22
 8002e8a:	d402      	bmi.n	8002e92 <_puts_r+0x36>
 8002e8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002e8e:	f000 facf 	bl	8003430 <__retarget_lock_acquire_recursive>
 8002e92:	89a3      	ldrh	r3, [r4, #12]
 8002e94:	0719      	lsls	r1, r3, #28
 8002e96:	d51d      	bpl.n	8002ed4 <_puts_r+0x78>
 8002e98:	6923      	ldr	r3, [r4, #16]
 8002e9a:	b1db      	cbz	r3, 8002ed4 <_puts_r+0x78>
 8002e9c:	3e01      	subs	r6, #1
 8002e9e:	68a3      	ldr	r3, [r4, #8]
 8002ea0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002ea4:	3b01      	subs	r3, #1
 8002ea6:	60a3      	str	r3, [r4, #8]
 8002ea8:	bb39      	cbnz	r1, 8002efa <_puts_r+0x9e>
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	da38      	bge.n	8002f20 <_puts_r+0xc4>
 8002eae:	4622      	mov	r2, r4
 8002eb0:	210a      	movs	r1, #10
 8002eb2:	4628      	mov	r0, r5
 8002eb4:	f000 f848 	bl	8002f48 <__swbuf_r>
 8002eb8:	3001      	adds	r0, #1
 8002eba:	d011      	beq.n	8002ee0 <_puts_r+0x84>
 8002ebc:	250a      	movs	r5, #10
 8002ebe:	e011      	b.n	8002ee4 <_puts_r+0x88>
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <_puts_r+0xd4>)
 8002ec2:	429c      	cmp	r4, r3
 8002ec4:	d101      	bne.n	8002eca <_puts_r+0x6e>
 8002ec6:	68ac      	ldr	r4, [r5, #8]
 8002ec8:	e7da      	b.n	8002e80 <_puts_r+0x24>
 8002eca:	4b1a      	ldr	r3, [pc, #104]	; (8002f34 <_puts_r+0xd8>)
 8002ecc:	429c      	cmp	r4, r3
 8002ece:	bf08      	it	eq
 8002ed0:	68ec      	ldreq	r4, [r5, #12]
 8002ed2:	e7d5      	b.n	8002e80 <_puts_r+0x24>
 8002ed4:	4621      	mov	r1, r4
 8002ed6:	4628      	mov	r0, r5
 8002ed8:	f000 f888 	bl	8002fec <__swsetup_r>
 8002edc:	2800      	cmp	r0, #0
 8002ede:	d0dd      	beq.n	8002e9c <_puts_r+0x40>
 8002ee0:	f04f 35ff 	mov.w	r5, #4294967295
 8002ee4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002ee6:	07da      	lsls	r2, r3, #31
 8002ee8:	d405      	bmi.n	8002ef6 <_puts_r+0x9a>
 8002eea:	89a3      	ldrh	r3, [r4, #12]
 8002eec:	059b      	lsls	r3, r3, #22
 8002eee:	d402      	bmi.n	8002ef6 <_puts_r+0x9a>
 8002ef0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002ef2:	f000 fa9e 	bl	8003432 <__retarget_lock_release_recursive>
 8002ef6:	4628      	mov	r0, r5
 8002ef8:	bd70      	pop	{r4, r5, r6, pc}
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	da04      	bge.n	8002f08 <_puts_r+0xac>
 8002efe:	69a2      	ldr	r2, [r4, #24]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	dc06      	bgt.n	8002f12 <_puts_r+0xb6>
 8002f04:	290a      	cmp	r1, #10
 8002f06:	d004      	beq.n	8002f12 <_puts_r+0xb6>
 8002f08:	6823      	ldr	r3, [r4, #0]
 8002f0a:	1c5a      	adds	r2, r3, #1
 8002f0c:	6022      	str	r2, [r4, #0]
 8002f0e:	7019      	strb	r1, [r3, #0]
 8002f10:	e7c5      	b.n	8002e9e <_puts_r+0x42>
 8002f12:	4622      	mov	r2, r4
 8002f14:	4628      	mov	r0, r5
 8002f16:	f000 f817 	bl	8002f48 <__swbuf_r>
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d1bf      	bne.n	8002e9e <_puts_r+0x42>
 8002f1e:	e7df      	b.n	8002ee0 <_puts_r+0x84>
 8002f20:	250a      	movs	r5, #10
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	6022      	str	r2, [r4, #0]
 8002f28:	701d      	strb	r5, [r3, #0]
 8002f2a:	e7db      	b.n	8002ee4 <_puts_r+0x88>
 8002f2c:	08004730 	.word	0x08004730
 8002f30:	08004750 	.word	0x08004750
 8002f34:	08004710 	.word	0x08004710

08002f38 <puts>:
 8002f38:	4b02      	ldr	r3, [pc, #8]	; (8002f44 <puts+0xc>)
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	6818      	ldr	r0, [r3, #0]
 8002f3e:	f7ff bf8d 	b.w	8002e5c <_puts_r>
 8002f42:	bf00      	nop
 8002f44:	20000010 	.word	0x20000010

08002f48 <__swbuf_r>:
 8002f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f4a:	460e      	mov	r6, r1
 8002f4c:	4614      	mov	r4, r2
 8002f4e:	4605      	mov	r5, r0
 8002f50:	b118      	cbz	r0, 8002f5a <__swbuf_r+0x12>
 8002f52:	6983      	ldr	r3, [r0, #24]
 8002f54:	b90b      	cbnz	r3, 8002f5a <__swbuf_r+0x12>
 8002f56:	f000 f9cd 	bl	80032f4 <__sinit>
 8002f5a:	4b21      	ldr	r3, [pc, #132]	; (8002fe0 <__swbuf_r+0x98>)
 8002f5c:	429c      	cmp	r4, r3
 8002f5e:	d12b      	bne.n	8002fb8 <__swbuf_r+0x70>
 8002f60:	686c      	ldr	r4, [r5, #4]
 8002f62:	69a3      	ldr	r3, [r4, #24]
 8002f64:	60a3      	str	r3, [r4, #8]
 8002f66:	89a3      	ldrh	r3, [r4, #12]
 8002f68:	071a      	lsls	r2, r3, #28
 8002f6a:	d52f      	bpl.n	8002fcc <__swbuf_r+0x84>
 8002f6c:	6923      	ldr	r3, [r4, #16]
 8002f6e:	b36b      	cbz	r3, 8002fcc <__swbuf_r+0x84>
 8002f70:	6923      	ldr	r3, [r4, #16]
 8002f72:	6820      	ldr	r0, [r4, #0]
 8002f74:	b2f6      	uxtb	r6, r6
 8002f76:	1ac0      	subs	r0, r0, r3
 8002f78:	6963      	ldr	r3, [r4, #20]
 8002f7a:	4637      	mov	r7, r6
 8002f7c:	4283      	cmp	r3, r0
 8002f7e:	dc04      	bgt.n	8002f8a <__swbuf_r+0x42>
 8002f80:	4621      	mov	r1, r4
 8002f82:	4628      	mov	r0, r5
 8002f84:	f000 f922 	bl	80031cc <_fflush_r>
 8002f88:	bb30      	cbnz	r0, 8002fd8 <__swbuf_r+0x90>
 8002f8a:	68a3      	ldr	r3, [r4, #8]
 8002f8c:	3001      	adds	r0, #1
 8002f8e:	3b01      	subs	r3, #1
 8002f90:	60a3      	str	r3, [r4, #8]
 8002f92:	6823      	ldr	r3, [r4, #0]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	6022      	str	r2, [r4, #0]
 8002f98:	701e      	strb	r6, [r3, #0]
 8002f9a:	6963      	ldr	r3, [r4, #20]
 8002f9c:	4283      	cmp	r3, r0
 8002f9e:	d004      	beq.n	8002faa <__swbuf_r+0x62>
 8002fa0:	89a3      	ldrh	r3, [r4, #12]
 8002fa2:	07db      	lsls	r3, r3, #31
 8002fa4:	d506      	bpl.n	8002fb4 <__swbuf_r+0x6c>
 8002fa6:	2e0a      	cmp	r6, #10
 8002fa8:	d104      	bne.n	8002fb4 <__swbuf_r+0x6c>
 8002faa:	4621      	mov	r1, r4
 8002fac:	4628      	mov	r0, r5
 8002fae:	f000 f90d 	bl	80031cc <_fflush_r>
 8002fb2:	b988      	cbnz	r0, 8002fd8 <__swbuf_r+0x90>
 8002fb4:	4638      	mov	r0, r7
 8002fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fb8:	4b0a      	ldr	r3, [pc, #40]	; (8002fe4 <__swbuf_r+0x9c>)
 8002fba:	429c      	cmp	r4, r3
 8002fbc:	d101      	bne.n	8002fc2 <__swbuf_r+0x7a>
 8002fbe:	68ac      	ldr	r4, [r5, #8]
 8002fc0:	e7cf      	b.n	8002f62 <__swbuf_r+0x1a>
 8002fc2:	4b09      	ldr	r3, [pc, #36]	; (8002fe8 <__swbuf_r+0xa0>)
 8002fc4:	429c      	cmp	r4, r3
 8002fc6:	bf08      	it	eq
 8002fc8:	68ec      	ldreq	r4, [r5, #12]
 8002fca:	e7ca      	b.n	8002f62 <__swbuf_r+0x1a>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 f80c 	bl	8002fec <__swsetup_r>
 8002fd4:	2800      	cmp	r0, #0
 8002fd6:	d0cb      	beq.n	8002f70 <__swbuf_r+0x28>
 8002fd8:	f04f 37ff 	mov.w	r7, #4294967295
 8002fdc:	e7ea      	b.n	8002fb4 <__swbuf_r+0x6c>
 8002fde:	bf00      	nop
 8002fe0:	08004730 	.word	0x08004730
 8002fe4:	08004750 	.word	0x08004750
 8002fe8:	08004710 	.word	0x08004710

08002fec <__swsetup_r>:
 8002fec:	4b32      	ldr	r3, [pc, #200]	; (80030b8 <__swsetup_r+0xcc>)
 8002fee:	b570      	push	{r4, r5, r6, lr}
 8002ff0:	681d      	ldr	r5, [r3, #0]
 8002ff2:	4606      	mov	r6, r0
 8002ff4:	460c      	mov	r4, r1
 8002ff6:	b125      	cbz	r5, 8003002 <__swsetup_r+0x16>
 8002ff8:	69ab      	ldr	r3, [r5, #24]
 8002ffa:	b913      	cbnz	r3, 8003002 <__swsetup_r+0x16>
 8002ffc:	4628      	mov	r0, r5
 8002ffe:	f000 f979 	bl	80032f4 <__sinit>
 8003002:	4b2e      	ldr	r3, [pc, #184]	; (80030bc <__swsetup_r+0xd0>)
 8003004:	429c      	cmp	r4, r3
 8003006:	d10f      	bne.n	8003028 <__swsetup_r+0x3c>
 8003008:	686c      	ldr	r4, [r5, #4]
 800300a:	89a3      	ldrh	r3, [r4, #12]
 800300c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003010:	0719      	lsls	r1, r3, #28
 8003012:	d42c      	bmi.n	800306e <__swsetup_r+0x82>
 8003014:	06dd      	lsls	r5, r3, #27
 8003016:	d411      	bmi.n	800303c <__swsetup_r+0x50>
 8003018:	2309      	movs	r3, #9
 800301a:	6033      	str	r3, [r6, #0]
 800301c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003020:	f04f 30ff 	mov.w	r0, #4294967295
 8003024:	81a3      	strh	r3, [r4, #12]
 8003026:	e03e      	b.n	80030a6 <__swsetup_r+0xba>
 8003028:	4b25      	ldr	r3, [pc, #148]	; (80030c0 <__swsetup_r+0xd4>)
 800302a:	429c      	cmp	r4, r3
 800302c:	d101      	bne.n	8003032 <__swsetup_r+0x46>
 800302e:	68ac      	ldr	r4, [r5, #8]
 8003030:	e7eb      	b.n	800300a <__swsetup_r+0x1e>
 8003032:	4b24      	ldr	r3, [pc, #144]	; (80030c4 <__swsetup_r+0xd8>)
 8003034:	429c      	cmp	r4, r3
 8003036:	bf08      	it	eq
 8003038:	68ec      	ldreq	r4, [r5, #12]
 800303a:	e7e6      	b.n	800300a <__swsetup_r+0x1e>
 800303c:	0758      	lsls	r0, r3, #29
 800303e:	d512      	bpl.n	8003066 <__swsetup_r+0x7a>
 8003040:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003042:	b141      	cbz	r1, 8003056 <__swsetup_r+0x6a>
 8003044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003048:	4299      	cmp	r1, r3
 800304a:	d002      	beq.n	8003052 <__swsetup_r+0x66>
 800304c:	4630      	mov	r0, r6
 800304e:	f000 fa57 	bl	8003500 <_free_r>
 8003052:	2300      	movs	r3, #0
 8003054:	6363      	str	r3, [r4, #52]	; 0x34
 8003056:	89a3      	ldrh	r3, [r4, #12]
 8003058:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800305c:	81a3      	strh	r3, [r4, #12]
 800305e:	2300      	movs	r3, #0
 8003060:	6063      	str	r3, [r4, #4]
 8003062:	6923      	ldr	r3, [r4, #16]
 8003064:	6023      	str	r3, [r4, #0]
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	f043 0308 	orr.w	r3, r3, #8
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	6923      	ldr	r3, [r4, #16]
 8003070:	b94b      	cbnz	r3, 8003086 <__swsetup_r+0x9a>
 8003072:	89a3      	ldrh	r3, [r4, #12]
 8003074:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800307c:	d003      	beq.n	8003086 <__swsetup_r+0x9a>
 800307e:	4621      	mov	r1, r4
 8003080:	4630      	mov	r0, r6
 8003082:	f000 f9fd 	bl	8003480 <__smakebuf_r>
 8003086:	89a0      	ldrh	r0, [r4, #12]
 8003088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800308c:	f010 0301 	ands.w	r3, r0, #1
 8003090:	d00a      	beq.n	80030a8 <__swsetup_r+0xbc>
 8003092:	2300      	movs	r3, #0
 8003094:	60a3      	str	r3, [r4, #8]
 8003096:	6963      	ldr	r3, [r4, #20]
 8003098:	425b      	negs	r3, r3
 800309a:	61a3      	str	r3, [r4, #24]
 800309c:	6923      	ldr	r3, [r4, #16]
 800309e:	b943      	cbnz	r3, 80030b2 <__swsetup_r+0xc6>
 80030a0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80030a4:	d1ba      	bne.n	800301c <__swsetup_r+0x30>
 80030a6:	bd70      	pop	{r4, r5, r6, pc}
 80030a8:	0781      	lsls	r1, r0, #30
 80030aa:	bf58      	it	pl
 80030ac:	6963      	ldrpl	r3, [r4, #20]
 80030ae:	60a3      	str	r3, [r4, #8]
 80030b0:	e7f4      	b.n	800309c <__swsetup_r+0xb0>
 80030b2:	2000      	movs	r0, #0
 80030b4:	e7f7      	b.n	80030a6 <__swsetup_r+0xba>
 80030b6:	bf00      	nop
 80030b8:	20000010 	.word	0x20000010
 80030bc:	08004730 	.word	0x08004730
 80030c0:	08004750 	.word	0x08004750
 80030c4:	08004710 	.word	0x08004710

080030c8 <__sflush_r>:
 80030c8:	898a      	ldrh	r2, [r1, #12]
 80030ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030cc:	4605      	mov	r5, r0
 80030ce:	0710      	lsls	r0, r2, #28
 80030d0:	460c      	mov	r4, r1
 80030d2:	d457      	bmi.n	8003184 <__sflush_r+0xbc>
 80030d4:	684b      	ldr	r3, [r1, #4]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	dc04      	bgt.n	80030e4 <__sflush_r+0x1c>
 80030da:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80030dc:	2b00      	cmp	r3, #0
 80030de:	dc01      	bgt.n	80030e4 <__sflush_r+0x1c>
 80030e0:	2000      	movs	r0, #0
 80030e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80030e6:	2e00      	cmp	r6, #0
 80030e8:	d0fa      	beq.n	80030e0 <__sflush_r+0x18>
 80030ea:	2300      	movs	r3, #0
 80030ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80030f0:	682f      	ldr	r7, [r5, #0]
 80030f2:	602b      	str	r3, [r5, #0]
 80030f4:	d032      	beq.n	800315c <__sflush_r+0x94>
 80030f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80030f8:	89a3      	ldrh	r3, [r4, #12]
 80030fa:	075a      	lsls	r2, r3, #29
 80030fc:	d505      	bpl.n	800310a <__sflush_r+0x42>
 80030fe:	6863      	ldr	r3, [r4, #4]
 8003100:	1ac0      	subs	r0, r0, r3
 8003102:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003104:	b10b      	cbz	r3, 800310a <__sflush_r+0x42>
 8003106:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003108:	1ac0      	subs	r0, r0, r3
 800310a:	2300      	movs	r3, #0
 800310c:	4602      	mov	r2, r0
 800310e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003110:	4628      	mov	r0, r5
 8003112:	6a21      	ldr	r1, [r4, #32]
 8003114:	47b0      	blx	r6
 8003116:	1c43      	adds	r3, r0, #1
 8003118:	89a3      	ldrh	r3, [r4, #12]
 800311a:	d106      	bne.n	800312a <__sflush_r+0x62>
 800311c:	6829      	ldr	r1, [r5, #0]
 800311e:	291d      	cmp	r1, #29
 8003120:	d82c      	bhi.n	800317c <__sflush_r+0xb4>
 8003122:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <__sflush_r+0x100>)
 8003124:	40ca      	lsrs	r2, r1
 8003126:	07d6      	lsls	r6, r2, #31
 8003128:	d528      	bpl.n	800317c <__sflush_r+0xb4>
 800312a:	2200      	movs	r2, #0
 800312c:	6062      	str	r2, [r4, #4]
 800312e:	6922      	ldr	r2, [r4, #16]
 8003130:	04d9      	lsls	r1, r3, #19
 8003132:	6022      	str	r2, [r4, #0]
 8003134:	d504      	bpl.n	8003140 <__sflush_r+0x78>
 8003136:	1c42      	adds	r2, r0, #1
 8003138:	d101      	bne.n	800313e <__sflush_r+0x76>
 800313a:	682b      	ldr	r3, [r5, #0]
 800313c:	b903      	cbnz	r3, 8003140 <__sflush_r+0x78>
 800313e:	6560      	str	r0, [r4, #84]	; 0x54
 8003140:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003142:	602f      	str	r7, [r5, #0]
 8003144:	2900      	cmp	r1, #0
 8003146:	d0cb      	beq.n	80030e0 <__sflush_r+0x18>
 8003148:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800314c:	4299      	cmp	r1, r3
 800314e:	d002      	beq.n	8003156 <__sflush_r+0x8e>
 8003150:	4628      	mov	r0, r5
 8003152:	f000 f9d5 	bl	8003500 <_free_r>
 8003156:	2000      	movs	r0, #0
 8003158:	6360      	str	r0, [r4, #52]	; 0x34
 800315a:	e7c2      	b.n	80030e2 <__sflush_r+0x1a>
 800315c:	6a21      	ldr	r1, [r4, #32]
 800315e:	2301      	movs	r3, #1
 8003160:	4628      	mov	r0, r5
 8003162:	47b0      	blx	r6
 8003164:	1c41      	adds	r1, r0, #1
 8003166:	d1c7      	bne.n	80030f8 <__sflush_r+0x30>
 8003168:	682b      	ldr	r3, [r5, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0c4      	beq.n	80030f8 <__sflush_r+0x30>
 800316e:	2b1d      	cmp	r3, #29
 8003170:	d001      	beq.n	8003176 <__sflush_r+0xae>
 8003172:	2b16      	cmp	r3, #22
 8003174:	d101      	bne.n	800317a <__sflush_r+0xb2>
 8003176:	602f      	str	r7, [r5, #0]
 8003178:	e7b2      	b.n	80030e0 <__sflush_r+0x18>
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003180:	81a3      	strh	r3, [r4, #12]
 8003182:	e7ae      	b.n	80030e2 <__sflush_r+0x1a>
 8003184:	690f      	ldr	r7, [r1, #16]
 8003186:	2f00      	cmp	r7, #0
 8003188:	d0aa      	beq.n	80030e0 <__sflush_r+0x18>
 800318a:	0793      	lsls	r3, r2, #30
 800318c:	bf18      	it	ne
 800318e:	2300      	movne	r3, #0
 8003190:	680e      	ldr	r6, [r1, #0]
 8003192:	bf08      	it	eq
 8003194:	694b      	ldreq	r3, [r1, #20]
 8003196:	1bf6      	subs	r6, r6, r7
 8003198:	600f      	str	r7, [r1, #0]
 800319a:	608b      	str	r3, [r1, #8]
 800319c:	2e00      	cmp	r6, #0
 800319e:	dd9f      	ble.n	80030e0 <__sflush_r+0x18>
 80031a0:	4633      	mov	r3, r6
 80031a2:	463a      	mov	r2, r7
 80031a4:	4628      	mov	r0, r5
 80031a6:	6a21      	ldr	r1, [r4, #32]
 80031a8:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80031ac:	47e0      	blx	ip
 80031ae:	2800      	cmp	r0, #0
 80031b0:	dc06      	bgt.n	80031c0 <__sflush_r+0xf8>
 80031b2:	89a3      	ldrh	r3, [r4, #12]
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031bc:	81a3      	strh	r3, [r4, #12]
 80031be:	e790      	b.n	80030e2 <__sflush_r+0x1a>
 80031c0:	4407      	add	r7, r0
 80031c2:	1a36      	subs	r6, r6, r0
 80031c4:	e7ea      	b.n	800319c <__sflush_r+0xd4>
 80031c6:	bf00      	nop
 80031c8:	20400001 	.word	0x20400001

080031cc <_fflush_r>:
 80031cc:	b538      	push	{r3, r4, r5, lr}
 80031ce:	690b      	ldr	r3, [r1, #16]
 80031d0:	4605      	mov	r5, r0
 80031d2:	460c      	mov	r4, r1
 80031d4:	b913      	cbnz	r3, 80031dc <_fflush_r+0x10>
 80031d6:	2500      	movs	r5, #0
 80031d8:	4628      	mov	r0, r5
 80031da:	bd38      	pop	{r3, r4, r5, pc}
 80031dc:	b118      	cbz	r0, 80031e6 <_fflush_r+0x1a>
 80031de:	6983      	ldr	r3, [r0, #24]
 80031e0:	b90b      	cbnz	r3, 80031e6 <_fflush_r+0x1a>
 80031e2:	f000 f887 	bl	80032f4 <__sinit>
 80031e6:	4b14      	ldr	r3, [pc, #80]	; (8003238 <_fflush_r+0x6c>)
 80031e8:	429c      	cmp	r4, r3
 80031ea:	d11b      	bne.n	8003224 <_fflush_r+0x58>
 80031ec:	686c      	ldr	r4, [r5, #4]
 80031ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d0ef      	beq.n	80031d6 <_fflush_r+0xa>
 80031f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80031f8:	07d0      	lsls	r0, r2, #31
 80031fa:	d404      	bmi.n	8003206 <_fflush_r+0x3a>
 80031fc:	0599      	lsls	r1, r3, #22
 80031fe:	d402      	bmi.n	8003206 <_fflush_r+0x3a>
 8003200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003202:	f000 f915 	bl	8003430 <__retarget_lock_acquire_recursive>
 8003206:	4628      	mov	r0, r5
 8003208:	4621      	mov	r1, r4
 800320a:	f7ff ff5d 	bl	80030c8 <__sflush_r>
 800320e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003210:	4605      	mov	r5, r0
 8003212:	07da      	lsls	r2, r3, #31
 8003214:	d4e0      	bmi.n	80031d8 <_fflush_r+0xc>
 8003216:	89a3      	ldrh	r3, [r4, #12]
 8003218:	059b      	lsls	r3, r3, #22
 800321a:	d4dd      	bmi.n	80031d8 <_fflush_r+0xc>
 800321c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800321e:	f000 f908 	bl	8003432 <__retarget_lock_release_recursive>
 8003222:	e7d9      	b.n	80031d8 <_fflush_r+0xc>
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <_fflush_r+0x70>)
 8003226:	429c      	cmp	r4, r3
 8003228:	d101      	bne.n	800322e <_fflush_r+0x62>
 800322a:	68ac      	ldr	r4, [r5, #8]
 800322c:	e7df      	b.n	80031ee <_fflush_r+0x22>
 800322e:	4b04      	ldr	r3, [pc, #16]	; (8003240 <_fflush_r+0x74>)
 8003230:	429c      	cmp	r4, r3
 8003232:	bf08      	it	eq
 8003234:	68ec      	ldreq	r4, [r5, #12]
 8003236:	e7da      	b.n	80031ee <_fflush_r+0x22>
 8003238:	08004730 	.word	0x08004730
 800323c:	08004750 	.word	0x08004750
 8003240:	08004710 	.word	0x08004710

08003244 <std>:
 8003244:	2300      	movs	r3, #0
 8003246:	b510      	push	{r4, lr}
 8003248:	4604      	mov	r4, r0
 800324a:	e9c0 3300 	strd	r3, r3, [r0]
 800324e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003252:	6083      	str	r3, [r0, #8]
 8003254:	8181      	strh	r1, [r0, #12]
 8003256:	6643      	str	r3, [r0, #100]	; 0x64
 8003258:	81c2      	strh	r2, [r0, #14]
 800325a:	6183      	str	r3, [r0, #24]
 800325c:	4619      	mov	r1, r3
 800325e:	2208      	movs	r2, #8
 8003260:	305c      	adds	r0, #92	; 0x5c
 8003262:	f7ff fddb 	bl	8002e1c <memset>
 8003266:	4b05      	ldr	r3, [pc, #20]	; (800327c <std+0x38>)
 8003268:	6224      	str	r4, [r4, #32]
 800326a:	6263      	str	r3, [r4, #36]	; 0x24
 800326c:	4b04      	ldr	r3, [pc, #16]	; (8003280 <std+0x3c>)
 800326e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <std+0x40>)
 8003272:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003274:	4b04      	ldr	r3, [pc, #16]	; (8003288 <std+0x44>)
 8003276:	6323      	str	r3, [r4, #48]	; 0x30
 8003278:	bd10      	pop	{r4, pc}
 800327a:	bf00      	nop
 800327c:	08003cb5 	.word	0x08003cb5
 8003280:	08003cd7 	.word	0x08003cd7
 8003284:	08003d0f 	.word	0x08003d0f
 8003288:	08003d33 	.word	0x08003d33

0800328c <_cleanup_r>:
 800328c:	4901      	ldr	r1, [pc, #4]	; (8003294 <_cleanup_r+0x8>)
 800328e:	f000 b8af 	b.w	80033f0 <_fwalk_reent>
 8003292:	bf00      	nop
 8003294:	080031cd 	.word	0x080031cd

08003298 <__sfmoreglue>:
 8003298:	2268      	movs	r2, #104	; 0x68
 800329a:	b570      	push	{r4, r5, r6, lr}
 800329c:	1e4d      	subs	r5, r1, #1
 800329e:	4355      	muls	r5, r2
 80032a0:	460e      	mov	r6, r1
 80032a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032a6:	f000 f993 	bl	80035d0 <_malloc_r>
 80032aa:	4604      	mov	r4, r0
 80032ac:	b140      	cbz	r0, 80032c0 <__sfmoreglue+0x28>
 80032ae:	2100      	movs	r1, #0
 80032b0:	e9c0 1600 	strd	r1, r6, [r0]
 80032b4:	300c      	adds	r0, #12
 80032b6:	60a0      	str	r0, [r4, #8]
 80032b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032bc:	f7ff fdae 	bl	8002e1c <memset>
 80032c0:	4620      	mov	r0, r4
 80032c2:	bd70      	pop	{r4, r5, r6, pc}

080032c4 <__sfp_lock_acquire>:
 80032c4:	4801      	ldr	r0, [pc, #4]	; (80032cc <__sfp_lock_acquire+0x8>)
 80032c6:	f000 b8b3 	b.w	8003430 <__retarget_lock_acquire_recursive>
 80032ca:	bf00      	nop
 80032cc:	20000571 	.word	0x20000571

080032d0 <__sfp_lock_release>:
 80032d0:	4801      	ldr	r0, [pc, #4]	; (80032d8 <__sfp_lock_release+0x8>)
 80032d2:	f000 b8ae 	b.w	8003432 <__retarget_lock_release_recursive>
 80032d6:	bf00      	nop
 80032d8:	20000571 	.word	0x20000571

080032dc <__sinit_lock_acquire>:
 80032dc:	4801      	ldr	r0, [pc, #4]	; (80032e4 <__sinit_lock_acquire+0x8>)
 80032de:	f000 b8a7 	b.w	8003430 <__retarget_lock_acquire_recursive>
 80032e2:	bf00      	nop
 80032e4:	20000572 	.word	0x20000572

080032e8 <__sinit_lock_release>:
 80032e8:	4801      	ldr	r0, [pc, #4]	; (80032f0 <__sinit_lock_release+0x8>)
 80032ea:	f000 b8a2 	b.w	8003432 <__retarget_lock_release_recursive>
 80032ee:	bf00      	nop
 80032f0:	20000572 	.word	0x20000572

080032f4 <__sinit>:
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4604      	mov	r4, r0
 80032f8:	f7ff fff0 	bl	80032dc <__sinit_lock_acquire>
 80032fc:	69a3      	ldr	r3, [r4, #24]
 80032fe:	b11b      	cbz	r3, 8003308 <__sinit+0x14>
 8003300:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003304:	f7ff bff0 	b.w	80032e8 <__sinit_lock_release>
 8003308:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800330c:	6523      	str	r3, [r4, #80]	; 0x50
 800330e:	4b13      	ldr	r3, [pc, #76]	; (800335c <__sinit+0x68>)
 8003310:	4a13      	ldr	r2, [pc, #76]	; (8003360 <__sinit+0x6c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	62a2      	str	r2, [r4, #40]	; 0x28
 8003316:	42a3      	cmp	r3, r4
 8003318:	bf08      	it	eq
 800331a:	2301      	moveq	r3, #1
 800331c:	4620      	mov	r0, r4
 800331e:	bf08      	it	eq
 8003320:	61a3      	streq	r3, [r4, #24]
 8003322:	f000 f81f 	bl	8003364 <__sfp>
 8003326:	6060      	str	r0, [r4, #4]
 8003328:	4620      	mov	r0, r4
 800332a:	f000 f81b 	bl	8003364 <__sfp>
 800332e:	60a0      	str	r0, [r4, #8]
 8003330:	4620      	mov	r0, r4
 8003332:	f000 f817 	bl	8003364 <__sfp>
 8003336:	2200      	movs	r2, #0
 8003338:	2104      	movs	r1, #4
 800333a:	60e0      	str	r0, [r4, #12]
 800333c:	6860      	ldr	r0, [r4, #4]
 800333e:	f7ff ff81 	bl	8003244 <std>
 8003342:	2201      	movs	r2, #1
 8003344:	2109      	movs	r1, #9
 8003346:	68a0      	ldr	r0, [r4, #8]
 8003348:	f7ff ff7c 	bl	8003244 <std>
 800334c:	2202      	movs	r2, #2
 800334e:	2112      	movs	r1, #18
 8003350:	68e0      	ldr	r0, [r4, #12]
 8003352:	f7ff ff77 	bl	8003244 <std>
 8003356:	2301      	movs	r3, #1
 8003358:	61a3      	str	r3, [r4, #24]
 800335a:	e7d1      	b.n	8003300 <__sinit+0xc>
 800335c:	0800470c 	.word	0x0800470c
 8003360:	0800328d 	.word	0x0800328d

08003364 <__sfp>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	4607      	mov	r7, r0
 8003368:	f7ff ffac 	bl	80032c4 <__sfp_lock_acquire>
 800336c:	4b1e      	ldr	r3, [pc, #120]	; (80033e8 <__sfp+0x84>)
 800336e:	681e      	ldr	r6, [r3, #0]
 8003370:	69b3      	ldr	r3, [r6, #24]
 8003372:	b913      	cbnz	r3, 800337a <__sfp+0x16>
 8003374:	4630      	mov	r0, r6
 8003376:	f7ff ffbd 	bl	80032f4 <__sinit>
 800337a:	3648      	adds	r6, #72	; 0x48
 800337c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003380:	3b01      	subs	r3, #1
 8003382:	d503      	bpl.n	800338c <__sfp+0x28>
 8003384:	6833      	ldr	r3, [r6, #0]
 8003386:	b30b      	cbz	r3, 80033cc <__sfp+0x68>
 8003388:	6836      	ldr	r6, [r6, #0]
 800338a:	e7f7      	b.n	800337c <__sfp+0x18>
 800338c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003390:	b9d5      	cbnz	r5, 80033c8 <__sfp+0x64>
 8003392:	4b16      	ldr	r3, [pc, #88]	; (80033ec <__sfp+0x88>)
 8003394:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003398:	60e3      	str	r3, [r4, #12]
 800339a:	6665      	str	r5, [r4, #100]	; 0x64
 800339c:	f000 f847 	bl	800342e <__retarget_lock_init_recursive>
 80033a0:	f7ff ff96 	bl	80032d0 <__sfp_lock_release>
 80033a4:	2208      	movs	r2, #8
 80033a6:	4629      	mov	r1, r5
 80033a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80033ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80033b0:	6025      	str	r5, [r4, #0]
 80033b2:	61a5      	str	r5, [r4, #24]
 80033b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033b8:	f7ff fd30 	bl	8002e1c <memset>
 80033bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033c4:	4620      	mov	r0, r4
 80033c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80033c8:	3468      	adds	r4, #104	; 0x68
 80033ca:	e7d9      	b.n	8003380 <__sfp+0x1c>
 80033cc:	2104      	movs	r1, #4
 80033ce:	4638      	mov	r0, r7
 80033d0:	f7ff ff62 	bl	8003298 <__sfmoreglue>
 80033d4:	4604      	mov	r4, r0
 80033d6:	6030      	str	r0, [r6, #0]
 80033d8:	2800      	cmp	r0, #0
 80033da:	d1d5      	bne.n	8003388 <__sfp+0x24>
 80033dc:	f7ff ff78 	bl	80032d0 <__sfp_lock_release>
 80033e0:	230c      	movs	r3, #12
 80033e2:	603b      	str	r3, [r7, #0]
 80033e4:	e7ee      	b.n	80033c4 <__sfp+0x60>
 80033e6:	bf00      	nop
 80033e8:	0800470c 	.word	0x0800470c
 80033ec:	ffff0001 	.word	0xffff0001

080033f0 <_fwalk_reent>:
 80033f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033f4:	4606      	mov	r6, r0
 80033f6:	4688      	mov	r8, r1
 80033f8:	2700      	movs	r7, #0
 80033fa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033fe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003402:	f1b9 0901 	subs.w	r9, r9, #1
 8003406:	d505      	bpl.n	8003414 <_fwalk_reent+0x24>
 8003408:	6824      	ldr	r4, [r4, #0]
 800340a:	2c00      	cmp	r4, #0
 800340c:	d1f7      	bne.n	80033fe <_fwalk_reent+0xe>
 800340e:	4638      	mov	r0, r7
 8003410:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003414:	89ab      	ldrh	r3, [r5, #12]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d907      	bls.n	800342a <_fwalk_reent+0x3a>
 800341a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800341e:	3301      	adds	r3, #1
 8003420:	d003      	beq.n	800342a <_fwalk_reent+0x3a>
 8003422:	4629      	mov	r1, r5
 8003424:	4630      	mov	r0, r6
 8003426:	47c0      	blx	r8
 8003428:	4307      	orrs	r7, r0
 800342a:	3568      	adds	r5, #104	; 0x68
 800342c:	e7e9      	b.n	8003402 <_fwalk_reent+0x12>

0800342e <__retarget_lock_init_recursive>:
 800342e:	4770      	bx	lr

08003430 <__retarget_lock_acquire_recursive>:
 8003430:	4770      	bx	lr

08003432 <__retarget_lock_release_recursive>:
 8003432:	4770      	bx	lr

08003434 <__swhatbuf_r>:
 8003434:	b570      	push	{r4, r5, r6, lr}
 8003436:	460e      	mov	r6, r1
 8003438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800343c:	4614      	mov	r4, r2
 800343e:	2900      	cmp	r1, #0
 8003440:	461d      	mov	r5, r3
 8003442:	b096      	sub	sp, #88	; 0x58
 8003444:	da08      	bge.n	8003458 <__swhatbuf_r+0x24>
 8003446:	2200      	movs	r2, #0
 8003448:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800344c:	602a      	str	r2, [r5, #0]
 800344e:	061a      	lsls	r2, r3, #24
 8003450:	d410      	bmi.n	8003474 <__swhatbuf_r+0x40>
 8003452:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003456:	e00e      	b.n	8003476 <__swhatbuf_r+0x42>
 8003458:	466a      	mov	r2, sp
 800345a:	f000 fc91 	bl	8003d80 <_fstat_r>
 800345e:	2800      	cmp	r0, #0
 8003460:	dbf1      	blt.n	8003446 <__swhatbuf_r+0x12>
 8003462:	9a01      	ldr	r2, [sp, #4]
 8003464:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003468:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800346c:	425a      	negs	r2, r3
 800346e:	415a      	adcs	r2, r3
 8003470:	602a      	str	r2, [r5, #0]
 8003472:	e7ee      	b.n	8003452 <__swhatbuf_r+0x1e>
 8003474:	2340      	movs	r3, #64	; 0x40
 8003476:	2000      	movs	r0, #0
 8003478:	6023      	str	r3, [r4, #0]
 800347a:	b016      	add	sp, #88	; 0x58
 800347c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003480 <__smakebuf_r>:
 8003480:	898b      	ldrh	r3, [r1, #12]
 8003482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003484:	079d      	lsls	r5, r3, #30
 8003486:	4606      	mov	r6, r0
 8003488:	460c      	mov	r4, r1
 800348a:	d507      	bpl.n	800349c <__smakebuf_r+0x1c>
 800348c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003490:	6023      	str	r3, [r4, #0]
 8003492:	6123      	str	r3, [r4, #16]
 8003494:	2301      	movs	r3, #1
 8003496:	6163      	str	r3, [r4, #20]
 8003498:	b002      	add	sp, #8
 800349a:	bd70      	pop	{r4, r5, r6, pc}
 800349c:	466a      	mov	r2, sp
 800349e:	ab01      	add	r3, sp, #4
 80034a0:	f7ff ffc8 	bl	8003434 <__swhatbuf_r>
 80034a4:	9900      	ldr	r1, [sp, #0]
 80034a6:	4605      	mov	r5, r0
 80034a8:	4630      	mov	r0, r6
 80034aa:	f000 f891 	bl	80035d0 <_malloc_r>
 80034ae:	b948      	cbnz	r0, 80034c4 <__smakebuf_r+0x44>
 80034b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80034b4:	059a      	lsls	r2, r3, #22
 80034b6:	d4ef      	bmi.n	8003498 <__smakebuf_r+0x18>
 80034b8:	f023 0303 	bic.w	r3, r3, #3
 80034bc:	f043 0302 	orr.w	r3, r3, #2
 80034c0:	81a3      	strh	r3, [r4, #12]
 80034c2:	e7e3      	b.n	800348c <__smakebuf_r+0xc>
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <__smakebuf_r+0x7c>)
 80034c6:	62b3      	str	r3, [r6, #40]	; 0x28
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	6020      	str	r0, [r4, #0]
 80034cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034d0:	81a3      	strh	r3, [r4, #12]
 80034d2:	9b00      	ldr	r3, [sp, #0]
 80034d4:	6120      	str	r0, [r4, #16]
 80034d6:	6163      	str	r3, [r4, #20]
 80034d8:	9b01      	ldr	r3, [sp, #4]
 80034da:	b15b      	cbz	r3, 80034f4 <__smakebuf_r+0x74>
 80034dc:	4630      	mov	r0, r6
 80034de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034e2:	f000 fc5f 	bl	8003da4 <_isatty_r>
 80034e6:	b128      	cbz	r0, 80034f4 <__smakebuf_r+0x74>
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	f023 0303 	bic.w	r3, r3, #3
 80034ee:	f043 0301 	orr.w	r3, r3, #1
 80034f2:	81a3      	strh	r3, [r4, #12]
 80034f4:	89a0      	ldrh	r0, [r4, #12]
 80034f6:	4305      	orrs	r5, r0
 80034f8:	81a5      	strh	r5, [r4, #12]
 80034fa:	e7cd      	b.n	8003498 <__smakebuf_r+0x18>
 80034fc:	0800328d 	.word	0x0800328d

08003500 <_free_r>:
 8003500:	b538      	push	{r3, r4, r5, lr}
 8003502:	4605      	mov	r5, r0
 8003504:	2900      	cmp	r1, #0
 8003506:	d040      	beq.n	800358a <_free_r+0x8a>
 8003508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800350c:	1f0c      	subs	r4, r1, #4
 800350e:	2b00      	cmp	r3, #0
 8003510:	bfb8      	it	lt
 8003512:	18e4      	addlt	r4, r4, r3
 8003514:	f000 fc76 	bl	8003e04 <__malloc_lock>
 8003518:	4a1c      	ldr	r2, [pc, #112]	; (800358c <_free_r+0x8c>)
 800351a:	6813      	ldr	r3, [r2, #0]
 800351c:	b933      	cbnz	r3, 800352c <_free_r+0x2c>
 800351e:	6063      	str	r3, [r4, #4]
 8003520:	6014      	str	r4, [r2, #0]
 8003522:	4628      	mov	r0, r5
 8003524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003528:	f000 bc72 	b.w	8003e10 <__malloc_unlock>
 800352c:	42a3      	cmp	r3, r4
 800352e:	d908      	bls.n	8003542 <_free_r+0x42>
 8003530:	6820      	ldr	r0, [r4, #0]
 8003532:	1821      	adds	r1, r4, r0
 8003534:	428b      	cmp	r3, r1
 8003536:	bf01      	itttt	eq
 8003538:	6819      	ldreq	r1, [r3, #0]
 800353a:	685b      	ldreq	r3, [r3, #4]
 800353c:	1809      	addeq	r1, r1, r0
 800353e:	6021      	streq	r1, [r4, #0]
 8003540:	e7ed      	b.n	800351e <_free_r+0x1e>
 8003542:	461a      	mov	r2, r3
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	b10b      	cbz	r3, 800354c <_free_r+0x4c>
 8003548:	42a3      	cmp	r3, r4
 800354a:	d9fa      	bls.n	8003542 <_free_r+0x42>
 800354c:	6811      	ldr	r1, [r2, #0]
 800354e:	1850      	adds	r0, r2, r1
 8003550:	42a0      	cmp	r0, r4
 8003552:	d10b      	bne.n	800356c <_free_r+0x6c>
 8003554:	6820      	ldr	r0, [r4, #0]
 8003556:	4401      	add	r1, r0
 8003558:	1850      	adds	r0, r2, r1
 800355a:	4283      	cmp	r3, r0
 800355c:	6011      	str	r1, [r2, #0]
 800355e:	d1e0      	bne.n	8003522 <_free_r+0x22>
 8003560:	6818      	ldr	r0, [r3, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4401      	add	r1, r0
 8003566:	6011      	str	r1, [r2, #0]
 8003568:	6053      	str	r3, [r2, #4]
 800356a:	e7da      	b.n	8003522 <_free_r+0x22>
 800356c:	d902      	bls.n	8003574 <_free_r+0x74>
 800356e:	230c      	movs	r3, #12
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	e7d6      	b.n	8003522 <_free_r+0x22>
 8003574:	6820      	ldr	r0, [r4, #0]
 8003576:	1821      	adds	r1, r4, r0
 8003578:	428b      	cmp	r3, r1
 800357a:	bf01      	itttt	eq
 800357c:	6819      	ldreq	r1, [r3, #0]
 800357e:	685b      	ldreq	r3, [r3, #4]
 8003580:	1809      	addeq	r1, r1, r0
 8003582:	6021      	streq	r1, [r4, #0]
 8003584:	6063      	str	r3, [r4, #4]
 8003586:	6054      	str	r4, [r2, #4]
 8003588:	e7cb      	b.n	8003522 <_free_r+0x22>
 800358a:	bd38      	pop	{r3, r4, r5, pc}
 800358c:	20000574 	.word	0x20000574

08003590 <sbrk_aligned>:
 8003590:	b570      	push	{r4, r5, r6, lr}
 8003592:	4e0e      	ldr	r6, [pc, #56]	; (80035cc <sbrk_aligned+0x3c>)
 8003594:	460c      	mov	r4, r1
 8003596:	6831      	ldr	r1, [r6, #0]
 8003598:	4605      	mov	r5, r0
 800359a:	b911      	cbnz	r1, 80035a2 <sbrk_aligned+0x12>
 800359c:	f000 fb7a 	bl	8003c94 <_sbrk_r>
 80035a0:	6030      	str	r0, [r6, #0]
 80035a2:	4621      	mov	r1, r4
 80035a4:	4628      	mov	r0, r5
 80035a6:	f000 fb75 	bl	8003c94 <_sbrk_r>
 80035aa:	1c43      	adds	r3, r0, #1
 80035ac:	d00a      	beq.n	80035c4 <sbrk_aligned+0x34>
 80035ae:	1cc4      	adds	r4, r0, #3
 80035b0:	f024 0403 	bic.w	r4, r4, #3
 80035b4:	42a0      	cmp	r0, r4
 80035b6:	d007      	beq.n	80035c8 <sbrk_aligned+0x38>
 80035b8:	1a21      	subs	r1, r4, r0
 80035ba:	4628      	mov	r0, r5
 80035bc:	f000 fb6a 	bl	8003c94 <_sbrk_r>
 80035c0:	3001      	adds	r0, #1
 80035c2:	d101      	bne.n	80035c8 <sbrk_aligned+0x38>
 80035c4:	f04f 34ff 	mov.w	r4, #4294967295
 80035c8:	4620      	mov	r0, r4
 80035ca:	bd70      	pop	{r4, r5, r6, pc}
 80035cc:	20000578 	.word	0x20000578

080035d0 <_malloc_r>:
 80035d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035d4:	1ccd      	adds	r5, r1, #3
 80035d6:	f025 0503 	bic.w	r5, r5, #3
 80035da:	3508      	adds	r5, #8
 80035dc:	2d0c      	cmp	r5, #12
 80035de:	bf38      	it	cc
 80035e0:	250c      	movcc	r5, #12
 80035e2:	2d00      	cmp	r5, #0
 80035e4:	4607      	mov	r7, r0
 80035e6:	db01      	blt.n	80035ec <_malloc_r+0x1c>
 80035e8:	42a9      	cmp	r1, r5
 80035ea:	d905      	bls.n	80035f8 <_malloc_r+0x28>
 80035ec:	230c      	movs	r3, #12
 80035ee:	2600      	movs	r6, #0
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4630      	mov	r0, r6
 80035f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80035f8:	4e2e      	ldr	r6, [pc, #184]	; (80036b4 <_malloc_r+0xe4>)
 80035fa:	f000 fc03 	bl	8003e04 <__malloc_lock>
 80035fe:	6833      	ldr	r3, [r6, #0]
 8003600:	461c      	mov	r4, r3
 8003602:	bb34      	cbnz	r4, 8003652 <_malloc_r+0x82>
 8003604:	4629      	mov	r1, r5
 8003606:	4638      	mov	r0, r7
 8003608:	f7ff ffc2 	bl	8003590 <sbrk_aligned>
 800360c:	1c43      	adds	r3, r0, #1
 800360e:	4604      	mov	r4, r0
 8003610:	d14d      	bne.n	80036ae <_malloc_r+0xde>
 8003612:	6834      	ldr	r4, [r6, #0]
 8003614:	4626      	mov	r6, r4
 8003616:	2e00      	cmp	r6, #0
 8003618:	d140      	bne.n	800369c <_malloc_r+0xcc>
 800361a:	6823      	ldr	r3, [r4, #0]
 800361c:	4631      	mov	r1, r6
 800361e:	4638      	mov	r0, r7
 8003620:	eb04 0803 	add.w	r8, r4, r3
 8003624:	f000 fb36 	bl	8003c94 <_sbrk_r>
 8003628:	4580      	cmp	r8, r0
 800362a:	d13a      	bne.n	80036a2 <_malloc_r+0xd2>
 800362c:	6821      	ldr	r1, [r4, #0]
 800362e:	3503      	adds	r5, #3
 8003630:	1a6d      	subs	r5, r5, r1
 8003632:	f025 0503 	bic.w	r5, r5, #3
 8003636:	3508      	adds	r5, #8
 8003638:	2d0c      	cmp	r5, #12
 800363a:	bf38      	it	cc
 800363c:	250c      	movcc	r5, #12
 800363e:	4638      	mov	r0, r7
 8003640:	4629      	mov	r1, r5
 8003642:	f7ff ffa5 	bl	8003590 <sbrk_aligned>
 8003646:	3001      	adds	r0, #1
 8003648:	d02b      	beq.n	80036a2 <_malloc_r+0xd2>
 800364a:	6823      	ldr	r3, [r4, #0]
 800364c:	442b      	add	r3, r5
 800364e:	6023      	str	r3, [r4, #0]
 8003650:	e00e      	b.n	8003670 <_malloc_r+0xa0>
 8003652:	6822      	ldr	r2, [r4, #0]
 8003654:	1b52      	subs	r2, r2, r5
 8003656:	d41e      	bmi.n	8003696 <_malloc_r+0xc6>
 8003658:	2a0b      	cmp	r2, #11
 800365a:	d916      	bls.n	800368a <_malloc_r+0xba>
 800365c:	1961      	adds	r1, r4, r5
 800365e:	42a3      	cmp	r3, r4
 8003660:	6025      	str	r5, [r4, #0]
 8003662:	bf18      	it	ne
 8003664:	6059      	strne	r1, [r3, #4]
 8003666:	6863      	ldr	r3, [r4, #4]
 8003668:	bf08      	it	eq
 800366a:	6031      	streq	r1, [r6, #0]
 800366c:	5162      	str	r2, [r4, r5]
 800366e:	604b      	str	r3, [r1, #4]
 8003670:	4638      	mov	r0, r7
 8003672:	f104 060b 	add.w	r6, r4, #11
 8003676:	f000 fbcb 	bl	8003e10 <__malloc_unlock>
 800367a:	f026 0607 	bic.w	r6, r6, #7
 800367e:	1d23      	adds	r3, r4, #4
 8003680:	1af2      	subs	r2, r6, r3
 8003682:	d0b6      	beq.n	80035f2 <_malloc_r+0x22>
 8003684:	1b9b      	subs	r3, r3, r6
 8003686:	50a3      	str	r3, [r4, r2]
 8003688:	e7b3      	b.n	80035f2 <_malloc_r+0x22>
 800368a:	6862      	ldr	r2, [r4, #4]
 800368c:	42a3      	cmp	r3, r4
 800368e:	bf0c      	ite	eq
 8003690:	6032      	streq	r2, [r6, #0]
 8003692:	605a      	strne	r2, [r3, #4]
 8003694:	e7ec      	b.n	8003670 <_malloc_r+0xa0>
 8003696:	4623      	mov	r3, r4
 8003698:	6864      	ldr	r4, [r4, #4]
 800369a:	e7b2      	b.n	8003602 <_malloc_r+0x32>
 800369c:	4634      	mov	r4, r6
 800369e:	6876      	ldr	r6, [r6, #4]
 80036a0:	e7b9      	b.n	8003616 <_malloc_r+0x46>
 80036a2:	230c      	movs	r3, #12
 80036a4:	4638      	mov	r0, r7
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	f000 fbb2 	bl	8003e10 <__malloc_unlock>
 80036ac:	e7a1      	b.n	80035f2 <_malloc_r+0x22>
 80036ae:	6025      	str	r5, [r4, #0]
 80036b0:	e7de      	b.n	8003670 <_malloc_r+0xa0>
 80036b2:	bf00      	nop
 80036b4:	20000574 	.word	0x20000574

080036b8 <__sfputc_r>:
 80036b8:	6893      	ldr	r3, [r2, #8]
 80036ba:	b410      	push	{r4}
 80036bc:	3b01      	subs	r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	6093      	str	r3, [r2, #8]
 80036c2:	da07      	bge.n	80036d4 <__sfputc_r+0x1c>
 80036c4:	6994      	ldr	r4, [r2, #24]
 80036c6:	42a3      	cmp	r3, r4
 80036c8:	db01      	blt.n	80036ce <__sfputc_r+0x16>
 80036ca:	290a      	cmp	r1, #10
 80036cc:	d102      	bne.n	80036d4 <__sfputc_r+0x1c>
 80036ce:	bc10      	pop	{r4}
 80036d0:	f7ff bc3a 	b.w	8002f48 <__swbuf_r>
 80036d4:	6813      	ldr	r3, [r2, #0]
 80036d6:	1c58      	adds	r0, r3, #1
 80036d8:	6010      	str	r0, [r2, #0]
 80036da:	7019      	strb	r1, [r3, #0]
 80036dc:	4608      	mov	r0, r1
 80036de:	bc10      	pop	{r4}
 80036e0:	4770      	bx	lr

080036e2 <__sfputs_r>:
 80036e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e4:	4606      	mov	r6, r0
 80036e6:	460f      	mov	r7, r1
 80036e8:	4614      	mov	r4, r2
 80036ea:	18d5      	adds	r5, r2, r3
 80036ec:	42ac      	cmp	r4, r5
 80036ee:	d101      	bne.n	80036f4 <__sfputs_r+0x12>
 80036f0:	2000      	movs	r0, #0
 80036f2:	e007      	b.n	8003704 <__sfputs_r+0x22>
 80036f4:	463a      	mov	r2, r7
 80036f6:	4630      	mov	r0, r6
 80036f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036fc:	f7ff ffdc 	bl	80036b8 <__sfputc_r>
 8003700:	1c43      	adds	r3, r0, #1
 8003702:	d1f3      	bne.n	80036ec <__sfputs_r+0xa>
 8003704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003708 <_vfiprintf_r>:
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	460d      	mov	r5, r1
 800370e:	4614      	mov	r4, r2
 8003710:	4698      	mov	r8, r3
 8003712:	4606      	mov	r6, r0
 8003714:	b09d      	sub	sp, #116	; 0x74
 8003716:	b118      	cbz	r0, 8003720 <_vfiprintf_r+0x18>
 8003718:	6983      	ldr	r3, [r0, #24]
 800371a:	b90b      	cbnz	r3, 8003720 <_vfiprintf_r+0x18>
 800371c:	f7ff fdea 	bl	80032f4 <__sinit>
 8003720:	4b89      	ldr	r3, [pc, #548]	; (8003948 <_vfiprintf_r+0x240>)
 8003722:	429d      	cmp	r5, r3
 8003724:	d11b      	bne.n	800375e <_vfiprintf_r+0x56>
 8003726:	6875      	ldr	r5, [r6, #4]
 8003728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800372a:	07d9      	lsls	r1, r3, #31
 800372c:	d405      	bmi.n	800373a <_vfiprintf_r+0x32>
 800372e:	89ab      	ldrh	r3, [r5, #12]
 8003730:	059a      	lsls	r2, r3, #22
 8003732:	d402      	bmi.n	800373a <_vfiprintf_r+0x32>
 8003734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003736:	f7ff fe7b 	bl	8003430 <__retarget_lock_acquire_recursive>
 800373a:	89ab      	ldrh	r3, [r5, #12]
 800373c:	071b      	lsls	r3, r3, #28
 800373e:	d501      	bpl.n	8003744 <_vfiprintf_r+0x3c>
 8003740:	692b      	ldr	r3, [r5, #16]
 8003742:	b9eb      	cbnz	r3, 8003780 <_vfiprintf_r+0x78>
 8003744:	4629      	mov	r1, r5
 8003746:	4630      	mov	r0, r6
 8003748:	f7ff fc50 	bl	8002fec <__swsetup_r>
 800374c:	b1c0      	cbz	r0, 8003780 <_vfiprintf_r+0x78>
 800374e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003750:	07dc      	lsls	r4, r3, #31
 8003752:	d50e      	bpl.n	8003772 <_vfiprintf_r+0x6a>
 8003754:	f04f 30ff 	mov.w	r0, #4294967295
 8003758:	b01d      	add	sp, #116	; 0x74
 800375a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800375e:	4b7b      	ldr	r3, [pc, #492]	; (800394c <_vfiprintf_r+0x244>)
 8003760:	429d      	cmp	r5, r3
 8003762:	d101      	bne.n	8003768 <_vfiprintf_r+0x60>
 8003764:	68b5      	ldr	r5, [r6, #8]
 8003766:	e7df      	b.n	8003728 <_vfiprintf_r+0x20>
 8003768:	4b79      	ldr	r3, [pc, #484]	; (8003950 <_vfiprintf_r+0x248>)
 800376a:	429d      	cmp	r5, r3
 800376c:	bf08      	it	eq
 800376e:	68f5      	ldreq	r5, [r6, #12]
 8003770:	e7da      	b.n	8003728 <_vfiprintf_r+0x20>
 8003772:	89ab      	ldrh	r3, [r5, #12]
 8003774:	0598      	lsls	r0, r3, #22
 8003776:	d4ed      	bmi.n	8003754 <_vfiprintf_r+0x4c>
 8003778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800377a:	f7ff fe5a 	bl	8003432 <__retarget_lock_release_recursive>
 800377e:	e7e9      	b.n	8003754 <_vfiprintf_r+0x4c>
 8003780:	2300      	movs	r3, #0
 8003782:	9309      	str	r3, [sp, #36]	; 0x24
 8003784:	2320      	movs	r3, #32
 8003786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800378a:	2330      	movs	r3, #48	; 0x30
 800378c:	f04f 0901 	mov.w	r9, #1
 8003790:	f8cd 800c 	str.w	r8, [sp, #12]
 8003794:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8003954 <_vfiprintf_r+0x24c>
 8003798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800379c:	4623      	mov	r3, r4
 800379e:	469a      	mov	sl, r3
 80037a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80037a4:	b10a      	cbz	r2, 80037aa <_vfiprintf_r+0xa2>
 80037a6:	2a25      	cmp	r2, #37	; 0x25
 80037a8:	d1f9      	bne.n	800379e <_vfiprintf_r+0x96>
 80037aa:	ebba 0b04 	subs.w	fp, sl, r4
 80037ae:	d00b      	beq.n	80037c8 <_vfiprintf_r+0xc0>
 80037b0:	465b      	mov	r3, fp
 80037b2:	4622      	mov	r2, r4
 80037b4:	4629      	mov	r1, r5
 80037b6:	4630      	mov	r0, r6
 80037b8:	f7ff ff93 	bl	80036e2 <__sfputs_r>
 80037bc:	3001      	adds	r0, #1
 80037be:	f000 80aa 	beq.w	8003916 <_vfiprintf_r+0x20e>
 80037c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80037c4:	445a      	add	r2, fp
 80037c6:	9209      	str	r2, [sp, #36]	; 0x24
 80037c8:	f89a 3000 	ldrb.w	r3, [sl]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 80a2 	beq.w	8003916 <_vfiprintf_r+0x20e>
 80037d2:	2300      	movs	r3, #0
 80037d4:	f04f 32ff 	mov.w	r2, #4294967295
 80037d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80037dc:	f10a 0a01 	add.w	sl, sl, #1
 80037e0:	9304      	str	r3, [sp, #16]
 80037e2:	9307      	str	r3, [sp, #28]
 80037e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80037e8:	931a      	str	r3, [sp, #104]	; 0x68
 80037ea:	4654      	mov	r4, sl
 80037ec:	2205      	movs	r2, #5
 80037ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037f2:	4858      	ldr	r0, [pc, #352]	; (8003954 <_vfiprintf_r+0x24c>)
 80037f4:	f000 faf8 	bl	8003de8 <memchr>
 80037f8:	9a04      	ldr	r2, [sp, #16]
 80037fa:	b9d8      	cbnz	r0, 8003834 <_vfiprintf_r+0x12c>
 80037fc:	06d1      	lsls	r1, r2, #27
 80037fe:	bf44      	itt	mi
 8003800:	2320      	movmi	r3, #32
 8003802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003806:	0713      	lsls	r3, r2, #28
 8003808:	bf44      	itt	mi
 800380a:	232b      	movmi	r3, #43	; 0x2b
 800380c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003810:	f89a 3000 	ldrb.w	r3, [sl]
 8003814:	2b2a      	cmp	r3, #42	; 0x2a
 8003816:	d015      	beq.n	8003844 <_vfiprintf_r+0x13c>
 8003818:	4654      	mov	r4, sl
 800381a:	2000      	movs	r0, #0
 800381c:	f04f 0c0a 	mov.w	ip, #10
 8003820:	9a07      	ldr	r2, [sp, #28]
 8003822:	4621      	mov	r1, r4
 8003824:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003828:	3b30      	subs	r3, #48	; 0x30
 800382a:	2b09      	cmp	r3, #9
 800382c:	d94e      	bls.n	80038cc <_vfiprintf_r+0x1c4>
 800382e:	b1b0      	cbz	r0, 800385e <_vfiprintf_r+0x156>
 8003830:	9207      	str	r2, [sp, #28]
 8003832:	e014      	b.n	800385e <_vfiprintf_r+0x156>
 8003834:	eba0 0308 	sub.w	r3, r0, r8
 8003838:	fa09 f303 	lsl.w	r3, r9, r3
 800383c:	4313      	orrs	r3, r2
 800383e:	46a2      	mov	sl, r4
 8003840:	9304      	str	r3, [sp, #16]
 8003842:	e7d2      	b.n	80037ea <_vfiprintf_r+0xe2>
 8003844:	9b03      	ldr	r3, [sp, #12]
 8003846:	1d19      	adds	r1, r3, #4
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	9103      	str	r1, [sp, #12]
 800384c:	2b00      	cmp	r3, #0
 800384e:	bfbb      	ittet	lt
 8003850:	425b      	neglt	r3, r3
 8003852:	f042 0202 	orrlt.w	r2, r2, #2
 8003856:	9307      	strge	r3, [sp, #28]
 8003858:	9307      	strlt	r3, [sp, #28]
 800385a:	bfb8      	it	lt
 800385c:	9204      	strlt	r2, [sp, #16]
 800385e:	7823      	ldrb	r3, [r4, #0]
 8003860:	2b2e      	cmp	r3, #46	; 0x2e
 8003862:	d10c      	bne.n	800387e <_vfiprintf_r+0x176>
 8003864:	7863      	ldrb	r3, [r4, #1]
 8003866:	2b2a      	cmp	r3, #42	; 0x2a
 8003868:	d135      	bne.n	80038d6 <_vfiprintf_r+0x1ce>
 800386a:	9b03      	ldr	r3, [sp, #12]
 800386c:	3402      	adds	r4, #2
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	9203      	str	r2, [sp, #12]
 8003874:	2b00      	cmp	r3, #0
 8003876:	bfb8      	it	lt
 8003878:	f04f 33ff 	movlt.w	r3, #4294967295
 800387c:	9305      	str	r3, [sp, #20]
 800387e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8003958 <_vfiprintf_r+0x250>
 8003882:	2203      	movs	r2, #3
 8003884:	4650      	mov	r0, sl
 8003886:	7821      	ldrb	r1, [r4, #0]
 8003888:	f000 faae 	bl	8003de8 <memchr>
 800388c:	b140      	cbz	r0, 80038a0 <_vfiprintf_r+0x198>
 800388e:	2340      	movs	r3, #64	; 0x40
 8003890:	eba0 000a 	sub.w	r0, r0, sl
 8003894:	fa03 f000 	lsl.w	r0, r3, r0
 8003898:	9b04      	ldr	r3, [sp, #16]
 800389a:	3401      	adds	r4, #1
 800389c:	4303      	orrs	r3, r0
 800389e:	9304      	str	r3, [sp, #16]
 80038a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a4:	2206      	movs	r2, #6
 80038a6:	482d      	ldr	r0, [pc, #180]	; (800395c <_vfiprintf_r+0x254>)
 80038a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80038ac:	f000 fa9c 	bl	8003de8 <memchr>
 80038b0:	2800      	cmp	r0, #0
 80038b2:	d03f      	beq.n	8003934 <_vfiprintf_r+0x22c>
 80038b4:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <_vfiprintf_r+0x258>)
 80038b6:	bb1b      	cbnz	r3, 8003900 <_vfiprintf_r+0x1f8>
 80038b8:	9b03      	ldr	r3, [sp, #12]
 80038ba:	3307      	adds	r3, #7
 80038bc:	f023 0307 	bic.w	r3, r3, #7
 80038c0:	3308      	adds	r3, #8
 80038c2:	9303      	str	r3, [sp, #12]
 80038c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038c6:	443b      	add	r3, r7
 80038c8:	9309      	str	r3, [sp, #36]	; 0x24
 80038ca:	e767      	b.n	800379c <_vfiprintf_r+0x94>
 80038cc:	460c      	mov	r4, r1
 80038ce:	2001      	movs	r0, #1
 80038d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80038d4:	e7a5      	b.n	8003822 <_vfiprintf_r+0x11a>
 80038d6:	2300      	movs	r3, #0
 80038d8:	f04f 0c0a 	mov.w	ip, #10
 80038dc:	4619      	mov	r1, r3
 80038de:	3401      	adds	r4, #1
 80038e0:	9305      	str	r3, [sp, #20]
 80038e2:	4620      	mov	r0, r4
 80038e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80038e8:	3a30      	subs	r2, #48	; 0x30
 80038ea:	2a09      	cmp	r2, #9
 80038ec:	d903      	bls.n	80038f6 <_vfiprintf_r+0x1ee>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d0c5      	beq.n	800387e <_vfiprintf_r+0x176>
 80038f2:	9105      	str	r1, [sp, #20]
 80038f4:	e7c3      	b.n	800387e <_vfiprintf_r+0x176>
 80038f6:	4604      	mov	r4, r0
 80038f8:	2301      	movs	r3, #1
 80038fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80038fe:	e7f0      	b.n	80038e2 <_vfiprintf_r+0x1da>
 8003900:	ab03      	add	r3, sp, #12
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	462a      	mov	r2, r5
 8003906:	4630      	mov	r0, r6
 8003908:	4b16      	ldr	r3, [pc, #88]	; (8003964 <_vfiprintf_r+0x25c>)
 800390a:	a904      	add	r1, sp, #16
 800390c:	f3af 8000 	nop.w
 8003910:	4607      	mov	r7, r0
 8003912:	1c78      	adds	r0, r7, #1
 8003914:	d1d6      	bne.n	80038c4 <_vfiprintf_r+0x1bc>
 8003916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003918:	07d9      	lsls	r1, r3, #31
 800391a:	d405      	bmi.n	8003928 <_vfiprintf_r+0x220>
 800391c:	89ab      	ldrh	r3, [r5, #12]
 800391e:	059a      	lsls	r2, r3, #22
 8003920:	d402      	bmi.n	8003928 <_vfiprintf_r+0x220>
 8003922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003924:	f7ff fd85 	bl	8003432 <__retarget_lock_release_recursive>
 8003928:	89ab      	ldrh	r3, [r5, #12]
 800392a:	065b      	lsls	r3, r3, #25
 800392c:	f53f af12 	bmi.w	8003754 <_vfiprintf_r+0x4c>
 8003930:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003932:	e711      	b.n	8003758 <_vfiprintf_r+0x50>
 8003934:	ab03      	add	r3, sp, #12
 8003936:	9300      	str	r3, [sp, #0]
 8003938:	462a      	mov	r2, r5
 800393a:	4630      	mov	r0, r6
 800393c:	4b09      	ldr	r3, [pc, #36]	; (8003964 <_vfiprintf_r+0x25c>)
 800393e:	a904      	add	r1, sp, #16
 8003940:	f000 f882 	bl	8003a48 <_printf_i>
 8003944:	e7e4      	b.n	8003910 <_vfiprintf_r+0x208>
 8003946:	bf00      	nop
 8003948:	08004730 	.word	0x08004730
 800394c:	08004750 	.word	0x08004750
 8003950:	08004710 	.word	0x08004710
 8003954:	08004770 	.word	0x08004770
 8003958:	08004776 	.word	0x08004776
 800395c:	0800477a 	.word	0x0800477a
 8003960:	00000000 	.word	0x00000000
 8003964:	080036e3 	.word	0x080036e3

08003968 <_printf_common>:
 8003968:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800396c:	4616      	mov	r6, r2
 800396e:	4699      	mov	r9, r3
 8003970:	688a      	ldr	r2, [r1, #8]
 8003972:	690b      	ldr	r3, [r1, #16]
 8003974:	4607      	mov	r7, r0
 8003976:	4293      	cmp	r3, r2
 8003978:	bfb8      	it	lt
 800397a:	4613      	movlt	r3, r2
 800397c:	6033      	str	r3, [r6, #0]
 800397e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003982:	460c      	mov	r4, r1
 8003984:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003988:	b10a      	cbz	r2, 800398e <_printf_common+0x26>
 800398a:	3301      	adds	r3, #1
 800398c:	6033      	str	r3, [r6, #0]
 800398e:	6823      	ldr	r3, [r4, #0]
 8003990:	0699      	lsls	r1, r3, #26
 8003992:	bf42      	ittt	mi
 8003994:	6833      	ldrmi	r3, [r6, #0]
 8003996:	3302      	addmi	r3, #2
 8003998:	6033      	strmi	r3, [r6, #0]
 800399a:	6825      	ldr	r5, [r4, #0]
 800399c:	f015 0506 	ands.w	r5, r5, #6
 80039a0:	d106      	bne.n	80039b0 <_printf_common+0x48>
 80039a2:	f104 0a19 	add.w	sl, r4, #25
 80039a6:	68e3      	ldr	r3, [r4, #12]
 80039a8:	6832      	ldr	r2, [r6, #0]
 80039aa:	1a9b      	subs	r3, r3, r2
 80039ac:	42ab      	cmp	r3, r5
 80039ae:	dc28      	bgt.n	8003a02 <_printf_common+0x9a>
 80039b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039b4:	1e13      	subs	r3, r2, #0
 80039b6:	6822      	ldr	r2, [r4, #0]
 80039b8:	bf18      	it	ne
 80039ba:	2301      	movne	r3, #1
 80039bc:	0692      	lsls	r2, r2, #26
 80039be:	d42d      	bmi.n	8003a1c <_printf_common+0xb4>
 80039c0:	4649      	mov	r1, r9
 80039c2:	4638      	mov	r0, r7
 80039c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039c8:	47c0      	blx	r8
 80039ca:	3001      	adds	r0, #1
 80039cc:	d020      	beq.n	8003a10 <_printf_common+0xa8>
 80039ce:	6823      	ldr	r3, [r4, #0]
 80039d0:	68e5      	ldr	r5, [r4, #12]
 80039d2:	f003 0306 	and.w	r3, r3, #6
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	bf18      	it	ne
 80039da:	2500      	movne	r5, #0
 80039dc:	6832      	ldr	r2, [r6, #0]
 80039de:	f04f 0600 	mov.w	r6, #0
 80039e2:	68a3      	ldr	r3, [r4, #8]
 80039e4:	bf08      	it	eq
 80039e6:	1aad      	subeq	r5, r5, r2
 80039e8:	6922      	ldr	r2, [r4, #16]
 80039ea:	bf08      	it	eq
 80039ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039f0:	4293      	cmp	r3, r2
 80039f2:	bfc4      	itt	gt
 80039f4:	1a9b      	subgt	r3, r3, r2
 80039f6:	18ed      	addgt	r5, r5, r3
 80039f8:	341a      	adds	r4, #26
 80039fa:	42b5      	cmp	r5, r6
 80039fc:	d11a      	bne.n	8003a34 <_printf_common+0xcc>
 80039fe:	2000      	movs	r0, #0
 8003a00:	e008      	b.n	8003a14 <_printf_common+0xac>
 8003a02:	2301      	movs	r3, #1
 8003a04:	4652      	mov	r2, sl
 8003a06:	4649      	mov	r1, r9
 8003a08:	4638      	mov	r0, r7
 8003a0a:	47c0      	blx	r8
 8003a0c:	3001      	adds	r0, #1
 8003a0e:	d103      	bne.n	8003a18 <_printf_common+0xb0>
 8003a10:	f04f 30ff 	mov.w	r0, #4294967295
 8003a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a18:	3501      	adds	r5, #1
 8003a1a:	e7c4      	b.n	80039a6 <_printf_common+0x3e>
 8003a1c:	2030      	movs	r0, #48	; 0x30
 8003a1e:	18e1      	adds	r1, r4, r3
 8003a20:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a24:	1c5a      	adds	r2, r3, #1
 8003a26:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a2a:	4422      	add	r2, r4
 8003a2c:	3302      	adds	r3, #2
 8003a2e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a32:	e7c5      	b.n	80039c0 <_printf_common+0x58>
 8003a34:	2301      	movs	r3, #1
 8003a36:	4622      	mov	r2, r4
 8003a38:	4649      	mov	r1, r9
 8003a3a:	4638      	mov	r0, r7
 8003a3c:	47c0      	blx	r8
 8003a3e:	3001      	adds	r0, #1
 8003a40:	d0e6      	beq.n	8003a10 <_printf_common+0xa8>
 8003a42:	3601      	adds	r6, #1
 8003a44:	e7d9      	b.n	80039fa <_printf_common+0x92>
	...

08003a48 <_printf_i>:
 8003a48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a4c:	7e0f      	ldrb	r7, [r1, #24]
 8003a4e:	4691      	mov	r9, r2
 8003a50:	2f78      	cmp	r7, #120	; 0x78
 8003a52:	4680      	mov	r8, r0
 8003a54:	460c      	mov	r4, r1
 8003a56:	469a      	mov	sl, r3
 8003a58:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a5e:	d807      	bhi.n	8003a70 <_printf_i+0x28>
 8003a60:	2f62      	cmp	r7, #98	; 0x62
 8003a62:	d80a      	bhi.n	8003a7a <_printf_i+0x32>
 8003a64:	2f00      	cmp	r7, #0
 8003a66:	f000 80d9 	beq.w	8003c1c <_printf_i+0x1d4>
 8003a6a:	2f58      	cmp	r7, #88	; 0x58
 8003a6c:	f000 80a4 	beq.w	8003bb8 <_printf_i+0x170>
 8003a70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a78:	e03a      	b.n	8003af0 <_printf_i+0xa8>
 8003a7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a7e:	2b15      	cmp	r3, #21
 8003a80:	d8f6      	bhi.n	8003a70 <_printf_i+0x28>
 8003a82:	a101      	add	r1, pc, #4	; (adr r1, 8003a88 <_printf_i+0x40>)
 8003a84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a88:	08003ae1 	.word	0x08003ae1
 8003a8c:	08003af5 	.word	0x08003af5
 8003a90:	08003a71 	.word	0x08003a71
 8003a94:	08003a71 	.word	0x08003a71
 8003a98:	08003a71 	.word	0x08003a71
 8003a9c:	08003a71 	.word	0x08003a71
 8003aa0:	08003af5 	.word	0x08003af5
 8003aa4:	08003a71 	.word	0x08003a71
 8003aa8:	08003a71 	.word	0x08003a71
 8003aac:	08003a71 	.word	0x08003a71
 8003ab0:	08003a71 	.word	0x08003a71
 8003ab4:	08003c03 	.word	0x08003c03
 8003ab8:	08003b25 	.word	0x08003b25
 8003abc:	08003be5 	.word	0x08003be5
 8003ac0:	08003a71 	.word	0x08003a71
 8003ac4:	08003a71 	.word	0x08003a71
 8003ac8:	08003c25 	.word	0x08003c25
 8003acc:	08003a71 	.word	0x08003a71
 8003ad0:	08003b25 	.word	0x08003b25
 8003ad4:	08003a71 	.word	0x08003a71
 8003ad8:	08003a71 	.word	0x08003a71
 8003adc:	08003bed 	.word	0x08003bed
 8003ae0:	682b      	ldr	r3, [r5, #0]
 8003ae2:	1d1a      	adds	r2, r3, #4
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	602a      	str	r2, [r5, #0]
 8003ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003aec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0a4      	b.n	8003c3e <_printf_i+0x1f6>
 8003af4:	6820      	ldr	r0, [r4, #0]
 8003af6:	6829      	ldr	r1, [r5, #0]
 8003af8:	0606      	lsls	r6, r0, #24
 8003afa:	f101 0304 	add.w	r3, r1, #4
 8003afe:	d50a      	bpl.n	8003b16 <_printf_i+0xce>
 8003b00:	680e      	ldr	r6, [r1, #0]
 8003b02:	602b      	str	r3, [r5, #0]
 8003b04:	2e00      	cmp	r6, #0
 8003b06:	da03      	bge.n	8003b10 <_printf_i+0xc8>
 8003b08:	232d      	movs	r3, #45	; 0x2d
 8003b0a:	4276      	negs	r6, r6
 8003b0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b10:	230a      	movs	r3, #10
 8003b12:	485e      	ldr	r0, [pc, #376]	; (8003c8c <_printf_i+0x244>)
 8003b14:	e019      	b.n	8003b4a <_printf_i+0x102>
 8003b16:	680e      	ldr	r6, [r1, #0]
 8003b18:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b1c:	602b      	str	r3, [r5, #0]
 8003b1e:	bf18      	it	ne
 8003b20:	b236      	sxthne	r6, r6
 8003b22:	e7ef      	b.n	8003b04 <_printf_i+0xbc>
 8003b24:	682b      	ldr	r3, [r5, #0]
 8003b26:	6820      	ldr	r0, [r4, #0]
 8003b28:	1d19      	adds	r1, r3, #4
 8003b2a:	6029      	str	r1, [r5, #0]
 8003b2c:	0601      	lsls	r1, r0, #24
 8003b2e:	d501      	bpl.n	8003b34 <_printf_i+0xec>
 8003b30:	681e      	ldr	r6, [r3, #0]
 8003b32:	e002      	b.n	8003b3a <_printf_i+0xf2>
 8003b34:	0646      	lsls	r6, r0, #25
 8003b36:	d5fb      	bpl.n	8003b30 <_printf_i+0xe8>
 8003b38:	881e      	ldrh	r6, [r3, #0]
 8003b3a:	2f6f      	cmp	r7, #111	; 0x6f
 8003b3c:	bf0c      	ite	eq
 8003b3e:	2308      	moveq	r3, #8
 8003b40:	230a      	movne	r3, #10
 8003b42:	4852      	ldr	r0, [pc, #328]	; (8003c8c <_printf_i+0x244>)
 8003b44:	2100      	movs	r1, #0
 8003b46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b4a:	6865      	ldr	r5, [r4, #4]
 8003b4c:	2d00      	cmp	r5, #0
 8003b4e:	bfa8      	it	ge
 8003b50:	6821      	ldrge	r1, [r4, #0]
 8003b52:	60a5      	str	r5, [r4, #8]
 8003b54:	bfa4      	itt	ge
 8003b56:	f021 0104 	bicge.w	r1, r1, #4
 8003b5a:	6021      	strge	r1, [r4, #0]
 8003b5c:	b90e      	cbnz	r6, 8003b62 <_printf_i+0x11a>
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	d04d      	beq.n	8003bfe <_printf_i+0x1b6>
 8003b62:	4615      	mov	r5, r2
 8003b64:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b68:	fb03 6711 	mls	r7, r3, r1, r6
 8003b6c:	5dc7      	ldrb	r7, [r0, r7]
 8003b6e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b72:	4637      	mov	r7, r6
 8003b74:	42bb      	cmp	r3, r7
 8003b76:	460e      	mov	r6, r1
 8003b78:	d9f4      	bls.n	8003b64 <_printf_i+0x11c>
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d10b      	bne.n	8003b96 <_printf_i+0x14e>
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	07de      	lsls	r6, r3, #31
 8003b82:	d508      	bpl.n	8003b96 <_printf_i+0x14e>
 8003b84:	6923      	ldr	r3, [r4, #16]
 8003b86:	6861      	ldr	r1, [r4, #4]
 8003b88:	4299      	cmp	r1, r3
 8003b8a:	bfde      	ittt	le
 8003b8c:	2330      	movle	r3, #48	; 0x30
 8003b8e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b92:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b96:	1b52      	subs	r2, r2, r5
 8003b98:	6122      	str	r2, [r4, #16]
 8003b9a:	464b      	mov	r3, r9
 8003b9c:	4621      	mov	r1, r4
 8003b9e:	4640      	mov	r0, r8
 8003ba0:	f8cd a000 	str.w	sl, [sp]
 8003ba4:	aa03      	add	r2, sp, #12
 8003ba6:	f7ff fedf 	bl	8003968 <_printf_common>
 8003baa:	3001      	adds	r0, #1
 8003bac:	d14c      	bne.n	8003c48 <_printf_i+0x200>
 8003bae:	f04f 30ff 	mov.w	r0, #4294967295
 8003bb2:	b004      	add	sp, #16
 8003bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bb8:	4834      	ldr	r0, [pc, #208]	; (8003c8c <_printf_i+0x244>)
 8003bba:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bbe:	6829      	ldr	r1, [r5, #0]
 8003bc0:	6823      	ldr	r3, [r4, #0]
 8003bc2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bc6:	6029      	str	r1, [r5, #0]
 8003bc8:	061d      	lsls	r5, r3, #24
 8003bca:	d514      	bpl.n	8003bf6 <_printf_i+0x1ae>
 8003bcc:	07df      	lsls	r7, r3, #31
 8003bce:	bf44      	itt	mi
 8003bd0:	f043 0320 	orrmi.w	r3, r3, #32
 8003bd4:	6023      	strmi	r3, [r4, #0]
 8003bd6:	b91e      	cbnz	r6, 8003be0 <_printf_i+0x198>
 8003bd8:	6823      	ldr	r3, [r4, #0]
 8003bda:	f023 0320 	bic.w	r3, r3, #32
 8003bde:	6023      	str	r3, [r4, #0]
 8003be0:	2310      	movs	r3, #16
 8003be2:	e7af      	b.n	8003b44 <_printf_i+0xfc>
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	f043 0320 	orr.w	r3, r3, #32
 8003bea:	6023      	str	r3, [r4, #0]
 8003bec:	2378      	movs	r3, #120	; 0x78
 8003bee:	4828      	ldr	r0, [pc, #160]	; (8003c90 <_printf_i+0x248>)
 8003bf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003bf4:	e7e3      	b.n	8003bbe <_printf_i+0x176>
 8003bf6:	0659      	lsls	r1, r3, #25
 8003bf8:	bf48      	it	mi
 8003bfa:	b2b6      	uxthmi	r6, r6
 8003bfc:	e7e6      	b.n	8003bcc <_printf_i+0x184>
 8003bfe:	4615      	mov	r5, r2
 8003c00:	e7bb      	b.n	8003b7a <_printf_i+0x132>
 8003c02:	682b      	ldr	r3, [r5, #0]
 8003c04:	6826      	ldr	r6, [r4, #0]
 8003c06:	1d18      	adds	r0, r3, #4
 8003c08:	6961      	ldr	r1, [r4, #20]
 8003c0a:	6028      	str	r0, [r5, #0]
 8003c0c:	0635      	lsls	r5, r6, #24
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	d501      	bpl.n	8003c16 <_printf_i+0x1ce>
 8003c12:	6019      	str	r1, [r3, #0]
 8003c14:	e002      	b.n	8003c1c <_printf_i+0x1d4>
 8003c16:	0670      	lsls	r0, r6, #25
 8003c18:	d5fb      	bpl.n	8003c12 <_printf_i+0x1ca>
 8003c1a:	8019      	strh	r1, [r3, #0]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	4615      	mov	r5, r2
 8003c20:	6123      	str	r3, [r4, #16]
 8003c22:	e7ba      	b.n	8003b9a <_printf_i+0x152>
 8003c24:	682b      	ldr	r3, [r5, #0]
 8003c26:	2100      	movs	r1, #0
 8003c28:	1d1a      	adds	r2, r3, #4
 8003c2a:	602a      	str	r2, [r5, #0]
 8003c2c:	681d      	ldr	r5, [r3, #0]
 8003c2e:	6862      	ldr	r2, [r4, #4]
 8003c30:	4628      	mov	r0, r5
 8003c32:	f000 f8d9 	bl	8003de8 <memchr>
 8003c36:	b108      	cbz	r0, 8003c3c <_printf_i+0x1f4>
 8003c38:	1b40      	subs	r0, r0, r5
 8003c3a:	6060      	str	r0, [r4, #4]
 8003c3c:	6863      	ldr	r3, [r4, #4]
 8003c3e:	6123      	str	r3, [r4, #16]
 8003c40:	2300      	movs	r3, #0
 8003c42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c46:	e7a8      	b.n	8003b9a <_printf_i+0x152>
 8003c48:	462a      	mov	r2, r5
 8003c4a:	4649      	mov	r1, r9
 8003c4c:	4640      	mov	r0, r8
 8003c4e:	6923      	ldr	r3, [r4, #16]
 8003c50:	47d0      	blx	sl
 8003c52:	3001      	adds	r0, #1
 8003c54:	d0ab      	beq.n	8003bae <_printf_i+0x166>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	079b      	lsls	r3, r3, #30
 8003c5a:	d413      	bmi.n	8003c84 <_printf_i+0x23c>
 8003c5c:	68e0      	ldr	r0, [r4, #12]
 8003c5e:	9b03      	ldr	r3, [sp, #12]
 8003c60:	4298      	cmp	r0, r3
 8003c62:	bfb8      	it	lt
 8003c64:	4618      	movlt	r0, r3
 8003c66:	e7a4      	b.n	8003bb2 <_printf_i+0x16a>
 8003c68:	2301      	movs	r3, #1
 8003c6a:	4632      	mov	r2, r6
 8003c6c:	4649      	mov	r1, r9
 8003c6e:	4640      	mov	r0, r8
 8003c70:	47d0      	blx	sl
 8003c72:	3001      	adds	r0, #1
 8003c74:	d09b      	beq.n	8003bae <_printf_i+0x166>
 8003c76:	3501      	adds	r5, #1
 8003c78:	68e3      	ldr	r3, [r4, #12]
 8003c7a:	9903      	ldr	r1, [sp, #12]
 8003c7c:	1a5b      	subs	r3, r3, r1
 8003c7e:	42ab      	cmp	r3, r5
 8003c80:	dcf2      	bgt.n	8003c68 <_printf_i+0x220>
 8003c82:	e7eb      	b.n	8003c5c <_printf_i+0x214>
 8003c84:	2500      	movs	r5, #0
 8003c86:	f104 0619 	add.w	r6, r4, #25
 8003c8a:	e7f5      	b.n	8003c78 <_printf_i+0x230>
 8003c8c:	08004781 	.word	0x08004781
 8003c90:	08004792 	.word	0x08004792

08003c94 <_sbrk_r>:
 8003c94:	b538      	push	{r3, r4, r5, lr}
 8003c96:	2300      	movs	r3, #0
 8003c98:	4d05      	ldr	r5, [pc, #20]	; (8003cb0 <_sbrk_r+0x1c>)
 8003c9a:	4604      	mov	r4, r0
 8003c9c:	4608      	mov	r0, r1
 8003c9e:	602b      	str	r3, [r5, #0]
 8003ca0:	f7fd fbe6 	bl	8001470 <_sbrk>
 8003ca4:	1c43      	adds	r3, r0, #1
 8003ca6:	d102      	bne.n	8003cae <_sbrk_r+0x1a>
 8003ca8:	682b      	ldr	r3, [r5, #0]
 8003caa:	b103      	cbz	r3, 8003cae <_sbrk_r+0x1a>
 8003cac:	6023      	str	r3, [r4, #0]
 8003cae:	bd38      	pop	{r3, r4, r5, pc}
 8003cb0:	2000057c 	.word	0x2000057c

08003cb4 <__sread>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cbc:	f000 f8ae 	bl	8003e1c <_read_r>
 8003cc0:	2800      	cmp	r0, #0
 8003cc2:	bfab      	itete	ge
 8003cc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003cc6:	89a3      	ldrhlt	r3, [r4, #12]
 8003cc8:	181b      	addge	r3, r3, r0
 8003cca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003cce:	bfac      	ite	ge
 8003cd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8003cd2:	81a3      	strhlt	r3, [r4, #12]
 8003cd4:	bd10      	pop	{r4, pc}

08003cd6 <__swrite>:
 8003cd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cda:	461f      	mov	r7, r3
 8003cdc:	898b      	ldrh	r3, [r1, #12]
 8003cde:	4605      	mov	r5, r0
 8003ce0:	05db      	lsls	r3, r3, #23
 8003ce2:	460c      	mov	r4, r1
 8003ce4:	4616      	mov	r6, r2
 8003ce6:	d505      	bpl.n	8003cf4 <__swrite+0x1e>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	2200      	movs	r2, #0
 8003cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf0:	f000 f868 	bl	8003dc4 <_lseek_r>
 8003cf4:	89a3      	ldrh	r3, [r4, #12]
 8003cf6:	4632      	mov	r2, r6
 8003cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cfc:	81a3      	strh	r3, [r4, #12]
 8003cfe:	4628      	mov	r0, r5
 8003d00:	463b      	mov	r3, r7
 8003d02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003d06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	f000 b817 	b.w	8003d3c <_write_r>

08003d0e <__sseek>:
 8003d0e:	b510      	push	{r4, lr}
 8003d10:	460c      	mov	r4, r1
 8003d12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d16:	f000 f855 	bl	8003dc4 <_lseek_r>
 8003d1a:	1c43      	adds	r3, r0, #1
 8003d1c:	89a3      	ldrh	r3, [r4, #12]
 8003d1e:	bf15      	itete	ne
 8003d20:	6560      	strne	r0, [r4, #84]	; 0x54
 8003d22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003d26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003d2a:	81a3      	strheq	r3, [r4, #12]
 8003d2c:	bf18      	it	ne
 8003d2e:	81a3      	strhne	r3, [r4, #12]
 8003d30:	bd10      	pop	{r4, pc}

08003d32 <__sclose>:
 8003d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d36:	f000 b813 	b.w	8003d60 <_close_r>
	...

08003d3c <_write_r>:
 8003d3c:	b538      	push	{r3, r4, r5, lr}
 8003d3e:	4604      	mov	r4, r0
 8003d40:	4608      	mov	r0, r1
 8003d42:	4611      	mov	r1, r2
 8003d44:	2200      	movs	r2, #0
 8003d46:	4d05      	ldr	r5, [pc, #20]	; (8003d5c <_write_r+0x20>)
 8003d48:	602a      	str	r2, [r5, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f7fd fb44 	bl	80013d8 <_write>
 8003d50:	1c43      	adds	r3, r0, #1
 8003d52:	d102      	bne.n	8003d5a <_write_r+0x1e>
 8003d54:	682b      	ldr	r3, [r5, #0]
 8003d56:	b103      	cbz	r3, 8003d5a <_write_r+0x1e>
 8003d58:	6023      	str	r3, [r4, #0]
 8003d5a:	bd38      	pop	{r3, r4, r5, pc}
 8003d5c:	2000057c 	.word	0x2000057c

08003d60 <_close_r>:
 8003d60:	b538      	push	{r3, r4, r5, lr}
 8003d62:	2300      	movs	r3, #0
 8003d64:	4d05      	ldr	r5, [pc, #20]	; (8003d7c <_close_r+0x1c>)
 8003d66:	4604      	mov	r4, r0
 8003d68:	4608      	mov	r0, r1
 8003d6a:	602b      	str	r3, [r5, #0]
 8003d6c:	f7fd fb50 	bl	8001410 <_close>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d102      	bne.n	8003d7a <_close_r+0x1a>
 8003d74:	682b      	ldr	r3, [r5, #0]
 8003d76:	b103      	cbz	r3, 8003d7a <_close_r+0x1a>
 8003d78:	6023      	str	r3, [r4, #0]
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	2000057c 	.word	0x2000057c

08003d80 <_fstat_r>:
 8003d80:	b538      	push	{r3, r4, r5, lr}
 8003d82:	2300      	movs	r3, #0
 8003d84:	4d06      	ldr	r5, [pc, #24]	; (8003da0 <_fstat_r+0x20>)
 8003d86:	4604      	mov	r4, r0
 8003d88:	4608      	mov	r0, r1
 8003d8a:	4611      	mov	r1, r2
 8003d8c:	602b      	str	r3, [r5, #0]
 8003d8e:	f7fd fb4a 	bl	8001426 <_fstat>
 8003d92:	1c43      	adds	r3, r0, #1
 8003d94:	d102      	bne.n	8003d9c <_fstat_r+0x1c>
 8003d96:	682b      	ldr	r3, [r5, #0]
 8003d98:	b103      	cbz	r3, 8003d9c <_fstat_r+0x1c>
 8003d9a:	6023      	str	r3, [r4, #0]
 8003d9c:	bd38      	pop	{r3, r4, r5, pc}
 8003d9e:	bf00      	nop
 8003da0:	2000057c 	.word	0x2000057c

08003da4 <_isatty_r>:
 8003da4:	b538      	push	{r3, r4, r5, lr}
 8003da6:	2300      	movs	r3, #0
 8003da8:	4d05      	ldr	r5, [pc, #20]	; (8003dc0 <_isatty_r+0x1c>)
 8003daa:	4604      	mov	r4, r0
 8003dac:	4608      	mov	r0, r1
 8003dae:	602b      	str	r3, [r5, #0]
 8003db0:	f7fd fb48 	bl	8001444 <_isatty>
 8003db4:	1c43      	adds	r3, r0, #1
 8003db6:	d102      	bne.n	8003dbe <_isatty_r+0x1a>
 8003db8:	682b      	ldr	r3, [r5, #0]
 8003dba:	b103      	cbz	r3, 8003dbe <_isatty_r+0x1a>
 8003dbc:	6023      	str	r3, [r4, #0]
 8003dbe:	bd38      	pop	{r3, r4, r5, pc}
 8003dc0:	2000057c 	.word	0x2000057c

08003dc4 <_lseek_r>:
 8003dc4:	b538      	push	{r3, r4, r5, lr}
 8003dc6:	4604      	mov	r4, r0
 8003dc8:	4608      	mov	r0, r1
 8003dca:	4611      	mov	r1, r2
 8003dcc:	2200      	movs	r2, #0
 8003dce:	4d05      	ldr	r5, [pc, #20]	; (8003de4 <_lseek_r+0x20>)
 8003dd0:	602a      	str	r2, [r5, #0]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f7fd fb40 	bl	8001458 <_lseek>
 8003dd8:	1c43      	adds	r3, r0, #1
 8003dda:	d102      	bne.n	8003de2 <_lseek_r+0x1e>
 8003ddc:	682b      	ldr	r3, [r5, #0]
 8003dde:	b103      	cbz	r3, 8003de2 <_lseek_r+0x1e>
 8003de0:	6023      	str	r3, [r4, #0]
 8003de2:	bd38      	pop	{r3, r4, r5, pc}
 8003de4:	2000057c 	.word	0x2000057c

08003de8 <memchr>:
 8003de8:	4603      	mov	r3, r0
 8003dea:	b510      	push	{r4, lr}
 8003dec:	b2c9      	uxtb	r1, r1
 8003dee:	4402      	add	r2, r0
 8003df0:	4293      	cmp	r3, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	d101      	bne.n	8003dfa <memchr+0x12>
 8003df6:	2000      	movs	r0, #0
 8003df8:	e003      	b.n	8003e02 <memchr+0x1a>
 8003dfa:	7804      	ldrb	r4, [r0, #0]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	428c      	cmp	r4, r1
 8003e00:	d1f6      	bne.n	8003df0 <memchr+0x8>
 8003e02:	bd10      	pop	{r4, pc}

08003e04 <__malloc_lock>:
 8003e04:	4801      	ldr	r0, [pc, #4]	; (8003e0c <__malloc_lock+0x8>)
 8003e06:	f7ff bb13 	b.w	8003430 <__retarget_lock_acquire_recursive>
 8003e0a:	bf00      	nop
 8003e0c:	20000570 	.word	0x20000570

08003e10 <__malloc_unlock>:
 8003e10:	4801      	ldr	r0, [pc, #4]	; (8003e18 <__malloc_unlock+0x8>)
 8003e12:	f7ff bb0e 	b.w	8003432 <__retarget_lock_release_recursive>
 8003e16:	bf00      	nop
 8003e18:	20000570 	.word	0x20000570

08003e1c <_read_r>:
 8003e1c:	b538      	push	{r3, r4, r5, lr}
 8003e1e:	4604      	mov	r4, r0
 8003e20:	4608      	mov	r0, r1
 8003e22:	4611      	mov	r1, r2
 8003e24:	2200      	movs	r2, #0
 8003e26:	4d05      	ldr	r5, [pc, #20]	; (8003e3c <_read_r+0x20>)
 8003e28:	602a      	str	r2, [r5, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f7fd fab7 	bl	800139e <_read>
 8003e30:	1c43      	adds	r3, r0, #1
 8003e32:	d102      	bne.n	8003e3a <_read_r+0x1e>
 8003e34:	682b      	ldr	r3, [r5, #0]
 8003e36:	b103      	cbz	r3, 8003e3a <_read_r+0x1e>
 8003e38:	6023      	str	r3, [r4, #0]
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	2000057c 	.word	0x2000057c

08003e40 <_init>:
 8003e40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e42:	bf00      	nop
 8003e44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e46:	bc08      	pop	{r3}
 8003e48:	469e      	mov	lr, r3
 8003e4a:	4770      	bx	lr

08003e4c <_fini>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr
